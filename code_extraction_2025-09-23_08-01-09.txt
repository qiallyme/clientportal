CODE EXTRACTION - 2025-09-23 08:01:09
Root: D:\clientportal
================================================================================

DIRECTORY TREE:
----------------------------------------
├── apps
│   └── web
│       ├── public
│       │   ├── index.html
│       │   ├── manifest.json
│       │   └── robots.txt
│       ├── src
│       │   ├── components
│       │   │   ├── Auth
│       │   │   │   ├── Auth.css
│       │   │   │   ├── AuthCallback.tsx
│       │   │   │   ├── EnterpriseLogin.tsx
│       │   │   │   ├── EnterpriseMagicLink.tsx
│       │   │   │   └── Register.tsx
│       │   │   ├── Branding
│       │   │   │   └── QiSuiteLogo.tsx
│       │   │   ├── Dashboard
│       │   │   │   ├── Dashboard.css
│       │   │   │   └── Dashboard.tsx
│       │   │   ├── ErrorBoundary
│       │   │   │   ├── ErrorBoundary.css
│       │   │   │   ├── ErrorBoundary.tsx
│       │   │   │   └── index.ts
│       │   │   ├── Forms
│       │   │   │   ├── FormBuilder.css
│       │   │   │   ├── FormBuilder.tsx
│       │   │   │   ├── FormsList.css
│       │   │   │   ├── FormsList.tsx
│       │   │   │   ├── FormSubmission.css
│       │   │   │   ├── FormSubmission.tsx
│       │   │   │   ├── FormViewer.css
│       │   │   │   ├── FormViewer.tsx
│       │   │   │   └── index.ts
│       │   │   ├── Landing
│       │   │   │   ├── LandingPage.css
│       │   │   │   └── LandingPage.tsx
│       │   │   ├── Layout
│       │   │   │   ├── Header.css
│       │   │   │   ├── Header.tsx
│       │   │   │   ├── Layout.css
│       │   │   │   └── Layout.tsx
│       │   │   ├── Loading
│       │   │   │   ├── index.ts
│       │   │   │   ├── Loading.css
│       │   │   │   └── Loading.tsx
│       │   │   └── Submissions
│       │   │       ├── index.ts
│       │   │       ├── SubmissionEditor.css
│       │   │       ├── SubmissionEditor.tsx
│       │   │       ├── SubmissionsList.css
│       │   │       ├── SubmissionsList.tsx
│       │   │       ├── SubmissionViewer.css
│       │   │       └── SubmissionViewer.tsx
│       │   ├── contexts
│       │   │   ├── FormsContext.tsx
│       │   │   ├── SocketContext.tsx
│       │   │   ├── SubmissionsContext.tsx
│       │   │   └── SupabaseAuthContext.tsx
│       │   ├── lib
│       │   │   ├── api.ts
│       │   │   └── supabase.ts
│       │   ├── services
│       │   │   ├── api.ts
│       │   │   └── supabaseForms.ts
│       │   ├── types
│       │   │   └── index.ts
│       │   ├── utils
│       │   │   └── requestCache.ts
│       │   ├── App.css
│       │   ├── App.test.tsx
│       │   ├── App.tsx
│       │   ├── index.css
│       │   ├── index.tsx
│       │   ├── reportWebVitals.ts
│       │   └── setupTests.ts
│       ├── package.json
│       └── tsconfig.json
├── config
├── docs
│   ├── env.md
│   └── LOCKED_FILES.md
├── infra
│   └── supabase
│       ├── migrations
│       │   ├── 001_initial_schema.sql
│       │   └── 050_forms_submissions.sql
│       └── seeds
│           ├── 001_initial_data.sql
│           └── 010_seed_org_admin.sql
├── migrations
│   ├── 001_update_schema_with_org_rls.sql
│   ├── 002_complete_seed.sql
│   ├── 003_final_migration.sql
│   └── 004_clients_table_and_policy.sql
├── scripts
├── supabase
├── workers
│   └── api
│       ├── src
│       │   ├── lib
│       │   │   ├── supabaseAdmin.js
│       │   │   └── supabaseAdmin.ts
│       │   ├── middleware
│       │   │   ├── auth.js
│       │   │   ├── auth.ts
│       │   │   ├── common.js
│       │   │   └── common.ts
│       │   ├── routes
│       │   │   ├── auth.js
│       │   │   ├── auth.ts
│       │   │   ├── forms.js
│       │   │   ├── forms.ts
│       │   │   ├── health.js
│       │   │   ├── health.ts
│       │   │   ├── submissions.js
│       │   │   └── submissions.ts
│       │   ├── index.js
│       │   ├── index.ts
│       │   ├── types.js
│       │   └── types.ts
│       ├── package.json
│       ├── ROUTE_LOCK.md
│       ├── tsconfig.json
│       └── wrangler.toml
├── code_extraction_2025-09-23_08-01-09.txt
├── code_extractor.py
├── package.json
├── README.md
├── setup-database.js
└── test-supabase-forms.js

================================================================================
EXTRACTING FILE CONTENTS
================================================================================


================================================================================
FILE: D:\clientportal\code_extraction_2025-09-23_08-01-09.txt
================================================================================



================================================================================
END: D:\clientportal\code_extraction_2025-09-23_08-01-09.txt
================================================================================


================================================================================
FILE: D:\clientportal\code_extractor.py
================================================================================

import os
from datetime import datetime

def should_ignore_directory(dir_name):
    """Check if directory should be ignored."""
    ignore_dirs = ['node_modules', 'dist', 'build', '.git', '$recycle.bin', 'tree-maker', '__pycache__']
    return dir_name.lower() in [d.lower() for d in ignore_dirs]

def is_text_file(file_name):
    """Check if file is a text file we want to extract."""
    # File extensions to explicitly exclude (binary/image files)
    binary_extensions = {
        '.ico', '.svg', '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp',
        '.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm', '.mkv',
        '.mp3', '.wav', '.flac', '.aac', '.ogg', '.wma',
        '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2',
        '.exe', '.dll', '.so', '.dylib', '.bin',
        '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
        '.db', '.sqlite', '.sqlite3', '.mdb', '.accdb',
        '.log', '.tmp', '.temp', '.cache', '.lock',
        '.pyc', '.pyo', '.pyd', '.whl', '.egg'
    }
    
    # Files to explicitly ignore
    ignore_files = {
        'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml',
        'composer.lock', 'Gemfile.lock', 'Pipfile.lock'
    }
    
    if file_name in ignore_files:
        return False
    
    # Check if it's a binary file
    ext = os.path.splitext(file_name)[1].lower()
    if ext in binary_extensions:
        return False
    
    # File extensions to include (text files only)
    text_extensions = {
        '.py', '.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.sass',
        '.json', '.xml', '.yaml', '.yml', '.md', '.txt', '.sh', '.bat', '.ps1',
        '.vue', '.php', '.java', '.cpp', '.c', '.h', '.hpp', '.cs', '.rb',
        '.go', '.rs', '.swift', '.kt', '.scala', '.r', '.sql', '.pl', '.lua',
        '.toml', '.ini', '.cfg', '.conf', '.env', '.gitignore'
    }
    
    # Check extension
    if ext in text_extensions:
        return True
    
    # Check for config files without extensions
    config_files = {
        'dockerfile', 'makefile', 'gemfile', 'procfile',
        'webpack.config.js', 'vite.config.js', 'rollup.config.js',
        'tsconfig.json', 'jsconfig.json', 'package.json'
    }
    return file_name.lower() in config_files

def print_directory_tree(root_dir, output_file, current_depth=0, prefix=''):
    """Print directory tree structure."""
    try:
        items = os.listdir(root_dir)
    except (PermissionError, FileNotFoundError):
        message = prefix + "└── [Access Denied]"
        print(message)
        output_file.write(message + "\n")
        return

    # Filter and sort items
    directories = []
    files = []
    
    for item in items:
        if item.startswith('.'):
            continue
        path = os.path.join(root_dir, item)
        if os.path.isdir(path):
            if not should_ignore_directory(item):
                directories.append(item)
        else:
            if is_text_file(item):
                files.append(item)
    
    # Sort alphabetically
    directories.sort(key=lambda s: s.lower())
    files.sort(key=lambda s: s.lower())
    items = directories + files

    for index, item in enumerate(items):
        path = os.path.join(root_dir, item)
        
        # Tree connector
        if index == len(items) - 1:
            connector = '└── '
            extension = '    '
        else:
            connector = '├── '
            extension = '│   '

        message = prefix + connector + item
        print(message)
        output_file.write(message + "\n")

        # Recurse into directories
        if os.path.isdir(path):
            print_directory_tree(path, output_file, current_depth + 1, prefix + extension)

def is_binary_file(file_path):
    """Check if a file is binary by reading the first 1024 bytes."""
    try:
        with open(file_path, 'rb') as f:
            chunk = f.read(1024)
            if b'\0' in chunk:  # Null bytes indicate binary
                return True
            # Check for high ratio of non-printable characters
            try:
                chunk.decode('utf-8')
            except UnicodeDecodeError:
                return True
            return False
    except:
        return True  # If we can't read it, assume it's binary

def extract_file_content(file_path, output_file):
    """Extract and write file content."""
    try:
        # Double-check if file is binary before reading
        if is_binary_file(file_path):
            skip_msg = f"\n{'='*80}\nSKIPPED BINARY FILE: {file_path}\n{'='*80}\n\n"
            print(skip_msg)
            output_file.write(skip_msg)
            return
        
        # File header
        header = f"\n{'='*80}\nFILE: {file_path}\n{'='*80}\n\n"
        print(header)
        output_file.write(header)
        
        # Read and write content
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            print(content)
            output_file.write(content)
            
        # File footer
        footer = f"\n\n{'='*80}\nEND: {file_path}\n{'='*80}\n\n"
        print(footer)
        output_file.write(footer)
        
    except Exception as e:
        error_msg = f"\nERROR: {file_path} - {str(e)}\n"
        print(error_msg)
        output_file.write(error_msg)

def walk_and_extract(root_dir, output_file):
    """Walk directories and extract text files in order."""
    print(f"\n{'='*80}")
    print("EXTRACTING FILE CONTENTS")
    print(f"{'='*80}\n")
    output_file.write(f"\n{'='*80}\nEXTRACTING FILE CONTENTS\n{'='*80}\n\n")
    
    file_count = 0
    
    for root, dirs, files in os.walk(root_dir):
        # Filter directories
        dirs[:] = [d for d in dirs if not should_ignore_directory(d) and not d.startswith('.')]
        
        # Filter and sort files
        text_files = [f for f in files if is_text_file(f)]
        text_files.sort(key=lambda s: s.lower())
        
        for file_name in text_files:
            file_path = os.path.join(root, file_name)
            extract_file_content(file_path, output_file)
            file_count += 1
    
    return file_count

def main():
    """Main function to run the code extraction."""
    root_dir = os.getcwd()
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_filename = f"code_extraction_{timestamp}.txt"
    output_path = os.path.join(root_dir, output_filename)
    
    print(f"Extracting from: {root_dir}")
    print(f"Output: {output_path}")
    print(f"Ignoring: node_modules, dist, build, .git, $RECYCLE.BIN, tree-maker, __pycache__")
    print(f"{'='*80}\n")
    
    with open(output_path, 'w', encoding='utf-8') as output_file:
        # Header
        header = f"CODE EXTRACTION - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        header += f"Root: {root_dir}\n"
        header += f"{'='*80}\n\n"
        print(header)
        output_file.write(header)
        
        # Directory tree
        print("DIRECTORY TREE:")
        print("-" * 40)
        output_file.write("DIRECTORY TREE:\n" + "-" * 40 + "\n")
        print_directory_tree(root_dir, output_file)
        
        # Extract files
        file_count = walk_and_extract(root_dir, output_file)
        
        # Footer
        footer = f"\n{'='*80}\nCOMPLETE - {file_count} files extracted\n{'='*80}\n"
        print(footer)
        output_file.write(footer)
    
    print(f"\nDone! Output: {output_path}")

if __name__ == "__main__":
    main()


================================================================================
END: D:\clientportal\code_extractor.py
================================================================================


================================================================================
FILE: D:\clientportal\package.json
================================================================================

{
  "name": "clientportal",
  "version": "1.0.0",
  "description": "QiAlly Portal - Client portal with Supabase authentication",
  "type": "module",
  "scripts": {
    "dev": "cd apps/web && npm start",
    "build": "cd apps/web && npm run build",
    "build:worker": "cd workers/api && npm run build",
    "deploy:worker": "cd workers/api && wrangler deploy",
    "deploy:pages": "cd apps/web && npm run build && wrangler pages deploy build",
    "install:all": "npm install && cd apps/web && npm install && cd ../../workers/api && npm install"
  },
  "keywords": [
    "portal",
    "client",
    "supabase",
    "react",
    "cloudflare-workers"
  ],
  "author": "QiAlly",
  "license": "MIT",
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20250921.0"
  }
}


================================================================================
END: D:\clientportal\package.json
================================================================================


================================================================================
FILE: D:\clientportal\README.md
================================================================================

# Client Portal - Modern Full-Stack Application

A modern, real-time client portal built with React, Supabase, and Cloudflare Workers. Features include form submissions, real-time updates, user management, and admin dashboards with enterprise-grade security and performance.

## 🚀 Features

- **Modern Architecture**: React frontend with Cloudflare Workers backend
- **Real-Time Updates**: Live data synchronization using WebSockets
- **Form Management**: Create and manage dynamic forms with custom schemas
- **User Management**: Role-based access control with Supabase Auth
- **Admin Dashboard**: Comprehensive analytics and management tools
- **Responsive Design**: Works on desktop and mobile devices
- **Secure Authentication**: Supabase Auth with JWT tokens and RLS policies
- **Multi-Tenant**: Organization-based data isolation with Row Level Security
- **Global CDN**: Cloudflare's edge network for fast global access

## 🛠 Tech Stack

### Frontend (Cloudflare Pages)

- **React 19** with TypeScript
- **React Router** for navigation
- **Supabase Client** for authentication and real-time features
- **Axios** for API calls
- **Socket.io Client** for real-time updates
- **CSS3** with modern styling

### Backend (Cloudflare Workers)

- **Hono** framework for high-performance API
- **Supabase** for database and authentication
- **JWT** token validation with jose
- **Zod** for request validation
- **CORS** and rate limiting middleware

### Database & Auth

- **Supabase PostgreSQL** with Row Level Security
- **Supabase Auth** for user management
- **Real-time subscriptions** for live updates

### Infrastructure

- **Cloudflare Pages** for frontend hosting
- **Cloudflare Workers** for API hosting
- **Cloudflare CDN** for global distribution
- **Custom domains**: `portal.qially.com` and `api.qially.com`

## 📋 Prerequisites

- Node.js (v18 or higher)
- npm or yarn
- Supabase account
- Cloudflare account

## 🚀 Quick Start

### 1. Clone the Repository

```bash
git clone https://github.com/qiallyme/clientportal.git
cd clientportal
```

### 2. Install Dependencies

```bash
npm run install:all
```

### 3. Environment Configuration

#### Backend (Cloudflare Workers)

Set up your Cloudflare Workers secrets:

```bash
cd workers/api
wrangler secret put SUPABASE_URL
wrangler secret put SUPABASE_SERVICE_ROLE_KEY
```

#### Frontend (React App)

Create environment file:

```bash
cd apps/web
cp .env.example .env.local
```

Edit `apps/web/.env.local`:

```env
# Supabase Configuration
REACT_APP_SUPABASE_URL=https://your-project.supabase.co
REACT_APP_SUPABASE_ANON_KEY=your-supabase-anon-key

# API Configuration (production)
REACT_APP_API_URL=https://api.qially.com

# API Configuration (development)
# REACT_APP_API_URL=http://localhost:8787
```

#### Root Environment

Create `env.example` copy:

```bash
cp env.example .env
```

Edit `.env`:

```env
# Client URL (production)
CLIENT_URL=https://portal.qially.com

# API URLs (production)
REACT_APP_API_URL=https://api.qially.com
REACT_APP_SOCKET_URL=https://api.qially.com
```

### 4. Database Setup

#### Option 1: Use Supabase CLI (Recommended)

```bash
# Install Supabase CLI
npm install -g supabase

# Link to your project
supabase link --project-ref your-project-ref

# Run migrations
supabase db push

# Apply seed data
supabase db seed
```

#### Option 2: Manual Setup

Run the SQL files in your Supabase SQL Editor:

1. `infra/supabase/migrations/001_initial_schema.sql`
2. `infra/supabase/seeds/001_initial_data.sql`

### 5. Development

#### Start Frontend

```bash
npm run dev
# or
cd apps/web && npm start
```

#### Start Backend (Local Development)

```bash
cd workers/api
npm run dev
```

### 6. Production Deployment

#### Deploy Backend (Cloudflare Workers)

```bash
cd workers/api
npm run deploy
```

#### Deploy Frontend (Cloudflare Pages)

```bash
cd apps/web
npm run build
# Deploy build folder to Cloudflare Pages
```

## 🌐 Production URLs

- **Frontend**: https://portal.qially.com
- **API**: https://api.qially.com
- **Health Check**: https://api.qially.com/health

## 📁 Project Structure

```
clientportal/
├── apps/
│   └── web/                    # React frontend
│       ├── src/
│       │   ├── components/     # React components
│       │   ├── contexts/       # React contexts
│       │   ├── lib/           # Supabase client
│       │   ├── services/      # API services
│       │   └── types/         # TypeScript types
│       ├── public/            # Static assets
│       └── package.json
├── workers/
│   └── api/                   # Cloudflare Workers API
│       ├── src/
│       │   ├── routes/        # API routes
│       │   ├── middleware/    # Middleware functions
│       │   └── lib/          # Utility libraries
│       ├── wrangler.toml     # Cloudflare Workers config
│       └── package.json
├── infra/
│   └── supabase/             # Database migrations
│       ├── migrations/       # SQL migration files
│       └── seeds/           # Seed data files
├── docs/                    # Documentation
└── package.json            # Root package.json
```

## 🔧 Cloudflare Configuration

### Cloudflare Pages Settings

**Build Settings:**

- **Build command**: `npm ci --prefix apps/web && npm run build --prefix apps/web`
- **Build output directory**: `apps/web/build`
- **Root directory**: `/` (leave empty)

**Environment Variables:**

```env
REACT_APP_SUPABASE_URL=https://your-project.supabase.co
REACT_APP_SUPABASE_ANON_KEY=your-supabase-anon-key
REACT_APP_API_URL=https://api.qially.com
```

**Custom Domain:**

- Set up `portal.qially.com` to point to your Cloudflare Pages

### Cloudflare Workers Settings

**Worker Configuration:**

- **Name**: `clientportal-api`
- **Custom Domain**: `api.qially.com`

**Environment Variables:**

```env
JWT_ISSUER=clientportal
```

**Secrets:**

```bash
wrangler secret put SUPABASE_URL
wrangler secret put SUPABASE_SERVICE_ROLE_KEY
```

## 🔐 Authentication Flow

1. **User Registration/Login**: Handled by Supabase Auth
2. **JWT Token**: Generated by Supabase with custom claims
3. **API Requests**: Include JWT token in Authorization header
4. **Row Level Security**: Database policies enforce tenant isolation
5. **Real-time Updates**: WebSocket connections with authenticated users

## 🗄️ Database Schema

### Core Tables

- **organizations**: Multi-tenant organization data
- **users**: User profiles linked to organizations
- **forms**: Dynamic form definitions
- **submissions**: Form submission data

### Security Features

- **Row Level Security (RLS)**: Tenant-based data isolation
- **JWT Claims**: Organization and user context in tokens
- **Helper Functions**: `jwt_org_id()` and `jwt_uid()` for RLS policies

## 🚀 API Endpoints

### Authentication

- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `POST /api/auth/logout` - User logout
- `POST /api/auth/refresh` - Refresh session
- `GET /api/auth/me` - Get current user

### Forms

- `GET /api/forms` - List forms
- `POST /api/forms` - Create form
- `GET /api/forms/:id` - Get form details
- `PUT /api/forms/:id` - Update form
- `DELETE /api/forms/:id` - Delete form

### Submissions

- `GET /api/submissions` - List submissions
- `POST /api/submissions` - Create submission
- `GET /api/submissions/:id` - Get submission details
- `PUT /api/submissions/:id` - Update submission

### Health

- `GET /health` - Health check endpoint

## 🔧 Development Commands

```bash
# Install all dependencies
npm run install:all

# Start frontend development server
npm run dev

# Build frontend for production
npm run build

# Build and deploy backend
npm run build:worker
npm run deploy:worker

# Type checking
npm run check

# Run tests
npm test
```

## 📝 Environment Variables

### Frontend (Vite)

```env
REACT_APP_SUPABASE_URL=https://your-project.supabase.co
REACT_APP_SUPABASE_ANON_KEY=your-supabase-anon-key
REACT_APP_API_URL=https://api.qially.com
```

### Backend (Cloudflare Workers)

```env
JWT_ISSUER=clientportal
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
```

## 🐛 Troubleshooting

### Common Issues

1. **CORS Errors**: Ensure `portal.qially.com` is in the CORS allowlist
2. **Authentication Issues**: Check Supabase configuration and JWT_ISSUER
3. **Database Connection**: Verify Supabase URL and service role key
4. **Build Failures**: Check Node.js version and dependency installation

### Debug Commands

```bash
# Check API health
curl https://api.qially.com/health

# Test CORS
curl -H "Origin: https://portal.qially.com" https://api.qially.com/health

# Check Cloudflare Workers logs
wrangler tail
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

For support and questions:

- Create an issue in the GitHub repository
- Check the documentation in the `docs/` folder
- Review the troubleshooting section above

---

**Built with ❤️ using React, Supabase, and Cloudflare**


================================================================================
END: D:\clientportal\README.md
================================================================================


================================================================================
FILE: D:\clientportal\setup-database.js
================================================================================



================================================================================
END: D:\clientportal\setup-database.js
================================================================================


================================================================================
FILE: D:\clientportal\test-supabase-forms.js
================================================================================

// Test script to create a form in Supabase
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://vwqkhjnkummwtvfxgqml.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3cWtoam5rdW1td3R2ZnhncW1sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwMDMwNDksImV4cCI6MjA3MTU3OTA0OX0.Q1_W-sq8iKVPfJ2HfTS2hGNmK5jjzsy50cHszhB_6VQ';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSupabaseForms() {
  console.log('Testing Supabase forms connection...');
  
  try {
    // First, let's check if we can read the forms table
    console.log('1. Testing read access to forms table...');
    const { data: forms, error: readError } = await supabase
      .from('forms')
      .select('*');
    
    if (readError) {
      console.error('Read error:', readError);
    } else {
      console.log('Forms found:', forms);
    }
    
    // Check if organizations table exists
    console.log('2. Testing organizations table...');
    const { data: orgs, error: orgError } = await supabase
      .from('organizations')
      .select('*');
    
    if (orgError) {
      console.error('Organizations error:', orgError);
    } else {
      console.log('Organizations found:', orgs);
    }
    
    // Check if users table exists
    console.log('3. Testing users table...');
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('*');
    
    if (userError) {
      console.error('Users error:', userError);
    } else {
      console.log('Users found:', users);
    }
    
  } catch (error) {
    console.error('Test failed:', error);
  }
}

testSupabaseForms();


================================================================================
END: D:\clientportal\test-supabase-forms.js
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\package.json
================================================================================

{
  "name": "client-portal-web",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@supabase/supabase-js": "^2.57.4",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.2",
    "react-scripts": "5.0.1",
    "socket.io-client": "^4.8.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


================================================================================
END: D:\clientportal\apps\web\package.json
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\tsconfig.json
================================================================================

{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}


================================================================================
END: D:\clientportal\apps\web\tsconfig.json
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\public\index.html
================================================================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <base href="/" />
    <link rel="icon" href="/favicon.ico" />
    <link rel="icon" href="/hummingbird.svg" type="image/svg+xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- theme-color is supported by Chrome, Safari, Edge, and mobile browsers (not Firefox/Opera) -->
    <meta name="theme-color" content="#000000" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#000000" media="(prefers-color-scheme: dark)" />
    <meta
      name="description"
      content="QiAlly Portal - Enterprise client portal for form management and submissions"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>QiAlly Portal</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


================================================================================
END: D:\clientportal\apps\web\public\index.html
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\public\manifest.json
================================================================================

{
  "short_name": "QiAlly Portal",
  "name": "QiAlly Portal - Enterprise Client Portal",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


================================================================================
END: D:\clientportal\apps\web\public\manifest.json
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\public\robots.txt
================================================================================

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


================================================================================
END: D:\clientportal\apps\web\public\robots.txt
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\App.css
================================================================================

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f9fafb;
  color: #1f2937;
}

.App {
  min-height: 100vh;
}

.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 200px;
  font-size: 16px;
  color: #6b7280;
}

.page-placeholder {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 12px;
  border: 1px solid #e5e7eb;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.page-placeholder h1 {
  margin: 0 0 16px 0;
  color: #1f2937;
  font-size: 24px;
  font-weight: 600;
}

.page-placeholder p {
  margin: 0;
  color: #6b7280;
  font-size: 16px;
}

/* Utility classes */
.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.mb-4 {
  margin-bottom: 16px;
}

.mb-8 {
  margin-bottom: 32px;
}

.mt-4 {
  margin-top: 16px;
}

.mt-8 {
  margin-top: 32px;
}

.p-4 {
  padding: 16px;
}

.p-8 {
  padding: 32px;
}

.flex {
  display: flex;
}

.flex-col {
  flex-direction: column;
}

.items-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.gap-4 {
  gap: 16px;
}

.gap-8 {
  gap: 32px;
}

.w-full {
  width: 100%;
}

.h-full {
  height: 100%;
}

/* Button styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  text-decoration: none;
}

.btn-primary {
  background: #2563eb;
  color: white;
}

.btn-primary:hover {
  background: #1d4ed8;
}

.btn-secondary {
  background: #6b7280;
  color: white;
}

.btn-secondary:hover {
  background: #4b5563;
}

.btn-danger {
  background: #dc2626;
  color: white;
}

.btn-danger:hover {
  background: #b91c1c;
}

.btn-outline {
  background: transparent;
  border: 1px solid #d1d5db;
  color: #374151;
}

.btn-outline:hover {
  background: #f3f4f6;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Form styles */
.form-group {
  margin-bottom: 16px;
}

.form-label {
  display: block;
  margin-bottom: 4px;
  font-weight: 500;
  color: #374151;
  font-size: 14px;
}

.form-input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.form-input:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.form-select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  background: white;
  cursor: pointer;
}

.form-textarea {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  resize: vertical;
  min-height: 80px;
}

/* Card styles */
.card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.card-header {
  padding: 16px 20px;
  border-bottom: 1px solid #e5e7eb;
  background: #f9fafb;
}

.card-body {
  padding: 20px;
}

.card-footer {
  padding: 16px 20px;
  border-top: 1px solid #e5e7eb;
  background: #f9fafb;
}

/* Badge styles */
.badge {
  display: inline-flex;
  align-items: center;
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
}

.badge-success {
  background: #d1fae5;
  color: #065f46;
}

.badge-warning {
  background: #fef3c7;
  color: #92400e;
}

.badge-error {
  background: #fee2e2;
  color: #991b1b;
}

.badge-info {
  background: #dbeafe;
  color: #1e40af;
}

.badge-gray {
  background: #f3f4f6;
  color: #374151;
}

/* Alert styles */
.alert {
  padding: 12px 16px;
  border-radius: 6px;
  margin-bottom: 16px;
  font-size: 14px;
}

.alert-success {
  background: #d1fae5;
  border: 1px solid #a7f3d0;
  color: #065f46;
}

.alert-warning {
  background: #fef3c7;
  border: 1px solid #fde68a;
  color: #92400e;
}

.alert-error {
  background: #fee2e2;
  border: 1px solid #fecaca;
  color: #991b1b;
}

.alert-info {
  background: #dbeafe;
  border: 1px solid #93c5fd;
  color: #1e40af;
}

/* Responsive utilities */
@media (max-width: 768px) {
  .hidden-mobile {
    display: none !important;
  }
  
  .block-mobile {
    display: block !important;
  }
  
  .flex-mobile {
    display: flex !important;
  }
}

================================================================================
END: D:\clientportal\apps\web\src\App.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\App.test.tsx
================================================================================

import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});




// Note: The above test is a basic example. You can add more tests to cover different functionalities of the App component.

================================================================================
END: D:\clientportal\apps\web\src\App.test.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\App.tsx
================================================================================

import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { SupabaseAuthProvider, useSupabaseAuth } from './contexts/SupabaseAuthContext';
import { SocketProvider } from './contexts/SocketContext';
import { FormsProvider } from './contexts/FormsContext';
import { SubmissionsProvider } from './contexts/SubmissionsContext';
import { ErrorBoundary } from './components/ErrorBoundary';
import Layout from './components/Layout/Layout';
import LandingPage from './components/Landing/LandingPage';
import EnterpriseLogin from './components/Auth/EnterpriseLogin';
import Register from './components/Auth/Register';
import EnterpriseMagicLink from './components/Auth/EnterpriseMagicLink';
import AuthCallback from './components/Auth/AuthCallback';
import Dashboard from './components/Dashboard/Dashboard';
import { FormsList, FormBuilder, FormViewer, FormSubmission } from './components/Forms';
import { SubmissionsList, SubmissionViewer, SubmissionEditor } from './components/Submissions';
import './App.css';

// Protected Route Component
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, loading } = useSupabaseAuth();

  // CRITICAL: Don't redirect while loading to prevent loops
  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  // Only redirect if we're sure the user is not authenticated
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return <>{children}</>;
};

// Public Route Component (redirect to dashboard if authenticated)
const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, loading } = useSupabaseAuth();

  // CRITICAL: Don't redirect while loading to prevent loops
  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  // Only redirect if we're sure the user is authenticated
  if (isAuthenticated) {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
};

// Admin Only Route Component
const AdminRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, user, loading } = useSupabaseAuth();

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  // Check if user has admin role in user metadata
  const userRole = user?.user_metadata?.role || 'user';
  if (userRole !== 'admin') {
    return <Navigate to="/dashboard" replace />;
  }

  return <>{children}</>;
};

// Main App Routes
const AppRoutes: React.FC = () => {
  return (
    <Routes>
      <Route path="/" element={<LandingPage />} />
      
      {/* Public Routes */}
      <Route
        path="/login"
        element={
          <PublicRoute>
            <EnterpriseLogin />
          </PublicRoute>
        }
      />
      <Route
        path="/register"
        element={
          <PublicRoute>
            <Register />
          </PublicRoute>
        }
      />
      <Route
        path="/magic-link"
        element={
          <PublicRoute>
            <EnterpriseMagicLink />
          </PublicRoute>
        }
      />
      <Route
        path="/auth/callback"
        element={<AuthCallback />}
      />

      {/* Protected Routes */}
      <Route
        path="/dashboard"
        element={
          <ProtectedRoute>
            <Layout>
              <ErrorBoundary>
                <Dashboard />
              </ErrorBoundary>
            </Layout>
          </ProtectedRoute>
        }
      />
      
      {/* Forms Routes */}
      <Route
        path="/forms"
        element={
          <ProtectedRoute>
            <Layout>
              <ErrorBoundary>
                <FormsList />
              </ErrorBoundary>
            </Layout>
          </ProtectedRoute>
        }
      />
      <Route
        path="/forms/new"
        element={
          <ProtectedRoute>
            <Layout>
              <ErrorBoundary>
                <FormBuilder />
              </ErrorBoundary>
            </Layout>
          </ProtectedRoute>
        }
      />
      <Route
        path="/forms/:id"
        element={
          <ProtectedRoute>
            <Layout>
              <FormViewer />
            </Layout>
          </ProtectedRoute>
        }
      />
      <Route
        path="/forms/:id/edit"
        element={
          <ProtectedRoute>
            <Layout>
              <FormBuilder />
            </Layout>
          </ProtectedRoute>
        }
      />
      <Route
        path="/forms/:id/submit"
        element={<FormSubmission />}
      />
      <Route
        path="/forms/:id/submissions"
        element={
          <AdminRoute>
            <Layout>
              <div className="page-placeholder">
                <h1>Form Submissions</h1>
                <p>Form-specific submissions view coming soon...</p>
              </div>
            </Layout>
          </AdminRoute>
        }
      />
      
      {/* Submissions Routes - Admin Only */}
      <Route
        path="/submissions"
        element={
          <AdminRoute>
            <Layout>
              <SubmissionsList />
            </Layout>
          </AdminRoute>
        }
      />
      <Route
        path="/submissions/:id"
        element={
          <AdminRoute>
            <Layout>
              <SubmissionViewer />
            </Layout>
          </AdminRoute>
        }
      />
      <Route
        path="/submissions/:id/edit"
        element={
          <AdminRoute>
            <Layout>
              <SubmissionEditor />
            </Layout>
          </AdminRoute>
        }
      />
      
      <Route
        path="/users"
        element={
          <AdminRoute>
            <Layout>
              <div className="page-placeholder">
                <h1>Users</h1>
                <p>User management coming soon...</p>
              </div>
            </Layout>
          </AdminRoute>
        }
      />
      
      <Route
        path="/profile"
        element={
          <ProtectedRoute>
            <Layout>
              <div className="page-placeholder">
                <h1>Profile</h1>
                <p>Profile management coming soon...</p>
              </div>
            </Layout>
          </ProtectedRoute>
        }
      />
      
      <Route
        path="/settings"
        element={
          <ProtectedRoute>
            <Layout>
              <div className="page-placeholder">
                <h1>Settings</h1>
                <p>Settings coming soon...</p>
              </div>
            </Layout>
          </ProtectedRoute>
        }
      />

      {/* 404 Route */}
      <Route
        path="*"
        element={
          <Layout>
            <div className="page-placeholder">
              <h1>404 - Page Not Found</h1>
              <p>The page you're looking for doesn't exist.</p>
            </div>
          </Layout>
        }
      />
    </Routes>
  );
};

function App() {
  return (
    <ErrorBoundary>
      <SupabaseAuthProvider>
        <SocketProvider>
          <FormsProvider>
            <SubmissionsProvider>
              <Router>
                <div className="App">
                  <AppRoutes />
                </div>
              </Router>
            </SubmissionsProvider>
          </FormsProvider>
        </SocketProvider>
      </SupabaseAuthProvider>
    </ErrorBoundary>
  );
}

export default App;


================================================================================
END: D:\clientportal\apps\web\src\App.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\index.css
================================================================================

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


================================================================================
END: D:\clientportal\apps\web\src\index.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\index.tsx
================================================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


================================================================================
END: D:\clientportal\apps\web\src\index.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\reportWebVitals.ts
================================================================================

import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


================================================================================
END: D:\clientportal\apps\web\src\reportWebVitals.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\setupTests.ts
================================================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


================================================================================
END: D:\clientportal\apps\web\src\setupTests.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Auth\Auth.css
================================================================================

.auth-container {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 20px;
}

/* Enterprise split-screen layout */
.auth-container.enterprise {
  background: #f8fafc;
  padding: 0;
}

.auth-container.enterprise .auth-card {
  max-width: none;
  width: 100%;
  height: 100vh;
  border-radius: 0;
  box-shadow: none;
  padding: 0;
  display: flex;
  flex-direction: row;
}

.auth-left-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 60px;
  background: white;
  position: relative;
}

.auth-right-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 60px;
  background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
  color: white;
  position: relative;
  overflow: hidden;
}

.auth-right-panel::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
}

.auth-form-container {
  width: 100%;
  max-width: 400px;
}

.auth-branding-container {
  text-align: center;
  z-index: 1;
  position: relative;
}

.auth-branding-container h1 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: white;
}

.auth-branding-container p {
  font-size: 1.125rem;
  opacity: 0.9;
  line-height: 1.6;
  max-width: 400px;
  margin: 0 auto;
}

.auth-features {
  margin-top: 3rem;
  text-align: left;
  max-width: 400px;
}

.auth-feature {
  display: flex;
  align-items: center;
  margin-bottom: 1.5rem;
  opacity: 0.9;
}

.auth-feature-icon {
  width: 24px;
  height: 24px;
  margin-right: 12px;
  flex-shrink: 0;
}

.auth-feature-text {
  font-size: 0.95rem;
}

/* Mobile responsive */
@media (max-width: 768px) {
  .auth-container.enterprise .auth-card {
    flex-direction: column;
  }
  
  .auth-right-panel {
    display: none;
  }
  
  .auth-left-panel {
    padding: 40px 20px;
  }
}

.auth-card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  padding: 40px;
  width: 100%;
  max-width: 500px;
}

.auth-header {
  text-align: center;
  margin-bottom: 32px;
}

.auth-header h1 {
  margin: 0 0 8px 0;
  color: #1f2937;
  font-size: 28px;
  font-weight: 700;
}

.auth-header p {
  margin: 0;
  color: #6b7280;
  font-size: 16px;
}

.auth-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.form-group label {
  font-weight: 500;
  color: #374151;
  font-size: 14px;
}

.form-group input,
.form-group select {
  padding: 12px 16px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.error-message {
  background: #fef2f2;
  border: 1px solid #fecaca;
  color: #dc2626;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
  margin-bottom: 16px;
}

.auth-button {
  background: #2563eb;
  color: white;
  border: none;
  padding: 14px 24px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s;
  margin-top: 8px;
}

.auth-button:hover:not(:disabled) {
  background: #1d4ed8;
}

.auth-button:disabled {
  background: #9ca3af;
  cursor: not-allowed;
}

.auth-footer {
  text-align: center;
  margin-top: 24px;
  padding-top: 24px;
  border-top: 1px solid #e5e7eb;
}

.auth-footer p {
  margin: 0;
  color: #6b7280;
  font-size: 14px;
}

.auth-link {
  color: #2563eb;
  text-decoration: none;
  font-weight: 500;
}

.auth-link:hover {
  text-decoration: underline;
}

/* Magic Link Styles */
.magic-link-section {
  margin-top: 24px;
  padding: 20px;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
}

.magic-link-section h3 {
  margin: 0 0 12px 0;
  color: #1f2937;
  font-size: 18px;
  font-weight: 600;
}

.magic-link-section p {
  margin: 0 0 12px 0;
  color: #6b7280;
  font-size: 14px;
}

.token-display {
  background: #1f2937;
  color: #f9fafb;
  padding: 12px;
  border-radius: 6px;
  margin: 12px 0;
  word-break: break-all;
  font-family: 'Courier New', monospace;
  font-size: 12px;
  line-height: 1.4;
}

.success-message {
  background: #f0fdf4;
  border: 1px solid #bbf7d0;
  color: #166534;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
  margin-bottom: 16px;
}

@media (max-width: 480px) {
  .auth-container {
    padding: 16px;
  }

  .auth-card {
    padding: 24px;
  }

  .auth-header h1 {
    font-size: 24px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Auth\Auth.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Auth\AuthCallback.tsx
================================================================================

import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../../lib/supabase';

const AuthCallback: React.FC = () => {
  const navigate = useNavigate();

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Auth callback error:', error);
          navigate('/login?error=auth_callback_failed');
          return;
        }

        if (data.session?.user) {
          // Successfully authenticated, redirect to dashboard
          navigate('/dashboard');
        } else {
          // No session, redirect to login
          navigate('/login');
        }
      } catch (error) {
        console.error('Auth callback error:', error);
        navigate('/login?error=auth_callback_failed');
      }
    };

    handleAuthCallback();
  }, [navigate]);

  return (
    <div className="auth-container">
      <div className="auth-card">
        <div className="auth-header">
          <h1>Authenticating...</h1>
          <p>Please wait while we complete your sign in.</p>
        </div>
      </div>
    </div>
  );
};

export default AuthCallback;


================================================================================
END: D:\clientportal\apps\web\src\components\Auth\AuthCallback.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Auth\EnterpriseLogin.tsx
================================================================================

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import QiSuiteLogo from '../Branding/QiSuiteLogo';
import './Auth.css';

const EnterpriseLogin: React.FC = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const { signIn } = useSupabaseAuth();
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await signIn(formData.email, formData.password);
      navigate('/dashboard');
    } catch (err: any) {
      setError(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container enterprise">
      <div className="auth-card">
        {/* Left Panel - Login Form */}
        <div className="auth-left-panel">
          <div className="auth-form-container">
            <div className="auth-header">
              <QiSuiteLogo size="large" variant="full" className="mb-8" />
              <h1>Welcome Back</h1>
              <p>Sign in to your QiAlly Portal account</p>
            </div>

            <form onSubmit={handleSubmit} className="auth-form">
              {error && <div className="error-message">{error}</div>}

              <div className="form-group">
                <label htmlFor="email">Email Address</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  placeholder="Enter your email address"
                />
              </div>

              <div className="form-group">
                <label htmlFor="password">Password</label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  placeholder="Enter your password"
                />
              </div>

              <button
                type="submit"
                className="auth-button"
                disabled={loading}
              >
                {loading ? 'Signing in...' : 'Sign In'}
              </button>
            </form>

            <div className="auth-footer">
              <p>
                Don't have an account?{' '}
                <Link to="/register" className="auth-link">
                  Contact your administrator
                </Link>
              </p>
              <p>
                <Link to="/magic-link" className="auth-link">
                  Sign in with Magic Link
                </Link>
              </p>
            </div>
          </div>
        </div>

        {/* Right Panel - Branding */}
        <div className="auth-right-panel">
          <div className="auth-branding-container">
            <h1>QiAlly Portal</h1>
            <p>
              Streamline your workflow with our enterprise-grade client portal. 
              Manage forms, track submissions, and collaborate seamlessly.
            </p>
            
            <div className="auth-features">
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Secure form management</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Real-time collaboration</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Advanced analytics</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Enterprise security</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnterpriseLogin;


================================================================================
END: D:\clientportal\apps\web\src\components\Auth\EnterpriseLogin.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Auth\EnterpriseMagicLink.tsx
================================================================================

import React, { useState } from 'react';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import QiSuiteLogo from '../Branding/QiSuiteLogo';
import './Auth.css';

const EnterpriseMagicLink: React.FC = () => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const { signInWithMagicLink } = useSupabaseAuth();

  const handleRequestMagicLink = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      await signInWithMagicLink(email);
      setMessage('Magic link sent! Check your email and click the link to sign in.');
    } catch (error: any) {
      setMessage(`Error: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container enterprise">
      <div className="auth-card">
        {/* Left Panel - Magic Link Form */}
        <div className="auth-left-panel">
          <div className="auth-form-container">
            <div className="auth-header">
              <QiSuiteLogo size="large" variant="full" className="mb-8" />
              <h1>Magic Link Sign In</h1>
              <p>Enter your email to receive a secure sign-in link</p>
            </div>

            <form onSubmit={handleRequestMagicLink} className="auth-form">
              {message && <div className={`message ${message.includes('Error') ? 'error-message' : 'success-message'}`}>{message}</div>}

              <div className="form-group">
                <label htmlFor="email">Email Address</label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  placeholder="Enter your email address"
                />
              </div>

              <button
                type="submit"
                className="auth-button"
                disabled={loading}
              >
                {loading ? 'Sending...' : 'Send Magic Link'}
              </button>
            </form>

            <div className="auth-footer">
              <p>
                <a href="/login" className="auth-link">
                  Back to regular sign in
                </a>
              </p>
            </div>
          </div>
        </div>

        {/* Right Panel - Branding */}
        <div className="auth-right-panel">
          <div className="auth-branding-container">
            <h1>Passwordless Authentication</h1>
            <p>
              Experience the future of secure authentication. No passwords to remember, 
              no security risks. Just click the link in your email and you're in.
            </p>
            
            <div className="auth-features">
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Enhanced security</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">One-click access</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">No password management</span>
              </div>
              
              <div className="auth-feature">
                <svg className="auth-feature-icon" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span className="auth-feature-text">Enterprise approved</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnterpriseMagicLink;


================================================================================
END: D:\clientportal\apps\web\src\components\Auth\EnterpriseMagicLink.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Auth\Register.tsx
================================================================================

import React, { useState } from 'react';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { Link } from 'react-router-dom';
import './Auth.css';

const Register: React.FC = () => {
  const { signUp } = useSupabaseAuth();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    role: 'user',
    region: 'us'
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    // Basic validation
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }

    if (formData.password.length < 6) {
      setError('Password must be at least 6 characters long');
      setLoading(false);
      return;
    }

    try {
      await signUp(formData.email, formData.password, {
        name: formData.name,
        role: formData.role,
        region: formData.region
      });
      setSuccess(true);
    } catch (error: any) {
      setError(error.message || 'Registration failed');
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <div className="auth-header">
            <h1>Registration Successful</h1>
            <p>Please check your email to confirm your account.</p>
          </div>
          <div className="auth-actions">
            <Link to="/login" className="btn btn-primary">
              Go to Login
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="auth-container">
      <div className="auth-card">
        <div className="auth-header">
          <h1>Create Account</h1>
          <p>Sign up for your QiAlly Portal account</p>
        </div>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="auth-form">
          <div className="form-group">
            <label htmlFor="name">Full Name</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              required
              className="form-input"
              placeholder="Enter your full name"
            />
          </div>

          <div className="form-group">
            <label htmlFor="email">Email Address</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              className="form-input"
              placeholder="Enter your email"
            />
          </div>

          <div className="form-group">
            <label htmlFor="role">Role</label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleInputChange}
              className="form-select"
            >
              <option value="user">User</option>
              <option value="viewer">Viewer</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="region">Region</label>
            <select
              id="region"
              name="region"
              value={formData.region}
              onChange={handleInputChange}
              className="form-select"
            >
              <option value="us">United States</option>
              <option value="china">China</option>
              <option value="global">Global</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="password">Password</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              required
              className="form-input"
              placeholder="Enter your password"
            />
          </div>

          <div className="form-group">
            <label htmlFor="confirmPassword">Confirm Password</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleInputChange}
              required
              className="form-input"
              placeholder="Confirm your password"
            />
          </div>

          <button
            type="submit"
            disabled={loading}
            className="btn btn-primary btn-full"
          >
            {loading ? 'Creating Account...' : 'Create Account'}
          </button>
        </form>

        <div className="auth-footer">
          <p>
            Already have an account?{' '}
            <Link to="/login" className="auth-link">
              Sign in here
            </Link>
          </p>
          <p>
            <Link to="/magic-link" className="auth-link">
              Sign in with Magic Link
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;


================================================================================
END: D:\clientportal\apps\web\src\components\Auth\Register.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Branding\QiSuiteLogo.tsx
================================================================================

import React from 'react';

interface QiSuiteLogoProps {
  size?: 'small' | 'medium' | 'large';
  variant?: 'full' | 'icon' | 'text';
  className?: string;
}

const QiSuiteLogo: React.FC<QiSuiteLogoProps> = ({ 
  size = 'medium', 
  variant = 'full',
  className = '' 
}) => {

  const textSizeClasses = {
    small: 'text-lg',
    medium: 'text-2xl',
    large: 'text-4xl'
  };

  const iconSize = {
    small: 24,
    medium: 32,
    large: 48
  };

  const icon = (
    <svg 
      width={iconSize[size]} 
      height={iconSize[size]} 
      viewBox="0 0 32 32" 
      fill="none" 
      xmlns="http://www.w3.org/2000/svg"
      className="text-blue-600"
    >
      {/* Qi symbol - simplified version */}
      <circle cx="16" cy="16" r="14" fill="currentColor" opacity="0.1" />
      <circle cx="16" cy="16" r="10" fill="none" stroke="currentColor" strokeWidth="2" />
      <circle cx="16" cy="16" r="6" fill="none" stroke="currentColor" strokeWidth="1.5" />
      <circle cx="16" cy="16" r="2" fill="currentColor" />
      
      {/* Accent elements */}
      <path d="M8 8 L12 12 M20 8 L24 12 M8 24 L12 20 M20 24 L24 20" 
            stroke="currentColor" 
            strokeWidth="1" 
            opacity="0.6" />
    </svg>
  );

  const text = (
    <span className={`font-bold text-gray-900 ${textSizeClasses[size]}`}>
      QiSuite
    </span>
  );

  if (variant === 'icon') {
    return <div className={`${className}`}>{icon}</div>;
  }

  if (variant === 'text') {
    return <div className={`${className}`}>{text}</div>;
  }

  return (
    <div className={`flex items-center space-x-3 ${className}`}>
      {icon}
      {text}
    </div>
  );
};

export default QiSuiteLogo;


================================================================================
END: D:\clientportal\apps\web\src\components\Branding\QiSuiteLogo.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Dashboard\Dashboard.css
================================================================================

.dashboard {
  max-width: 1200px;
  margin: 0 auto;
}

.dashboard-header {
  margin-bottom: 32px;
}

.dashboard-header h1 {
  margin: 0 0 8px 0;
  color: #1f2937;
  font-size: 32px;
  font-weight: 700;
}

.dashboard-header p {
  margin: 0;
  color: #6b7280;
  font-size: 16px;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 24px;
  margin-bottom: 40px;
}

.stat-card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  padding: 24px;
  display: flex;
  align-items: center;
  gap: 16px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.2s;
}

.stat-card:hover {
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.stat-icon {
  font-size: 32px;
  width: 60px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f3f4f6;
  border-radius: 12px;
}

.stat-content h3 {
  margin: 0 0 4px 0;
  color: #1f2937;
  font-size: 28px;
  font-weight: 700;
}

.stat-content p {
  margin: 0;
  color: #6b7280;
  font-size: 14px;
}

.dashboard-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 32px;
}

.dashboard-section {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.dashboard-section h2 {
  margin: 0 0 20px 0;
  color: #1f2937;
  font-size: 20px;
  font-weight: 600;
}

.submissions-list,
.forms-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.submission-item,
.form-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 16px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  background: #f9fafb;
}

.submission-info,
.form-info {
  flex: 1;
}

.submission-info h4,
.form-info h4 {
  margin: 0 0 4px 0;
  color: #1f2937;
  font-size: 14px;
  font-weight: 600;
}

.submission-info p,
.form-info p {
  margin: 0 0 4px 0;
  color: #6b7280;
  font-size: 12px;
}

.submission-date,
.form-meta {
  color: #9ca3af !important;
  font-size: 11px !important;
}

.submission-meta {
  display: flex;
  flex-direction: column;
  gap: 4px;
  align-items: flex-end;
}

.status-badge,
.priority-badge {
  color: white;
  font-size: 10px;
  font-weight: 600;
  padding: 2px 8px;
  border-radius: 12px;
  text-transform: uppercase;
}

/* Status badge colors */
.status-badge[data-status="pending"] {
  background-color: #f59e0b;
}

.status-badge[data-status="in-progress"] {
  background-color: #3b82f6;
}

.status-badge[data-status="completed"] {
  background-color: #10b981;
}

.status-badge[data-status="rejected"] {
  background-color: #ef4444;
}

.status-badge[data-status="on-hold"] {
  background-color: #6b7280;
}

/* Priority badge colors */
.priority-badge[data-priority="low"] {
  background-color: #10b981;
}

.priority-badge[data-priority="medium"] {
  background-color: #f59e0b;
}

.priority-badge[data-priority="high"] {
  background-color: #ef4444;
}

.priority-badge[data-priority="urgent"] {
  background-color: #dc2626;
}

.form-status {
  display: flex;
  align-items: center;
}

.status-indicator {
  font-size: 12px;
  font-weight: 500;
  padding: 4px 8px;
  border-radius: 6px;
}

.status-indicator.active {
  background: #d1fae5;
  color: #065f46;
}

.status-indicator.inactive {
  background: #fee2e2;
  color: #991b1b;
}

.no-data {
  text-align: center;
  color: #9ca3af;
  font-style: italic;
  padding: 20px;
}

.loading {
  text-align: center;
  color: #6b7280;
  padding: 40px;
  font-size: 16px;
}

@media (max-width: 768px) {
  .dashboard-content {
    grid-template-columns: 1fr;
    gap: 24px;
  }

  .stats-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
  }

  .stat-card {
    padding: 16px;
  }

  .stat-icon {
    width: 48px;
    height: 48px;
    font-size: 24px;
  }

  .stat-content h3 {
    font-size: 24px;
  }

  .dashboard-header h1 {
    font-size: 24px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Dashboard\Dashboard.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Dashboard\Dashboard.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { useSocket } from '../../contexts/SocketContext';
import { submissionsAPI, formsAPI, authAPI } from '../../services/api';
import { Submission, Form, User } from '../../types';
import { Loading } from '../Loading';
import './Dashboard.css';

const Dashboard: React.FC = () => {
  const { user: supabaseUser, isAuthenticated } = useSupabaseAuth();
  const [userProfile, setUserProfile] = useState<User | null>(null);
  const { socket, joinRoom } = useSocket();
  const [stats, setStats] = useState({
    totalSubmissions: 0,
    recentSubmissions: 0,
    statusBreakdown: [] as any[],
    priorityBreakdown: [] as any[],
  });
  const [recentSubmissions, setRecentSubmissions] = useState<Submission[]>([]);
  const [recentForms, setRecentForms] = useState<Form[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch user profile when authenticated
  useEffect(() => {
    let isMounted = true;
    
    const fetchUserProfile = async () => {
      if (isAuthenticated && supabaseUser) {
        try {
          const response = await authAPI.getMe();
          if (isMounted && response.data.success && response.data.data) {
            setUserProfile(response.data.data);
          }
        } catch (error) {
          console.error('Failed to fetch user profile:', error);
        }
      } else {
        if (isMounted) {
          setUserProfile(null);
        }
      }
    };

    fetchUserProfile();
    
    return () => {
      isMounted = false;
    };
  }, [isAuthenticated, supabaseUser]);

  useEffect(() => {
    let isMounted = true;
    
    const loadData = async () => {
      if (isMounted) {
        await loadDashboardData();
      }
    };
    
    loadData();
    
    return () => {
      isMounted = false;
    };
  }, []);

  useEffect(() => {
    if (socket) {
      // Join dashboard room for real-time updates
      joinRoom('dashboard');

      // Listen for new submissions
      const handleNewSubmission = (data: any) => {
        setRecentSubmissions(prev => [data.submission, ...prev.slice(0, 9)]);
        setStats(prev => ({
          ...prev,
          totalSubmissions: prev.totalSubmissions + 1,
          recentSubmissions: prev.recentSubmissions + 1,
        }));
      };

      // Listen for submission updates
      const handleSubmissionUpdated = (data: any) => {
        setRecentSubmissions(prev => 
          prev.map(sub => 
            sub._id === data.submission._id ? data.submission : sub
          )
        );
      };

      socket.on('new-submission', handleNewSubmission);
      socket.on('submission-updated', handleSubmissionUpdated);

      return () => {
        socket.off('new-submission', handleNewSubmission);
        socket.off('submission-updated', handleSubmissionUpdated);
      };
    }
  }, [socket, joinRoom]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const [statsResponse, submissionsResponse, formsResponse] = await Promise.all([
        submissionsAPI.getStats('7d'),
        submissionsAPI.getSubmissions({ limit: 10 }),
        formsAPI.getForms({ limit: 5 }),
      ]);

      setStats(statsResponse.data.data);
      setRecentSubmissions(submissionsResponse.data.data);
      setRecentForms(formsResponse.data.data);
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };


  if (loading) {
    return (
      <div className="dashboard">
        <Loading size="large" message="Loading dashboard..." />
      </div>
    );
  }

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>Welcome back, {userProfile?.name || 'User'}!</h1>
        <p>Here's what's happening with your portal today.</p>
      </div>

      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">📊</div>
          <div className="stat-content">
            <h3>{stats.totalSubmissions}</h3>
            <p>Total Submissions</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">🆕</div>
          <div className="stat-content">
            <h3>{stats.recentSubmissions}</h3>
            <p>Recent Submissions</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">📝</div>
          <div className="stat-content">
            <h3>{recentForms.length}</h3>
            <p>Active Forms</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">👥</div>
          <div className="stat-content">
            <h3>{userProfile?.role || 'User'}</h3>
            <p>Your Role</p>
          </div>
        </div>
      </div>

      <div className="dashboard-content">
        <div className="dashboard-section">
          <h2>Recent Submissions</h2>
          <div className="submissions-list">
            {recentSubmissions.length > 0 ? (
              recentSubmissions.map((submission) => (
                <div key={submission._id} className="submission-item">
                  <div className="submission-info">
                    <h4>{submission.submissionNumber}</h4>
                    <p>
                      Form: {typeof submission.formId === 'object' ? submission.formId.title : submission.formId}
                      {submission.submittedBy && (
                        <span> • By: {submission.submittedBy?.name || 'Unknown User'}</span>
                      )}
                    </p>
                    <p className="submission-date">
                      {new Date(submission.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                  <div className="submission-meta">
                    <span
                      className="status-badge"
                      data-status={submission.status}
                    >
                      {submission.status}
                    </span>
                    <span
                      className="priority-badge"
                      data-priority={submission.priority}
                    >
                      {submission.priority}
                    </span>
                  </div>
                </div>
              ))
            ) : (
              <p className="no-data">No recent submissions</p>
            )}
          </div>
        </div>

        <div className="dashboard-section">
          <h2>Recent Forms</h2>
          <div className="forms-list">
            {recentForms.length > 0 ? (
              recentForms.map((form) => (
                <div key={form._id} className="form-item">
                  <div className="form-info">
                    <h4>{form.title}</h4>
                    <p>{form.description || 'No description'}</p>
                    <p className="form-meta">
                      {form.submissionCount} submissions • Created by {form.createdBy || 'Unknown User'}
                    </p>
                  </div>
                  <div className="form-status">
                    <span className={`status-indicator ${form.isActive ? 'active' : 'inactive'}`}>
                      {form.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                </div>
              ))
            ) : (
              <p className="no-data">No forms available</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


================================================================================
END: D:\clientportal\apps\web\src\components\Dashboard\Dashboard.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\ErrorBoundary\ErrorBoundary.css
================================================================================

.error-boundary {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 400px;
  padding: 2rem;
  background-color: #f8f9fa;
  border-radius: 8px;
  margin: 1rem;
}

.error-boundary-content {
  text-align: center;
  max-width: 500px;
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.error-boundary h2 {
  color: #dc3545;
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.error-boundary p {
  color: #6c757d;
  margin-bottom: 2rem;
  line-height: 1.5;
}

.error-details {
  margin: 1rem 0;
  text-align: left;
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  padding: 1rem;
}

.error-details summary {
  cursor: pointer;
  font-weight: bold;
  color: #495057;
  margin-bottom: 0.5rem;
}

.error-stack {
  background: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  padding: 1rem;
  font-family: 'Courier New', monospace;
  font-size: 0.875rem;
  color: #dc3545;
  white-space: pre-wrap;
  overflow-x: auto;
  margin: 0.5rem 0;
}

.error-actions {
  display: flex;
  gap: 1rem;
  justify-content: center;
  flex-wrap: wrap;
}

.error-actions .btn {
  min-width: 120px;
}

@media (max-width: 768px) {
  .error-boundary {
    padding: 1rem;
    min-height: 300px;
  }
  
  .error-boundary-content {
    padding: 1.5rem;
  }
  
  .error-actions {
    flex-direction: column;
    align-items: center;
  }
  
  .error-actions .btn {
    width: 100%;
    max-width: 200px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\ErrorBoundary\ErrorBoundary.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\ErrorBoundary\ErrorBoundary.tsx
================================================================================

import React, { Component, ErrorInfo, ReactNode } from 'react';
import './ErrorBoundary.css';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error?: Error;
  errorInfo?: ErrorInfo;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    // Update state so the next render will show the fallback UI
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // Log the error to console and any error reporting service
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    
    this.setState({
      error,
      errorInfo,
    });

    // Call the onError callback if provided
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  handleRetry = () => {
    this.setState({ hasError: false, error: undefined, errorInfo: undefined });
  };

  render() {
    if (this.state.hasError) {
      // Custom fallback UI
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // Default fallback UI
      return (
        <div className="error-boundary">
          <div className="error-boundary-content">
            <h2>Something went wrong</h2>
            <p>We're sorry, but something unexpected happened. Please try refreshing the page.</p>
            
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="error-details">
                <summary>Error Details (Development Only)</summary>
                <pre className="error-stack">
                  {this.state.error.toString()}
                  {this.state.errorInfo?.componentStack}
                </pre>
              </details>
            )}
            
            <div className="error-actions">
              <button onClick={this.handleRetry} className="btn btn-primary">
                Try Again
              </button>
              <button 
                onClick={() => window.location.reload()} 
                className="btn btn-outline"
              >
                Refresh Page
              </button>
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


================================================================================
END: D:\clientportal\apps\web\src\components\ErrorBoundary\ErrorBoundary.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\ErrorBoundary\index.ts
================================================================================

export { default as ErrorBoundary } from './ErrorBoundary';


================================================================================
END: D:\clientportal\apps\web\src\components\ErrorBoundary\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormBuilder.css
================================================================================

.form-builder {
  padding: 20px;
  max-width: 1000px;
  margin: 0 auto;
}

.form-builder-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.form-builder-header h1 {
  margin: 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.form-builder-form {
  display: flex;
  flex-direction: column;
  gap: 30px;
}

.form-builder-content {
  display: flex;
  flex-direction: column;
  gap: 30px;
}

.form-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.form-section h2 {
  margin: 0 0 20px 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.section-header h2 {
  margin: 0;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #2c3e50;
}

.form-input,
.form-textarea,
.form-select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
  box-sizing: border-box;
}

.form-input:focus,
.form-textarea:focus,
.form-select:focus {
  outline: none;
  border-color: #3498db;
}

.form-textarea {
  resize: vertical;
  min-height: 100px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.checkbox-label {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-weight: normal;
  margin-bottom: 0;
}

.checkbox-label input[type="checkbox"] {
  display: none;
}

.checkmark {
  width: 20px;
  height: 20px;
  border: 2px solid #e1e5e9;
  border-radius: 4px;
  margin-right: 12px;
  position: relative;
  transition: all 0.3s ease;
}

.checkbox-label input[type="checkbox"]:checked + .checkmark {
  background-color: #3498db;
  border-color: #3498db;
}

.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
  content: '✓';
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 12px;
  font-weight: bold;
}

.no-fields {
  text-align: center;
  padding: 40px 20px;
  color: #6c757d;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 2px dashed #dee2e6;
}

.fields-list {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.field-item {
  background-color: #f8f9fa;
  border-radius: 8px;
  padding: 20px;
  border: 1px solid #e1e5e9;
}

.field-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.field-header h4 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.125rem;
  font-weight: 600;
}

.field-actions {
  display: flex;
  gap: 8px;
}

.field-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.form-builder-footer {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  padding-top: 20px;
  border-top: 2px solid #e1e5e9;
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #2980b9;
}

.btn-secondary {
  background-color: #95a5a6;
  color: white;
}

.btn-secondary:hover:not(:disabled) {
  background-color: #7f8c8d;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover:not(:disabled) {
  background-color: #3498db;
  color: white;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-danger:hover:not(:disabled) {
  background-color: #c0392b;
}

.btn-sm {
  padding: 8px 12px;
  font-size: 14px;
  min-width: auto;
}

/* Responsive Design */
@media (max-width: 768px) {
  .form-builder {
    padding: 16px;
  }
  
  .form-builder-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .form-row {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .section-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .field-header {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .field-actions {
    justify-content: center;
  }
  
  .form-builder-footer {
    flex-direction: column;
  }
  
  .form-builder-footer .btn {
    width: 100%;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormBuilder.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormBuilder.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useForms } from '../../contexts/FormsContext';
import { FormField } from '../../types';
import './FormBuilder.css';

const FormBuilder: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { currentForm, loading, error, createForm, updateForm, fetchForm, clearError } = useForms();
  const isEditing = Boolean(id);

  const [formData, setFormData] = useState({
    title: '',
    description: '',
    isActive: true,
    isPublic: false,
    settings: {
      allowMultipleSubmissions: false,
      requireAuthentication: true,
      notificationEmail: '',
      autoResponse: {
        enabled: false,
        subject: '',
        message: '',
      },
    },
  });

  const [fields, setFields] = useState<FormField[]>([]);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (isEditing && id) {
      fetchForm(id);
    }
    return () => clearError();
  }, [isEditing, id, fetchForm, clearError]);

  useEffect(() => {
    if (isEditing && currentForm) {
      setFormData({
        title: currentForm.title,
        description: currentForm.description || '',
        isActive: currentForm.isActive,
        isPublic: currentForm.isPublic,
        settings: {
          allowMultipleSubmissions: currentForm.settings.allowMultipleSubmissions ?? false,
          requireAuthentication: currentForm.settings.requireAuthentication ?? true,
          notificationEmail: currentForm.settings.notificationEmail || '',
          autoResponse: {
            enabled: currentForm.settings.autoResponse?.enabled ?? false,
            subject: currentForm.settings.autoResponse?.subject || '',
            message: currentForm.settings.autoResponse?.message || '',
          },
        },
      });
      setFields(currentForm.fields);
    }
  }, [currentForm, isEditing]);

  const addField = () => {
    const newField: FormField = {
      name: `field_${Date.now()}`,
      label: 'New Field',
      type: 'text',
      required: false,
      placeholder: '',
    };
    setFields([...fields, newField]);
  };

  const updateField = (index: number, updatedField: Partial<FormField>) => {
    const newFields = [...fields];
    newFields[index] = { ...newFields[index], ...updatedField };
    setFields(newFields);
  };

  const removeField = (index: number) => {
    const newFields = fields.filter((_, i) => i !== index);
    setFields(newFields);
  };

  const moveField = (index: number, direction: 'up' | 'down') => {
    const newFields = [...fields];
    const targetIndex = direction === 'up' ? index - 1 : index + 1;
    
    if (targetIndex >= 0 && targetIndex < newFields.length) {
      [newFields[index], newFields[targetIndex]] = [newFields[targetIndex], newFields[index]];
      setFields(newFields);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);

    try {
      const formPayload = {
        ...formData,
        fields,
      };

      if (isEditing && id) {
        await updateForm(id, formPayload);
      } else {
        await createForm(formPayload);
      }

      navigate('/forms');
    } catch (error) {
      console.error('Failed to save form:', error);
    } finally {
      setSaving(false);
    }
  };

  const fieldTypes = [
    { value: 'text', label: 'Text Input' },
    { value: 'email', label: 'Email' },
    { value: 'number', label: 'Number' },
    { value: 'textarea', label: 'Text Area' },
    { value: 'select', label: 'Dropdown' },
    { value: 'checkbox', label: 'Checkbox' },
    { value: 'radio', label: 'Radio Button' },
    { value: 'date', label: 'Date' },
    { value: 'file', label: 'File Upload' },
  ];

  if (loading && isEditing) {
    return (
      <div className="form-builder">
        <div className="loading">Loading form...</div>
      </div>
    );
  }

  return (
    <div className="form-builder">
      <div className="form-builder-header">
        <h1>{isEditing ? 'Edit Form' : 'Create New Form'}</h1>
        <button
          type="button"
          onClick={() => navigate('/forms')}
          className="btn btn-outline"
        >
          Cancel
        </button>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} className="form-builder-form">
        <div className="form-builder-content">
          {/* Form Settings */}
          <div className="form-section">
            <h2>Form Settings</h2>
            <div className="form-group">
              <label htmlFor="title">Form Title *</label>
              <input
                type="text"
                id="title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                required
                className="form-input"
                placeholder="Enter form title"
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="form-textarea"
                placeholder="Enter form description"
                rows={3}
              />
            </div>

            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.isActive}
                  onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                />
                <span className="checkmark"></span>
                Active (form is available for submissions)
              </label>
            </div>

            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.isPublic}
                  onChange={(e) => setFormData({ ...formData, isPublic: e.target.checked })}
                />
                <span className="checkmark"></span>
                Public (accessible without login)
              </label>
            </div>
          </div>

          {/* Form Fields */}
          <div className="form-section">
            <div className="section-header">
              <h2>Form Fields</h2>
              <button
                type="button"
                onClick={addField}
                className="btn btn-primary"
              >
                Add Field
              </button>
            </div>

            {fields.length === 0 ? (
              <div className="no-fields">
                <p>No fields added yet. Click "Add Field" to get started.</p>
              </div>
            ) : (
              <div className="fields-list">
                {fields.map((field, index) => (
                  <div key={index} className="field-item">
                    <div className="field-header">
                      <h4>Field {index + 1}</h4>
                      <div className="field-actions">
                        <button
                          type="button"
                          onClick={() => moveField(index, 'up')}
                          disabled={index === 0}
                          className="btn btn-sm btn-outline"
                          title="Move field up"
                          aria-label={`Move field ${index + 1} up`}
                        >
                          ↑
                        </button>
                        <button
                          type="button"
                          onClick={() => moveField(index, 'down')}
                          disabled={index === fields.length - 1}
                          className="btn btn-sm btn-outline"
                          title="Move field down"
                          aria-label={`Move field ${index + 1} down`}
                        >
                          ↓
                        </button>
                        <button
                          type="button"
                          onClick={() => removeField(index)}
                          className="btn btn-sm btn-danger"
                          title="Remove field"
                          aria-label={`Remove field ${index + 1}`}
                        >
                          ×
                        </button>
                      </div>
                    </div>

                    <div className="field-form">
                      <div className="form-row">
                        <div className="form-group">
                          <label>Field Label *</label>
                          <input
                            type="text"
                            value={field.label}
                            onChange={(e) => updateField(index, { label: e.target.value })}
                            required
                            className="form-input"
                            placeholder="Enter field label"
                          />
                        </div>

                        <div className="form-group">
                          <label>Field Type *</label>
                          <select
                            value={field.type}
                            onChange={(e) => updateField(index, { type: e.target.value as any })}
                            className="form-select"
                            aria-label="Field type"
                          >
                            {fieldTypes.map((type) => (
                              <option key={type.value} value={type.value}>
                                {type.label}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>

                      <div className="form-row">
                        <div className="form-group">
                          <label>Field Name</label>
                          <input
                            type="text"
                            value={field.name}
                            onChange={(e) => updateField(index, { name: e.target.value })}
                            className="form-input"
                            placeholder="Auto-generated if empty"
                          />
                        </div>

                        <div className="form-group">
                          <label>Placeholder</label>
                          <input
                            type="text"
                            value={field.placeholder || ''}
                            onChange={(e) => updateField(index, { placeholder: e.target.value })}
                            className="form-input"
                            placeholder="Enter placeholder text"
                          />
                        </div>
                      </div>

                      {(field.type === 'select' || field.type === 'radio') && (
                        <div className="form-group">
                          <label>Options (one per line)</label>
                          <textarea
                            value={field.options?.join('\n') || ''}
                            onChange={(e) => updateField(index, { 
                              options: e.target.value.split('\n').filter(opt => opt.trim()) 
                            })}
                            className="form-textarea"
                            placeholder="Option 1&#10;Option 2&#10;Option 3"
                            rows={3}
                          />
                        </div>
                      )}

                      <div className="form-group">
                        <label className="checkbox-label">
                          <input
                            type="checkbox"
                            checked={field.required}
                            onChange={(e) => updateField(index, { required: e.target.checked })}
                          />
                          <span className="checkmark"></span>
                          Required field
                        </label>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Advanced Settings */}
          <div className="form-section">
            <h2>Advanced Settings</h2>
            
            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.settings.allowMultipleSubmissions}
                  onChange={(e) => setFormData({
                    ...formData,
                    settings: { ...formData.settings, allowMultipleSubmissions: e.target.checked }
                  })}
                />
                <span className="checkmark"></span>
                Allow multiple submissions from same user
              </label>
            </div>

            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.settings.requireAuthentication}
                  onChange={(e) => setFormData({
                    ...formData,
                    settings: { ...formData.settings, requireAuthentication: e.target.checked }
                  })}
                />
                <span className="checkmark"></span>
                Require user authentication
              </label>
            </div>

            <div className="form-group">
              <label htmlFor="notificationEmail">Notification Email</label>
              <input
                type="email"
                id="notificationEmail"
                value={formData.settings.notificationEmail || ''}
                onChange={(e) => setFormData({
                  ...formData,
                  settings: { ...formData.settings, notificationEmail: e.target.value }
                })}
                className="form-input"
                placeholder="Email to notify on new submissions"
              />
            </div>

            <div className="form-group">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={formData.settings.autoResponse.enabled}
                  onChange={(e) => setFormData({
                    ...formData,
                    settings: {
                      ...formData.settings,
                      autoResponse: { ...formData.settings.autoResponse, enabled: e.target.checked }
                    }
                  })}
                />
                <span className="checkmark"></span>
                Send auto-response to submitters
              </label>
            </div>

            {formData.settings.autoResponse.enabled && (
              <>
                <div className="form-group">
                  <label htmlFor="autoResponseSubject">Auto-response Subject</label>
                  <input
                    type="text"
                    id="autoResponseSubject"
                    value={formData.settings.autoResponse.subject || ''}
                    onChange={(e) => setFormData({
                      ...formData,
                      settings: {
                        ...formData.settings,
                        autoResponse: { ...formData.settings.autoResponse, subject: e.target.value }
                      }
                    })}
                    className="form-input"
                    placeholder="Thank you for your submission"
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="autoResponseMessage">Auto-response Message</label>
                  <textarea
                    id="autoResponseMessage"
                    value={formData.settings.autoResponse.message || ''}
                    onChange={(e) => setFormData({
                      ...formData,
                      settings: {
                        ...formData.settings,
                        autoResponse: { ...formData.settings.autoResponse, message: e.target.value }
                      }
                    })}
                    className="form-textarea"
                    placeholder="Thank you for your submission. We will review it shortly."
                    rows={4}
                  />
                </div>
              </>
            )}
          </div>
        </div>

        <div className="form-builder-footer">
          <button
            type="button"
            onClick={() => navigate('/forms')}
            className="btn btn-outline"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={saving || fields.length === 0}
            className="btn btn-primary"
          >
            {saving ? 'Saving...' : (isEditing ? 'Update Form' : 'Create Form')}
          </button>
        </div>
      </form>
    </div>
  );
};

export default FormBuilder;


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormBuilder.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormsList.css
================================================================================

.forms-list {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.forms-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.forms-header h1 {
  margin: 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.forms-filters {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
  align-items: center;
}

.search-box {
  flex: 1;
  max-width: 400px;
}

.search-input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: #3498db;
}

.status-filter {
  min-width: 150px;
}

.filter-select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  background-color: white;
  cursor: pointer;
}

.forms-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 24px;
  margin-bottom: 30px;
}

.form-card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.form-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.form-card-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 16px;
}

.form-card-header h3 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.25rem;
  font-weight: 600;
  flex: 1;
  margin-right: 12px;
}

.form-status {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.status-badge {
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-badge.active {
  background-color: #d4edda;
  color: #155724;
}

.status-badge.inactive {
  background-color: #f8d7da;
  color: #721c24;
}

.status-badge.public {
  background-color: #cce5ff;
  color: #004085;
}

.form-description {
  color: #6c757d;
  margin-bottom: 16px;
  line-height: 1.5;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.form-stats {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.stat {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.stat-label {
  font-size: 0.75rem;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 4px;
}

.stat-value {
  font-size: 1rem;
  font-weight: 600;
  color: #2c3e50;
}

.form-actions {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.form-actions .btn {
  flex: 1;
  min-width: 80px;
  text-align: center;
  padding: 8px 12px;
  font-size: 0.875rem;
}

.no-forms {
  grid-column: 1 / -1;
  text-align: center;
  padding: 60px 20px;
  color: #6c757d;
}

.no-forms p {
  font-size: 1.125rem;
  margin-bottom: 20px;
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 16px;
  margin-top: 30px;
}

.page-info {
  font-weight: 500;
  color: #2c3e50;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

/* Responsive Design */
@media (max-width: 768px) {
  .forms-list {
    padding: 16px;
  }
  
  .forms-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .forms-filters {
    flex-direction: column;
    gap: 16px;
  }
  
  .forms-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .form-stats {
    flex-direction: column;
    gap: 12px;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  .form-actions .btn {
    flex: none;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormsList.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormsList.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useForms } from '../../contexts/FormsContext';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { User } from '../../types';
import { authAPI } from '../../services/api';
import { Loading } from '../Loading';
import './FormsList.css';

const FormsList: React.FC = () => {
  const { forms, loading, error, pagination, fetchForms, deleteForm } = useForms();
  const { user: supabaseUser, isAuthenticated } = useSupabaseAuth();
  const [userProfile, setUserProfile] = useState<User | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'inactive'>('all');

  // Fetch user profile when authenticated
  useEffect(() => {
    let isMounted = true;
    
    const fetchUserProfile = async () => {
      if (isAuthenticated && supabaseUser) {
        try {
          const response = await authAPI.getMe();
          if (isMounted && response.data.success && response.data.data) {
            setUserProfile(response.data.data);
          }
        } catch (error) {
          console.error('Failed to fetch user profile:', error);
        }
      } else {
        if (isMounted) {
          setUserProfile(null);
        }
      }
    };

    fetchUserProfile();
    
    return () => {
      isMounted = false;
    };
  }, [isAuthenticated, supabaseUser]);

  useEffect(() => {
    fetchForms({
      page: 1,
      limit: 10,
      search: searchTerm || undefined,
      isActive: statusFilter === 'all' ? undefined : statusFilter === 'active',
    });
  }, [searchTerm, statusFilter]); // Removed fetchForms from dependencies

  const handleDelete = async (id: string, title: string) => {
    if (window.confirm(`Are you sure you want to delete the form "${title}"?`)) {
      try {
        await deleteForm(id);
      } catch (error) {
        console.error('Failed to delete form:', error);
      }
    }
  };

  const handlePageChange = (page: number) => {
    fetchForms({
      page,
      limit: pagination.limit,
      search: searchTerm || undefined,
      isActive: statusFilter === 'all' ? undefined : statusFilter === 'active',
    });
  };

  if (loading && forms.length === 0) {
    return (
      <div className="forms-list">
        <Loading size="large" message="Loading forms..." />
      </div>
    );
  }

  return (
    <div className="forms-list">
      <div className="forms-header">
        <h1>Forms Management</h1>
        {userProfile?.permissions.canCreateForms && (
          <Link to="/forms/new" className="btn btn-primary">
            Create New Form
          </Link>
        )}
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      <div className="forms-filters">
        <div className="search-box">
          <label htmlFor="search-forms" className="sr-only">Search forms</label>
          <input
            id="search-forms"
            type="text"
            placeholder="Search forms..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
            aria-label="Search forms"
          />
        </div>
        <div className="status-filter">
          <label htmlFor="status-filter-select" className="sr-only">Filter by status</label>
          <select
            id="status-filter-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value as any)}
            className="filter-select"
          >
            <option value="all">All Forms</option>
            <option value="active">Active Only</option>
            <option value="inactive">Inactive Only</option>
          </select>
        </div>
      </div>

      <div className="forms-grid">
        {forms.length === 0 ? (
          <div className="no-forms">
            <p>No forms found.</p>
            {userProfile?.permissions.canCreateForms && (
              <Link to="/forms/new" className="btn btn-primary">
                Create Your First Form
              </Link>
            )}
          </div>
        ) : (
          forms.map((form) => (
            <div key={form._id} className="form-card">
              <div className="form-card-header">
                <h3>{form.title}</h3>
                <div className="form-status">
                  <span className={`status-badge ${form.isActive ? 'active' : 'inactive'}`}>
                    {form.isActive ? 'Active' : 'Inactive'}
                  </span>
                  {form.isPublic && (
                    <span className="status-badge public">Public</span>
                  )}
                </div>
              </div>
              
              {form.description && (
                <p className="form-description">{form.description}</p>
              )}
              
              <div className="form-stats">
                <div className="stat">
                  <span className="stat-label">Fields:</span>
                  <span className="stat-value">{form.fields.length}</span>
                </div>
                <div className="stat">
                  <span className="stat-label">Submissions:</span>
                  <span className="stat-value">{form.submissionCount}</span>
                </div>
                <div className="stat">
                  <span className="stat-label">Created:</span>
                  <span className="stat-value">
                    {new Date(form.createdAt).toLocaleDateString()}
                  </span>
                </div>
              </div>

              <div className="form-actions">
                {form.isActive && (
                  <Link to={`/forms/${form._id}/submit`} className="btn btn-primary">
                    Submit Form
                  </Link>
                )}
                <Link to={`/forms/${form._id}`} className="btn btn-secondary">
                  View
                </Link>
                {userProfile?.permissions.canCreateForms && (
                  <Link to={`/forms/${form._id}/edit`} className="btn btn-outline">
                    Edit
                  </Link>
                )}
                {userProfile?.role === 'admin' && (
                  <Link to={`/forms/${form._id}/submissions`} className="btn btn-outline">
                    Submissions
                  </Link>
                )}
                {userProfile?.permissions.canCreateForms && (
                  <button
                    onClick={() => handleDelete(form._id, form.title)}
                    className="btn btn-danger"
                    aria-label={`Delete form "${form.title}"`}
                    title={`Delete form "${form.title}"`}
                  >
                    Delete
                  </button>
                )}
              </div>
            </div>
          ))
        )}
      </div>

      {pagination.pages > 1 && (
        <div className="pagination">
          <button
            onClick={() => handlePageChange(pagination.page - 1)}
            disabled={pagination.page === 1}
            className="btn btn-outline"
          >
            Previous
          </button>
          
          <span className="page-info">
            Page {pagination.page} of {pagination.pages}
          </span>
          
          <button
            onClick={() => handlePageChange(pagination.page + 1)}
            disabled={pagination.page === pagination.pages}
            className="btn btn-outline"
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default FormsList;


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormsList.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormSubmission.css
================================================================================

.form-submission {
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
}

.form-submission-header {
  text-align: center;
  margin-bottom: 40px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.form-submission-header h1 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 2.5rem;
  font-weight: 600;
}

.form-description {
  margin: 0;
  color: #6c757d;
  font-size: 1.125rem;
  line-height: 1.6;
  max-width: 600px;
  margin: 0 auto;
}

.submission-form {
  background: white;
  border-radius: 12px;
  padding: 32px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.form-fields {
  display: flex;
  flex-direction: column;
  gap: 24px;
  margin-bottom: 32px;
}

.form-field {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.field-label {
  font-weight: 500;
  color: #2c3e50;
  font-size: 1rem;
}

.required {
  color: #e74c3c;
  margin-left: 4px;
}

.form-input,
.form-textarea,
.form-select,
.form-file {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
  box-sizing: border-box;
}

.form-input:focus,
.form-textarea:focus,
.form-select:focus {
  outline: none;
  border-color: #3498db;
}

.form-textarea {
  resize: vertical;
  min-height: 120px;
}

.form-file {
  padding: 8px 16px;
  background-color: #f8f9fa;
}

.radio-group {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.radio-option {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  padding: 8px 0;
}

.radio-option input[type="radio"] {
  width: 18px;
  height: 18px;
  margin: 0;
  cursor: pointer;
}

.radio-label {
  font-size: 16px;
  color: #2c3e50;
  cursor: pointer;
}

.checkbox-option {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  padding: 8px 0;
}

.checkbox-option input[type="checkbox"] {
  width: 18px;
  height: 18px;
  margin: 0;
  cursor: pointer;
}

.checkbox-label {
  font-size: 16px;
  color: #2c3e50;
  cursor: pointer;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  padding-top: 24px;
  border-top: 1px solid #e1e5e9;
}

.success-message {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.success-icon {
  width: 80px;
  height: 80px;
  background-color: #d4edda;
  color: #155724;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2.5rem;
  font-weight: bold;
  margin: 0 auto 24px;
}

.success-message h2 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.success-message p {
  margin: 0 0 24px 0;
  color: #6c757d;
  font-size: 1.125rem;
  line-height: 1.6;
}

.redirect-message {
  color: #6c757d;
  font-style: italic;
  margin-top: 16px;
}

.form-inactive {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.form-inactive h2 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.form-inactive p {
  margin: 0 0 24px 0;
  color: #6c757d;
  font-size: 1.125rem;
}

.no-form {
  text-align: center;
  padding: 60px 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.no-form h2 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.no-form p {
  margin: 0 0 24px 0;
  color: #6c757d;
  font-size: 1.125rem;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #2980b9;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover {
  background-color: #3498db;
  color: white;
}

/* Responsive Design */
@media (max-width: 768px) {
  .form-submission {
    padding: 16px;
  }
  
  .form-submission-header h1 {
    font-size: 2rem;
  }
  
  .submission-form {
    padding: 24px;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  .form-actions .btn {
    width: 100%;
  }
  
  .radio-group {
    gap: 8px;
  }
  
  .radio-option,
  .checkbox-option {
    padding: 4px 0;
  }
}

@media (max-width: 480px) {
  .form-submission-header h1 {
    font-size: 1.75rem;
  }
  
  .submission-form {
    padding: 20px;
  }
  
  .form-fields {
    gap: 20px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormSubmission.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormSubmission.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useForms } from '../../contexts/FormsContext';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { submissionsAPI } from '../../services/api';
import './FormSubmission.css';

const FormSubmission: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { currentForm, loading, error, fetchFormForSubmission, clearError } = useForms();
  const { isAuthenticated } = useSupabaseAuth();
  
  const [formData, setFormData] = useState<Record<string, any>>({});
  const [submitting, setSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  useEffect(() => {
    if (id) {
      fetchFormForSubmission(id);
    }
    return () => clearError();
  }, [id, fetchFormForSubmission, clearError]);

  useEffect(() => {
    // Check if user needs to be authenticated
    if (currentForm?.settings.requireAuthentication && !isAuthenticated) {
      navigate('/login', { state: { from: `/forms/${id}/submit` } });
    }
  }, [currentForm, isAuthenticated, navigate, id]);

  const handleInputChange = (fieldName: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  const validateForm = (): boolean => {
    if (!currentForm) return false;

    for (const field of currentForm.fields) {
      if (field.required && (!formData[field.name] || formData[field.name] === '')) {
        setSubmitError(`Field "${field.label}" is required`);
        return false;
      }
    }
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentForm) return;
    
    if (!validateForm()) return;

    setSubmitting(true);
    setSubmitError(null);

    try {
      await submissionsAPI.createSubmission({
        formId: currentForm._id,
        data: formData,
        tags: [],
      });

      setSubmitSuccess(true);
      
      // Clear form data
      setFormData({});
      
      // Redirect after success (if not allowing multiple submissions)
      if (!currentForm.settings.allowMultipleSubmissions) {
        setTimeout(() => {
          navigate('/');
        }, 3000);
      }
    } catch (error: any) {
      setSubmitError(error.response?.data?.message || 'Failed to submit form');
    } finally {
      setSubmitting(false);
    }
  };

  const renderField = (field: any) => {
    const fieldValue = formData[field.name] || '';

    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
        return (
          <input
            type={field.type}
            id={field.name}
            name={field.name}
            value={fieldValue}
            onChange={(e) => handleInputChange(field.name, e.target.value)}
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            required={field.required}
            className="form-input"
          />
        );
      
      case 'textarea':
        return (
          <textarea
            id={field.name}
            name={field.name}
            value={fieldValue}
            onChange={(e) => handleInputChange(field.name, e.target.value)}
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            required={field.required}
            className="form-textarea"
            rows={4}
          />
        );
      
      case 'select':
        return (
          <select
            id={field.name}
            name={field.name}
            value={fieldValue}
            onChange={(e) => handleInputChange(field.name, e.target.value)}
            required={field.required}
            className="form-select"
          >
            <option value="">{field.placeholder || `Select ${field.label.toLowerCase()}`}</option>
            {field.options?.map((option: string, index: number) => (
              <option key={index} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      
      case 'radio':
        return (
          <div className="radio-group">
            {field.options?.map((option: string, index: number) => (
              <label key={index} className="radio-option">
                <input
                  type="radio"
                  name={field.name}
                  value={option}
                  checked={fieldValue === option}
                  onChange={(e) => handleInputChange(field.name, e.target.value)}
                  required={field.required}
                />
                <span className="radio-label">{option}</span>
              </label>
            ))}
          </div>
        );
      
      case 'checkbox':
        return (
          <label className="checkbox-option">
            <input
              type="checkbox"
              name={field.name}
              checked={fieldValue === true}
              onChange={(e) => handleInputChange(field.name, e.target.checked)}
              required={field.required}
            />
            <span className="checkbox-label">{field.label}</span>
          </label>
        );
      
      case 'date':
        return (
          <input
            type="date"
            id={field.name}
            name={field.name}
            value={fieldValue}
            onChange={(e) => handleInputChange(field.name, e.target.value)}
            required={field.required}
            className="form-input"
          />
        );
      
      case 'file':
        return (
          <input
            type="file"
            id={field.name}
            name={field.name}
            onChange={(e) => {
              const file = e.target.files?.[0];
              handleInputChange(field.name, file);
            }}
            required={field.required}
            className="form-file"
          />
        );
      
      default:
        return (
          <input
            type="text"
            name={field.name}
            value={fieldValue}
            onChange={(e) => handleInputChange(field.name, e.target.value)}
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            required={field.required}
            className="form-input"
          />
        );
    }
  };

  if (loading) {
    return (
      <div className="form-submission">
        <div className="loading">Loading form...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="form-submission">
        <div className="error-message">
          {error}
        </div>
        <button onClick={() => navigate('/')} className="btn btn-primary">
          Go Home
        </button>
      </div>
    );
  }

  if (!currentForm) {
    return (
      <div className="form-submission">
        <div className="no-form">
          <h2>Form not found</h2>
          <p>The requested form could not be found.</p>
          <button onClick={() => navigate('/')} className="btn btn-primary">
            Go Home
          </button>
        </div>
      </div>
    );
  }

  if (!currentForm.isActive) {
    return (
      <div className="form-submission">
        <div className="form-inactive">
          <h2>Form is not active</h2>
          <p>This form is currently not accepting submissions.</p>
          <button onClick={() => navigate('/')} className="btn btn-primary">
            Go Home
          </button>
        </div>
      </div>
    );
  }

  if (submitSuccess) {
    return (
      <div className="form-submission">
        <div className="success-message">
          <div className="success-icon">✓</div>
          <h2>Form Submitted Successfully!</h2>
          <p>Thank you for your submission. We will review it shortly.</p>
          {currentForm.settings.allowMultipleSubmissions ? (
            <button
              onClick={() => {
                setSubmitSuccess(false);
                setFormData({});
              }}
              className="btn btn-primary"
            >
              Submit Another
            </button>
          ) : (
            <p className="redirect-message">You will be redirected to the home page in a few seconds...</p>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="form-submission">
      <div className="form-submission-header">
        <h1>{currentForm.title}</h1>
        {currentForm.description && (
          <p className="form-description">{currentForm.description}</p>
        )}
      </div>

      {submitError && (
        <div className="error-message">
          {submitError}
        </div>
      )}

      <form onSubmit={handleSubmit} className="submission-form">
        <div className="form-fields">
          {currentForm.fields.map((field, index) => (
            <div key={index} className="form-field">
              <label htmlFor={field.name} className="field-label">
                {field.label}
                {field.required && <span className="required">*</span>}
              </label>
              {renderField(field)}
            </div>
          ))}
        </div>

        <div className="form-actions">
          <button
            type="button"
            onClick={() => navigate('/')}
            className="btn btn-outline"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={submitting}
            className="btn btn-primary"
          >
            {submitting ? 'Submitting...' : 'Submit Form'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default FormSubmission;


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormSubmission.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormViewer.css
================================================================================

.form-viewer {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.form-viewer-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.header-content h1 {
  margin: 0 0 12px 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.form-meta {
  display: flex;
  gap: 12px;
  align-items: center;
}

.status-badge {
  padding: 6px 16px;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-badge.active {
  background-color: #d4edda;
  color: #155724;
}

.status-badge.inactive {
  background-color: #f8d7da;
  color: #721c24;
}

.status-badge.public {
  background-color: #cce5ff;
  color: #004085;
}

.header-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.form-description {
  background-color: #f8f9fa;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 30px;
  border-left: 4px solid #3498db;
}

.form-description p {
  margin: 0;
  color: #2c3e50;
  line-height: 1.6;
  font-size: 1.125rem;
}

.form-viewer-content {
  display: grid;
  grid-template-columns: 1fr 400px;
  gap: 30px;
}

.form-preview-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.form-preview-section h2 {
  margin: 0 0 20px 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.form-preview {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.form-field {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.field-label {
  font-weight: 500;
  color: #2c3e50;
  font-size: 1rem;
}

.required {
  color: #e74c3c;
  margin-left: 4px;
}

.field-preview {
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  background-color: #f8f9fa;
  color: #6c757d;
}

.radio-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.radio-option {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

.radio-option input[type="radio"] {
  margin: 0;
}

.checkbox-option {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

.checkbox-option input[type="checkbox"] {
  margin: 0;
}

.form-details-section {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.form-details-section h2 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.details-grid {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.detail-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid #f1f3f4;
}

.detail-item:last-child {
  border-bottom: none;
}

.detail-label {
  font-weight: 500;
  color: #6c757d;
}

.detail-value {
  font-weight: 600;
  color: #2c3e50;
  text-align: right;
  word-break: break-all;
}

.settings-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.settings-section h3 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 1.25rem;
  font-weight: 600;
}

.settings-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.setting-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 0;
}

.setting-label {
  font-weight: 500;
  color: #6c757d;
}

.setting-value {
  font-weight: 600;
  padding: 4px 12px;
  border-radius: 12px;
  font-size: 0.875rem;
}

.setting-value.enabled {
  background-color: #d4edda;
  color: #155724;
}

.setting-value.disabled {
  background-color: #f8d7da;
  color: #721c24;
}

.auto-response-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.auto-response-section h3 {
  margin: 0 0 16px 0;
  color: #2c3e50;
  font-size: 1.25rem;
  font-weight: 600;
}

.auto-response-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.auto-response-item {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.auto-response-label {
  font-weight: 500;
  color: #6c757d;
  font-size: 0.875rem;
}

.auto-response-value {
  font-weight: 600;
  color: #2c3e50;
}

.auto-response-message {
  background-color: #f8f9fa;
  padding: 16px;
  border-radius: 8px;
  border: 1px solid #e1e5e9;
  color: #2c3e50;
  line-height: 1.6;
  white-space: pre-wrap;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

.no-form {
  text-align: center;
  padding: 60px 20px;
  color: #6c757d;
}

.no-form h2 {
  margin-bottom: 16px;
  color: #2c3e50;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover {
  background-color: #2980b9;
}

.btn-secondary {
  background-color: #95a5a6;
  color: white;
}

.btn-secondary:hover {
  background-color: #7f8c8d;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover {
  background-color: #3498db;
  color: white;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .form-viewer-content {
    grid-template-columns: 1fr;
    gap: 24px;
  }
}

@media (max-width: 768px) {
  .form-viewer {
    padding: 16px;
  }
  
  .form-viewer-header {
    flex-direction: column;
    gap: 20px;
    align-items: stretch;
  }
  
  .header-actions {
    flex-direction: column;
    gap: 12px;
  }
  
  .header-actions .btn {
    width: 100%;
  }
  
  .form-meta {
    flex-wrap: wrap;
  }
  
  .detail-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
  
  .detail-value {
    text-align: left;
  }
  
  .setting-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormViewer.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\FormViewer.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useForms } from '../../contexts/FormsContext';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { User } from '../../types';
import { authAPI } from '../../services/api';
import { Loading } from '../Loading';
import './FormViewer.css';

const FormViewer: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { currentForm, loading, error, fetchForm, clearError } = useForms();
  const { user: supabaseUser, isAuthenticated } = useSupabaseAuth();
  const [userProfile, setUserProfile] = useState<User | null>(null);

  // Fetch user profile when authenticated
  useEffect(() => {
    let isMounted = true;
    
    const fetchUserProfile = async () => {
      if (isAuthenticated && supabaseUser) {
        try {
          const response = await authAPI.getMe();
          if (isMounted && response.data.success && response.data.data) {
            setUserProfile(response.data.data);
          }
        } catch (error) {
          console.error('Failed to fetch user profile:', error);
        }
      } else {
        if (isMounted) {
          setUserProfile(null);
        }
      }
    };

    fetchUserProfile();
    
    return () => {
      isMounted = false;
    };
  }, [isAuthenticated, supabaseUser]);

  useEffect(() => {
    let isMounted = true;
    
    const loadForm = async () => {
      if (isMounted && id) {
        await fetchForm(id);
      }
    };
    
    loadForm();
    
    return () => {
      isMounted = false;
      clearError();
    };
  }, [id]); // Removed fetchForm and clearError from dependencies

  if (loading) {
    return (
      <div className="form-viewer">
        <Loading size="large" message="Loading form..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="form-viewer">
        <div className="error-message">
          {error}
        </div>
        <Link to="/forms" className="btn btn-primary">
          Back to Forms
        </Link>
      </div>
    );
  }

  if (!currentForm) {
    return (
      <div className="form-viewer">
        <div className="no-form">
          <h2>Form not found</h2>
          <p>The requested form could not be found.</p>
          <Link to="/forms" className="btn btn-primary">
            Back to Forms
          </Link>
        </div>
      </div>
    );
  }

  const renderFieldPreview = (field: any) => {
    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
        return (
          <input
            type={field.type}
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            disabled
            className="field-preview"
          />
        );
      case 'textarea':
        return (
          <textarea
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            disabled
            className="field-preview"
            rows={3}
          />
        );
      case 'select':
        return (
          <select id={field.name} disabled className="field-preview">
            <option>{field.placeholder || `Select ${field.label.toLowerCase()}`}</option>
            {field.options?.map((option: string, index: number) => (
              <option key={index} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      case 'radio':
        return (
          <div className="radio-group">
            {field.options?.map((option: string, index: number) => (
              <label key={index} className="radio-option">
                <input type="radio" name={field.name} disabled />
                <span>{option}</span>
              </label>
            ))}
          </div>
        );
      case 'checkbox':
        return (
          <label className="checkbox-option">
            <input type="checkbox" disabled />
            <span>{field.label}</span>
          </label>
        );
      case 'date':
        return (
          <input
            type="date"
            id={field.name}
            disabled
            className="field-preview"
          />
        );
      case 'file':
        return (
          <input
            type="file"
            id={field.name}
            disabled
            className="field-preview"
          />
        );
      default:
        return (
          <input
            type="text"
            placeholder={field.placeholder || `Enter ${field.label.toLowerCase()}`}
            disabled
            className="field-preview"
          />
        );
    }
  };

  return (
    <div className="form-viewer">
      <div className="form-viewer-header">
        <div className="header-content">
          <h1>{currentForm.title}</h1>
          <div className="form-meta">
            <span className={`status-badge ${currentForm.isActive ? 'active' : 'inactive'}`}>
              {currentForm.isActive ? 'Active' : 'Inactive'}
            </span>
            {currentForm.isPublic && (
              <span className="status-badge public">Public</span>
            )}
          </div>
        </div>
        <div className="header-actions">
          {currentForm.isActive && (
            <Link to={`/forms/${currentForm._id}/submit`} className="btn btn-primary">
              Submit Form
            </Link>
          )}
          {userProfile?.permissions.canCreateForms && (
            <>
              <Link to={`/forms/${currentForm._id}/edit`} className="btn btn-outline">
                Edit Form
              </Link>
              <Link to={`/forms/${currentForm._id}/submissions`} className="btn btn-secondary">
                View Submissions
              </Link>
            </>
          )}
          <Link to="/forms" className="btn btn-outline">
            Back to Forms
          </Link>
        </div>
      </div>

      {currentForm.description && (
        <div className="form-description">
          <p>{currentForm.description}</p>
        </div>
      )}

      <div className="form-viewer-content">
        <div className="form-preview-section">
          <h2>Form Preview</h2>
          <div className="form-preview">
            {currentForm.fields.map((field, index) => (
              <div key={index} className="form-field">
                <label htmlFor={field.name} className="field-label">
                  {field.label}
                  {field.required && <span className="required">*</span>}
                </label>
                {renderFieldPreview(field)}
              </div>
            ))}
            {currentForm.isActive && (
              <div className="form-preview-actions">
                <Link to={`/forms/${currentForm._id}/submit`} className="btn btn-primary btn-large">
                  Fill Out This Form
                </Link>
                <p className="preview-note">
                  Click the button above to fill out and submit this form
                </p>
              </div>
            )}
          </div>
        </div>

        <div className="form-details-section">
          <h2>Form Details</h2>
          <div className="details-grid">
            <div className="detail-item">
              <span className="detail-label">Form ID:</span>
              <span className="detail-value">{currentForm._id}</span>
            </div>
            <div className="detail-item">
              <span className="detail-label">Created by:</span>
              <span className="detail-value">
                {currentForm.createdBy || 'Unknown User'}
              </span>
            </div>
            <div className="detail-item">
              <span className="detail-label">Created on:</span>
              <span className="detail-value">
                {new Date(currentForm.createdAt).toLocaleDateString()}
              </span>
            </div>
            <div className="detail-item">
              <span className="detail-label">Last updated:</span>
              <span className="detail-value">
                {new Date(currentForm.updatedAt).toLocaleDateString()}
              </span>
            </div>
            <div className="detail-item">
              <span className="detail-label">Total fields:</span>
              <span className="detail-value">{currentForm.fields.length}</span>
            </div>
            <div className="detail-item">
              <span className="detail-label">Submissions:</span>
              <span className="detail-value">{currentForm.submissionCount}</span>
            </div>
          </div>

          <div className="settings-section">
            <h3>Form Settings</h3>
            <div className="settings-list">
              <div className="setting-item">
                <span className="setting-label">Multiple submissions:</span>
                <span className={`setting-value ${currentForm.settings.allowMultipleSubmissions ? 'enabled' : 'disabled'}`}>
                  {currentForm.settings.allowMultipleSubmissions ? 'Allowed' : 'Not allowed'}
                </span>
              </div>
              <div className="setting-item">
                <span className="setting-label">Authentication required:</span>
                <span className={`setting-value ${currentForm.settings.requireAuthentication ? 'enabled' : 'disabled'}`}>
                  {currentForm.settings.requireAuthentication ? 'Required' : 'Not required'}
                </span>
              </div>
              {currentForm.settings.notificationEmail && (
                <div className="setting-item">
                  <span className="setting-label">Notification email:</span>
                  <span className="setting-value">{currentForm.settings.notificationEmail}</span>
                </div>
              )}
              <div className="setting-item">
                <span className="setting-label">Auto-response:</span>
                <span className={`setting-value ${currentForm.settings.autoResponse?.enabled ? 'enabled' : 'disabled'}`}>
                  {currentForm.settings.autoResponse?.enabled ? 'Enabled' : 'Disabled'}
                </span>
              </div>
            </div>
          </div>

          {currentForm.settings.autoResponse?.enabled && (
            <div className="auto-response-section">
              <h3>Auto-response Settings</h3>
              <div className="auto-response-content">
                {currentForm.settings.autoResponse?.subject && (
                  <div className="auto-response-item">
                    <span className="auto-response-label">Subject:</span>
                    <span className="auto-response-value">{currentForm.settings.autoResponse.subject}</span>
                  </div>
                )}
                {currentForm.settings.autoResponse?.message && (
                  <div className="auto-response-item">
                    <span className="auto-response-label">Message:</span>
                    <div className="auto-response-message">{currentForm.settings.autoResponse.message}</div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FormViewer;


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\FormViewer.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Forms\index.ts
================================================================================

export { default as FormsList } from './FormsList';
export { default as FormBuilder } from './FormBuilder';
export { default as FormViewer } from './FormViewer';
export { default as FormSubmission } from './FormSubmission';


================================================================================
END: D:\clientportal\apps\web\src\components\Forms\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Landing\LandingPage.css
================================================================================

/* Landing Page Styles */
.landing-page {
  min-height: 100vh;
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
}

/* Hero Section */
.hero-section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  padding: 2rem 0;
}

.hero-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.hero-content {
  text-align: left;
}

.hero-logo {
  margin-bottom: 2rem;
}

.hero-title {
  font-size: 3.5rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 1.5rem;
  line-height: 1.1;
}

.hero-subtitle {
  font-size: 1.25rem;
  color: #6b7280;
  margin-bottom: 2.5rem;
  line-height: 1.6;
}

.hero-actions {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background: #2563eb;
  color: white;
}

.btn-primary:hover {
  background: #1d4ed8;
}

.btn-secondary {
  background: white;
  color: #2563eb;
  border: 2px solid #2563eb;
}

.btn-secondary:hover {
  background: #2563eb;
  color: white;
}

.btn-large {
  padding: 1rem 2rem;
  font-size: 1.125rem;
}

/* Hero Graphic */
.hero-graphic {
  position: relative;
  height: 400px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.floating-card {
  position: absolute;
  background: white;
  padding: 1.5rem;
  border-radius: 1rem;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  animation: float 3s ease-in-out infinite;
}

.card-1 {
  top: 20%;
  left: 10%;
  animation-delay: 0s;
}

.card-2 {
  top: 50%;
  right: 20%;
  animation-delay: 1s;
}

.card-3 {
  bottom: 20%;
  left: 30%;
  animation-delay: 2s;
}

.card-icon {
  font-size: 2rem;
}

.card-text {
  font-weight: 600;
  color: #374151;
}

@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

/* Features Section */
.features-section {
  padding: 5rem 0;
  background: white;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
}

.section-title {
  text-align: center;
  font-size: 2.5rem;
  font-weight: 700;
  color: #1f2937;
  margin-bottom: 3rem;
}

.features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
}

.feature-card {
  text-align: center;
  padding: 2rem;
  border-radius: 1rem;
  background: #f8fafc;
  transition: transform 0.2s;
}

.feature-card:hover {
  transform: translateY(-5px);
}

.feature-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.feature-card h3 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 1rem;
}

.feature-card p {
  color: #6b7280;
  line-height: 1.6;
}

/* CTA Section */
.cta-section {
  padding: 5rem 0;
  background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
  color: white;
  text-align: center;
}

.cta-content h2 {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 1rem;
}

.cta-content p {
  font-size: 1.25rem;
  margin-bottom: 2rem;
  opacity: 0.9;
}

/* Footer */
.landing-footer {
  padding: 2rem 0;
  background: #1f2937;
  color: white;
  text-align: center;
}

.footer-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.footer-content p {
  opacity: 0.7;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .hero-container {
    grid-template-columns: 1fr;
    gap: 2rem;
    text-align: center;
  }
  
  .hero-title {
    font-size: 2.5rem;
  }
  
  .hero-actions {
    justify-content: center;
  }
  
  .floating-card {
    position: relative;
    margin: 1rem;
  }
  
  .hero-graphic {
    height: auto;
    flex-direction: column;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Landing\LandingPage.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Landing\LandingPage.tsx
================================================================================

import React from 'react';
import { Link } from 'react-router-dom';
import QiSuiteLogo from '../Branding/QiSuiteLogo';
import './LandingPage.css';

const LandingPage: React.FC = () => {
  return (
    <div className="landing-page">
      {/* Hero Section */}
      <section className="hero-section">
        <div className="hero-container">
          <div className="hero-content">
            <QiSuiteLogo size="large" variant="full" className="hero-logo" />
            <h1 className="hero-title">QiAlly Portal</h1>
            <p className="hero-subtitle">
              Streamline your workflow with our enterprise-grade client portal. 
              Manage forms, track submissions, and collaborate seamlessly.
            </p>
            <div className="hero-actions">
              <Link to="/login" className="btn btn-primary">
                Sign In
              </Link>
              <Link to="/magic-link" className="btn btn-secondary">
                Magic Link Login
              </Link>
            </div>
          </div>
          <div className="hero-image">
            <div className="hero-graphic">
              <div className="floating-card card-1">
                <div className="card-icon">📋</div>
                <div className="card-text">Forms</div>
              </div>
              <div className="floating-card card-2">
                <div className="card-icon">📊</div>
                <div className="card-text">Analytics</div>
              </div>
              <div className="floating-card card-3">
                <div className="card-icon">👥</div>
                <div className="card-text">Collaboration</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="features-section">
        <div className="container">
          <h2 className="section-title">Why Choose QiAlly Portal?</h2>
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">🔒</div>
              <h3>Enterprise Security</h3>
              <p>Bank-level security with end-to-end encryption and compliance standards.</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">⚡</div>
              <h3>Real-time Collaboration</h3>
              <p>Work together seamlessly with live updates and instant notifications.</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">📈</div>
              <h3>Advanced Analytics</h3>
              <p>Gain insights with comprehensive reporting and data visualization.</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">🎯</div>
              <h3>Custom Workflows</h3>
              <p>Tailor the platform to your specific business processes and requirements.</p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="cta-section">
        <div className="container">
          <div className="cta-content">
            <h2>Ready to Get Started?</h2>
            <p>Join thousands of organizations already using QiAlly Portal</p>
            <Link to="/login" className="btn btn-primary btn-large">
              Access Your Portal
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="landing-footer">
        <div className="container">
          <div className="footer-content">
            <QiSuiteLogo size="medium" variant="full" />
            <p>&copy; 2024 QiAlly. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LandingPage;


================================================================================
END: D:\clientportal\apps\web\src\components\Landing\LandingPage.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Layout\Header.css
================================================================================

.header {
  background: #fff;
  border-bottom: 1px solid #e1e5e9;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.header-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 64px;
}

.header-left {
  display: flex;
  align-items: center;
}

.logo {
  text-decoration: none;
  color: #2563eb;
}

.logo h1 {
  margin: 0;
  font-size: 24px;
  font-weight: 700;
}

.header-nav {
  display: flex;
  align-items: center;
  gap: 24px;
}

.nav-link {
  text-decoration: none;
  color: #374151;
  font-weight: 500;
  padding: 8px 12px;
  border-radius: 6px;
  transition: all 0.2s;
}

.nav-link:hover {
  background: #f3f4f6;
  color: #2563eb;
}

.header-right {
  display: flex;
  align-items: center;
}

.user-menu {
  position: relative;
}

.user-button {
  display: flex;
  align-items: center;
  gap: 8px;
  background: none;
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.2s;
}

.user-button:hover {
  background: #f3f4f6;
}

.user-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: #2563eb;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 14px;
}

.user-name {
  font-weight: 500;
  color: #374151;
}

.user-role {
  font-size: 12px;
  color: #6b7280;
  text-transform: uppercase;
}

.user-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  background: white;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  min-width: 200px;
  z-index: 1001;
  margin-top: 4px;
}

.dropdown-item {
  display: block;
  width: 100%;
  padding: 12px 16px;
  text-align: left;
  background: none;
  border: none;
  color: #374151;
  text-decoration: none;
  font-size: 14px;
  cursor: pointer;
  transition: background 0.2s;
}

.dropdown-item:hover {
  background: #f3f4f6;
}

.dropdown-item.logout {
  color: #dc2626;
}

.dropdown-item.logout:hover {
  background: #fef2f2;
}

.dropdown-divider {
  margin: 0;
  border: none;
  border-top: 1px solid #e1e5e9;
}

.auth-links {
  display: flex;
  align-items: center;
  gap: 16px;
}

.auth-link {
  text-decoration: none;
  color: #374151;
  font-weight: 500;
  padding: 8px 16px;
  border-radius: 6px;
  transition: all 0.2s;
}

.auth-link:hover {
  background: #f3f4f6;
  color: #2563eb;
}

.auth-link.register {
  background: #2563eb;
  color: white;
}

.auth-link.register:hover {
  background: #1d4ed8;
}

@media (max-width: 768px) {
  .header-container {
    padding: 0 16px;
  }

  .header-nav {
    display: none;
  }

  .user-name {
    display: none;
  }

  .user-role {
    display: none;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Layout\Header.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Layout\Header.tsx
================================================================================

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import QiSuiteLogo from '../Branding/QiSuiteLogo';
import './Header.css';

const Header: React.FC = () => {
  const { user, signOut } = useSupabaseAuth();
  const navigate = useNavigate();
  const [showUserMenu, setShowUserMenu] = useState(false);

  const handleLogout = async () => {
    await signOut();
    navigate('/login');
  };

  return (
    <header className="header">
      <div className="header-container">
        <div className="header-left">
          <Link to="/" className="logo">
            <QiSuiteLogo size="medium" variant="full" />
          </Link>
        </div>

        <nav className="header-nav">
          {user && (
            <>
              <Link to="/dashboard" className="nav-link">
                Dashboard
              </Link>
              <Link to="/forms" className="nav-link">
                Forms
              </Link>
              {user?.user_metadata?.role === 'admin' && (
                <>
                  <Link to="/submissions" className="nav-link">
                    Submissions
                  </Link>
                  <Link to="/users" className="nav-link">
                    Users
                  </Link>
                </>
              )}
            </>
          )}
        </nav>

        <div className="header-right">
          {user ? (
            <div className="user-menu">
              <button
                className="user-button"
                onClick={() => setShowUserMenu(!showUserMenu)}
              >
                <div className="user-avatar">
                  {user.user_metadata?.name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase()}
                </div>
                <span className="user-name">{user.user_metadata?.name || user.email}</span>
                <span className="user-role">({user.user_metadata?.role || 'user'})</span>
              </button>

              {showUserMenu && (
                <div className="user-dropdown">
                  <Link
                    to="/profile"
                    className="dropdown-item"
                    onClick={() => setShowUserMenu(false)}
                  >
                    Profile
                  </Link>
                  <Link
                    to="/settings"
                    className="dropdown-item"
                    onClick={() => setShowUserMenu(false)}
                  >
                    Settings
                  </Link>
                  <hr className="dropdown-divider" />
                  <button
                    className="dropdown-item logout"
                    onClick={handleLogout}
                  >
                    Logout
                  </button>
                </div>
              )}
            </div>
          ) : (
            <div className="auth-links">
              <Link to="/login" className="auth-link">
                Login
              </Link>
              <Link to="/register" className="auth-link register">
                Register
              </Link>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;


================================================================================
END: D:\clientportal\apps\web\src\components\Layout\Header.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Layout\Layout.css
================================================================================

.layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main-content {
  flex: 1;
  max-width: 1200px;
  margin: 0 auto;
  padding: 24px 20px;
  width: 100%;
  box-sizing: border-box;
}

@media (max-width: 768px) {
  .main-content {
    padding: 16px;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Layout\Layout.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Layout\Layout.tsx
================================================================================

import React, { ReactNode } from 'react';
import Header from './Header';
import './Layout.css';

interface LayoutProps {
  children: ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="layout">
      <Header />
      <main className="main-content">
        {children}
      </main>
    </div>
  );
};

export default Layout;


================================================================================
END: D:\clientportal\apps\web\src\components\Layout\Layout.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Loading\index.ts
================================================================================

export { default as Loading } from './Loading';


================================================================================
END: D:\clientportal\apps\web\src\components\Loading\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Loading\Loading.css
================================================================================

.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  text-align: center;
}

.loading-fullscreen {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(2px);
  z-index: 9999;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.loading-spinner {
  margin-bottom: 1rem;
}

.spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid #007bff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.loading-small .spinner {
  width: 20px;
  height: 20px;
  border-width: 2px;
}

.loading-medium .spinner {
  width: 40px;
  height: 40px;
  border-width: 3px;
}

.loading-large .spinner {
  width: 60px;
  height: 60px;
  border-width: 4px;
}

.loading-message {
  color: #6c757d;
  font-size: 0.875rem;
  font-weight: 500;
}

.loading-small .loading-message {
  font-size: 0.75rem;
}

.loading-medium .loading-message {
  font-size: 0.875rem;
}

.loading-large .loading-message {
  font-size: 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .loading-fullscreen {
    background-color: rgba(0, 0, 0, 0.8);
  }
  
  .spinner {
    border-color: #495057;
    border-top-color: #007bff;
  }
  
  .loading-message {
    color: #adb5bd;
  }
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
  .spinner {
    animation: none;
    border-top-color: #007bff;
  }
}

/* Loading skeleton for content */
.loading-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
  border-radius: 4px;
}

.loading-skeleton-text {
  height: 1rem;
  margin-bottom: 0.5rem;
}

.loading-skeleton-text:last-child {
  margin-bottom: 0;
}

.loading-skeleton-title {
  height: 1.5rem;
  margin-bottom: 1rem;
  width: 60%;
}

.loading-skeleton-button {
  height: 2.5rem;
  width: 120px;
  border-radius: 4px;
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .loading-container {
    padding: 1rem;
  }
  
  .loading-message {
    font-size: 0.75rem;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Loading\Loading.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Loading\Loading.tsx
================================================================================

import React from 'react';
import './Loading.css';

interface LoadingProps {
  size?: 'small' | 'medium' | 'large';
  message?: string;
  fullScreen?: boolean;
  className?: string;
}

const Loading: React.FC<LoadingProps> = ({ 
  size = 'medium', 
  message = 'Loading...', 
  fullScreen = false,
  className = ''
}) => {
  const containerClass = fullScreen ? 'loading-fullscreen' : 'loading-container';
  const sizeClass = `loading-${size}`;
  
  return (
    <div className={`${containerClass} ${sizeClass} ${className}`}>
      <div className="loading-spinner">
        <div className="spinner"></div>
      </div>
      {message && <div className="loading-message">{message}</div>}
    </div>
  );
};

export default Loading;


================================================================================
END: D:\clientportal\apps\web\src\components\Loading\Loading.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\index.ts
================================================================================

export { default as SubmissionsList } from './SubmissionsList';
export { default as SubmissionViewer } from './SubmissionViewer';
export { default as SubmissionEditor } from './SubmissionEditor';


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionEditor.css
================================================================================

.submission-editor {
  padding: 20px;
  max-width: 1000px;
  margin: 0 auto;
}

.submission-editor-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.submission-editor-header h1 {
  margin: 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.header-actions {
  display: flex;
  gap: 12px;
}

.submission-editor-form {
  display: flex;
  flex-direction: column;
  gap: 30px;
}

.submission-editor-content {
  display: flex;
  flex-direction: column;
  gap: 30px;
}

.form-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.form-section h2 {
  margin: 0 0 20px 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.form-group {
  margin-bottom: 24px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #2c3e50;
}

.form-input,
.form-select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
  box-sizing: border-box;
}

.form-input:focus,
.form-select:focus {
  outline: none;
  border-color: #3498db;
}

.status-preview,
.priority-preview {
  margin-top: 8px;
  font-size: 0.875rem;
  color: #6c757d;
}

.status-badge,
.priority-badge {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-left: 8px;
}

.status-pending {
  background-color: #fff3cd;
  color: #856404;
}

.status-in-progress {
  background-color: #cce5ff;
  color: #004085;
}

.status-completed {
  background-color: #d4edda;
  color: #155724;
}

.status-rejected {
  background-color: #f8d7da;
  color: #721c24;
}

.status-on-hold {
  background-color: #e2e3e5;
  color: #383d41;
}

.priority-urgent {
  background-color: #f8d7da;
  color: #721c24;
}

.priority-high {
  background-color: #f5c6cb;
  color: #721c24;
}

.priority-medium {
  background-color: #fff3cd;
  color: #856404;
}

.priority-low {
  background-color: #d1ecf1;
  color: #0c5460;
}

.tags-editor {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.tag-input-group {
  display: flex;
  gap: 12px;
  align-items: center;
}

.tag-input-group .form-input {
  flex: 1;
}

.readonly-data {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.data-item {
  display: flex;
  flex-direction: column;
  gap: 8px;
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e1e5e9;
}

.data-label {
  font-weight: 600;
  color: #2c3e50;
  text-transform: capitalize;
}

.data-value {
  color: #495057;
  word-break: break-word;
  white-space: pre-wrap;
  font-family: 'Courier New', monospace;
  background-color: white;
  padding: 12px;
  border-radius: 4px;
  border: 1px solid #e1e5e9;
}

.submission-editor-footer {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  padding-top: 20px;
  border-top: 2px solid #e1e5e9;
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

.no-submission {
  text-align: center;
  padding: 60px 20px;
  color: #6c757d;
}

.no-submission h2 {
  margin-bottom: 16px;
  color: #2c3e50;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #2980b9;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover:not(:disabled) {
  background-color: #3498db;
  color: white;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-danger:hover:not(:disabled) {
  background-color: #c0392b;
}

.btn-sm {
  padding: 8px 12px;
  font-size: 14px;
  min-width: auto;
}

/* Responsive Design */
@media (max-width: 768px) {
  .submission-editor {
    padding: 16px;
  }
  
  .submission-editor-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .tag-input-group {
    flex-direction: column;
    align-items: stretch;
  }
  
  .submission-editor-footer {
    flex-direction: column;
  }
  
  .submission-editor-footer .btn {
    width: 100%;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionEditor.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionEditor.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useSubmissions } from '../../contexts/SubmissionsContext';
import { Submission } from '../../types';
import './SubmissionEditor.css';

const SubmissionEditor: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { currentSubmission, loading, error, fetchSubmission, updateSubmission, clearError } = useSubmissions();
  // Note: useAuth and useForms are imported but not used in this component
  
  const [formData, setFormData] = useState<{
    status: string;
    priority: string;
    assignedTo: string | undefined;
    dueDate: string;
    tags: string[];
  }>({
    status: 'pending',
    priority: 'medium',
    assignedTo: undefined,
    dueDate: '',
    tags: [],
  });
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (id) {
      fetchSubmission(id);
    }
    return () => clearError();
  }, [id, fetchSubmission, clearError]);

  useEffect(() => {
    if (currentSubmission) {
      setFormData({
        status: currentSubmission.status,
        priority: currentSubmission.priority,
        assignedTo: currentSubmission.assignedTo?.id,
        dueDate: currentSubmission.dueDate ? new Date(currentSubmission.dueDate).toISOString().split('T')[0] : '',
        tags: currentSubmission.tags || [],
      });
    }
  }, [currentSubmission]);

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleTagChange = (index: number, value: string) => {
    const newTags = [...(formData.tags || [])];
    newTags[index] = value;
    setFormData(prev => ({
      ...prev,
      tags: newTags
    }));
  };

  const addTag = () => {
    setFormData(prev => ({
      ...prev,
      tags: [...(prev.tags || []), '']
    }));
  };

  const removeTag = (index: number) => {
    const newTags = [...(formData.tags || [])];
    newTags.splice(index, 1);
    setFormData(prev => ({
      ...prev,
      tags: newTags
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!id) return;

    setSaving(true);
    try {
      const updateData: Partial<Submission> = {
        status: formData.status as any,
        priority: formData.priority as any,
        assignedTo: formData.assignedTo as any,
        tags: formData.tags?.filter(tag => tag.trim() !== ''),
        dueDate: formData.dueDate ? new Date(formData.dueDate).toISOString() : undefined,
      };

      await updateSubmission(id, updateData);
      navigate(`/submissions/${id}`);
    } catch (error) {
      console.error('Failed to update submission:', error);
    } finally {
      setSaving(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'status-pending';
      case 'in-progress': return 'status-in-progress';
      case 'completed': return 'status-completed';
      case 'rejected': return 'status-rejected';
      case 'on-hold': return 'status-on-hold';
      default: return 'status-pending';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'priority-urgent';
      case 'high': return 'priority-high';
      case 'medium': return 'priority-medium';
      case 'low': return 'priority-low';
      default: return 'priority-medium';
    }
  };

  if (loading) {
    return (
      <div className="submission-editor">
        <div className="loading">Loading submission...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="submission-editor">
        <div className="error-message">
          {error}
        </div>
        <button onClick={() => navigate('/submissions')} className="btn btn-primary">
          Back to Submissions
        </button>
      </div>
    );
  }

  if (!currentSubmission) {
    return (
      <div className="submission-editor">
        <div className="no-submission">
          <h2>Submission not found</h2>
          <p>The requested submission could not be found.</p>
          <button onClick={() => navigate('/submissions')} className="btn btn-primary">
            Back to Submissions
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="submission-editor">
      <div className="submission-editor-header">
        <h1>Edit Submission {currentSubmission.submissionNumber}</h1>
        <div className="header-actions">
          <button
            type="button"
            onClick={() => navigate(`/submissions/${id}`)}
            className="btn btn-outline"
          >
            Cancel
          </button>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="submission-editor-form">
        <div className="submission-editor-content">
          <div className="form-section">
            <h2>Submission Information</h2>
            
            <div className="form-group">
              <label htmlFor="status">Status</label>
              <select
                id="status"
                value={formData.status}
                onChange={(e) => handleInputChange('status', e.target.value)}
                className="form-select"
              >
                <option value="pending">Pending</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="rejected">Rejected</option>
                <option value="on-hold">On Hold</option>
              </select>
              <div className="status-preview">
                Current: <span className={`status-badge ${getStatusColor(formData.status || 'pending')}`}>
                  {(formData.status || 'pending').replace('-', ' ')}
                </span>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="priority">Priority</label>
              <select
                id="priority"
                value={formData.priority}
                onChange={(e) => handleInputChange('priority', e.target.value)}
                className="form-select"
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="urgent">Urgent</option>
              </select>
              <div className="priority-preview">
                Current: <span className={`priority-badge ${getPriorityColor(formData.priority || 'medium')}`}>
                  {formData.priority || 'medium'}
                </span>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="assignedTo">Assigned To</label>
              <select
                id="assignedTo"
                value={formData.assignedTo || ''}
                onChange={(e) => handleInputChange('assignedTo', e.target.value || undefined)}
                className="form-select"
              >
                <option value="">Unassigned</option>
                {/* In a real app, you would fetch users from the API */}
                <option value="user1">John Doe</option>
                <option value="user2">Jane Smith</option>
                <option value="user3">Bob Johnson</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="dueDate">Due Date</label>
              <input
                type="date"
                id="dueDate"
                value={formData.dueDate}
                onChange={(e) => handleInputChange('dueDate', e.target.value)}
                className="form-input"
              />
            </div>
          </div>

          <div className="form-section">
            <h2>Tags</h2>
            <div className="tags-editor">
              {formData.tags?.map((tag, index) => (
                <div key={index} className="tag-input-group">
                  <input
                    type="text"
                    value={tag}
                    onChange={(e) => handleTagChange(index, e.target.value)}
                    placeholder="Enter tag"
                    className="form-input"
                  />
                  <button
                    type="button"
                    onClick={() => removeTag(index)}
                    className="btn btn-sm btn-danger"
                  >
                    Remove
                  </button>
                </div>
              ))}
              <button
                type="button"
                onClick={addTag}
                className="btn btn-outline"
              >
                Add Tag
              </button>
            </div>
          </div>

          <div className="form-section">
            <h2>Submission Data (Read Only)</h2>
            <div className="readonly-data">
              {Object.entries(currentSubmission.data).map(([key, value]) => (
                <div key={key} className="data-item">
                  <label className="data-label">{key}:</label>
                  <div className="data-value">
                    {typeof value === 'object' ? JSON.stringify(value, null, 2) : String(value)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="submission-editor-footer">
          <button
            type="button"
            onClick={() => navigate(`/submissions/${id}`)}
            className="btn btn-outline"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={saving}
            className="btn btn-primary"
          >
            {saving ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default SubmissionEditor;


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionEditor.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionsList.css
================================================================================

.submissions-list {
  padding: 20px;
  max-width: 1400px;
  margin: 0 auto;
}

.submissions-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.submissions-header h1 {
  margin: 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.header-actions {
  display: flex;
  gap: 12px;
}

/* Stats Grid */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
  transition: transform 0.2s ease;
}

.stat-card:hover {
  transform: translateY(-2px);
}

.stat-number {
  font-size: 2rem;
  font-weight: 700;
  color: #3498db;
  margin-bottom: 8px;
}

.stat-label {
  font-size: 0.875rem;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-weight: 500;
}

/* Filters */
.submissions-filters {
  background: white;
  border-radius: 12px;
  padding: 24px;
  margin-bottom: 30px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.filter-row {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
  gap: 16px;
  align-items: end;
}

.search-box {
  display: flex;
  flex-direction: column;
}

.search-input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: #3498db;
}

.filter-group {
  display: flex;
  flex-direction: column;
}

.filter-select {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  background-color: white;
  cursor: pointer;
}

/* Table */
.submissions-table-container {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
  margin-bottom: 30px;
}

.submissions-table {
  width: 100%;
  border-collapse: collapse;
}

.submissions-table th {
  background-color: #f8f9fa;
  padding: 16px 12px;
  text-align: left;
  font-weight: 600;
  color: #2c3e50;
  border-bottom: 2px solid #e1e5e9;
  font-size: 0.875rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.submissions-table td {
  padding: 16px 12px;
  border-bottom: 1px solid #f1f3f4;
  vertical-align: top;
}

.submissions-table tbody tr:hover {
  background-color: #f8f9fa;
}

.submission-link {
  color: #3498db;
  text-decoration: none;
  font-weight: 600;
  font-family: 'Courier New', monospace;
}

.submission-link:hover {
  text-decoration: underline;
}

.form-info {
  display: flex;
  flex-direction: column;
}

.form-title {
  font-weight: 500;
  color: #2c3e50;
  font-size: 0.875rem;
}

/* Status and Priority Badges */
.status-badge,
.priority-badge {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-pending {
  background-color: #fff3cd;
  color: #856404;
}

.status-in-progress {
  background-color: #cce5ff;
  color: #004085;
}

.status-completed {
  background-color: #d4edda;
  color: #155724;
}

.status-rejected {
  background-color: #f8d7da;
  color: #721c24;
}

.status-on-hold {
  background-color: #e2e3e5;
  color: #383d41;
}

.priority-urgent {
  background-color: #f8d7da;
  color: #721c24;
}

.priority-high {
  background-color: #f5c6cb;
  color: #721c24;
}

.priority-medium {
  background-color: #fff3cd;
  color: #856404;
}

.priority-low {
  background-color: #d1ecf1;
  color: #0c5460;
}

/* User Info */
.user-info {
  display: flex;
  flex-direction: column;
}

.user-name {
  font-weight: 500;
  color: #2c3e50;
  font-size: 0.875rem;
}

.user-email {
  font-size: 0.75rem;
  color: #6c757d;
}

.anonymous,
.unassigned {
  font-style: italic;
  color: #6c757d;
  font-size: 0.875rem;
}

/* Date Info */
.date-info {
  display: flex;
  flex-direction: column;
}

.date {
  font-weight: 500;
  color: #2c3e50;
  font-size: 0.875rem;
}

.time {
  font-size: 0.75rem;
  color: #6c757d;
}

/* Action Buttons */
.action-buttons {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.no-submissions {
  text-align: center;
  padding: 40px;
  color: #6c757d;
  font-style: italic;
}

/* Pagination */
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 16px;
  margin-top: 30px;
}

.page-info {
  font-weight: 500;
  color: #2c3e50;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #2980b9;
}

.btn-secondary {
  background-color: #95a5a6;
  color: white;
}

.btn-secondary:hover:not(:disabled) {
  background-color: #7f8c8d;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover:not(:disabled) {
  background-color: #3498db;
  color: white;
}

.btn-danger {
  background-color: #e74c3c;
  color: white;
}

.btn-danger:hover:not(:disabled) {
  background-color: #c0392b;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 0.875rem;
  min-width: auto;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .filter-row {
    grid-template-columns: 1fr 1fr 1fr;
    gap: 12px;
  }
  
  .search-box {
    grid-column: 1 / -1;
  }
}

@media (max-width: 768px) {
  .submissions-list {
    padding: 16px;
  }
  
  .submissions-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
  }
  
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 16px;
  }
  
  .filter-row {
    grid-template-columns: 1fr;
    gap: 16px;
  }
  
  .submissions-table-container {
    overflow-x: auto;
  }
  
  .submissions-table {
    min-width: 800px;
  }
  
  .submissions-table th,
  .submissions-table td {
    padding: 12px 8px;
    font-size: 0.875rem;
  }
  
  .action-buttons {
    flex-direction: column;
    gap: 4px;
  }
  
  .pagination {
    flex-direction: column;
    gap: 12px;
  }
}

@media (max-width: 480px) {
  .stats-grid {
    grid-template-columns: 1fr;
  }
  
  .stat-card {
    padding: 16px;
  }
  
  .stat-number {
    font-size: 1.5rem;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionsList.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionsList.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useSubmissions } from '../../contexts/SubmissionsContext';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { User } from '../../types';
import { authAPI } from '../../services/api';
import './SubmissionsList.css';

const SubmissionsList: React.FC = () => {
  const { 
    submissions, 
    loading, 
    error, 
    pagination, 
    stats,
    fetchSubmissions, 
    deleteSubmission,
    fetchStats 
  } = useSubmissions();
  const { user: supabaseUser, isAuthenticated } = useSupabaseAuth();
  const [userProfile, setUserProfile] = useState<User | null>(null);
  
  const [filters, setFilters] = useState({
    search: '',
    status: 'all',
    priority: 'all',
    assignedTo: 'all',
    formId: 'all',
    sortBy: 'createdAt',
    sortOrder: 'desc',
  });

  // Fetch user profile when authenticated
  useEffect(() => {
    let isMounted = true;
    
    const fetchUserProfile = async () => {
      if (isAuthenticated && supabaseUser) {
        try {
          const response = await authAPI.getMe();
          if (isMounted && response.data.success && response.data.data) {
            setUserProfile(response.data.data);
          }
        } catch (error) {
          console.error('Failed to fetch user profile:', error);
        }
      } else {
        if (isMounted) {
          setUserProfile(null);
        }
      }
    };

    fetchUserProfile();
    
    return () => {
      isMounted = false;
    };
  }, [isAuthenticated, supabaseUser]);

  useEffect(() => {
    let isMounted = true;
    
    const loadData = async () => {
      if (isMounted) {
        await fetchSubmissions({
          page: 1,
          limit: 10,
          ...(filters.search && { search: filters.search }),
          ...(filters.status !== 'all' && { status: filters.status }),
          ...(filters.priority !== 'all' && { priority: filters.priority }),
          ...(filters.assignedTo !== 'all' && { assignedTo: filters.assignedTo }),
          ...(filters.formId !== 'all' && { formId: filters.formId }),
          sortBy: filters.sortBy,
          sortOrder: filters.sortOrder,
        });
        await fetchStats();
      }
    };
    
    loadData();
    
    return () => {
      isMounted = false;
    };
  }, [filters]); // Removed fetchSubmissions and fetchStats from dependencies

  const handleDelete = async (id: string, submissionNumber: string) => {
    if (window.confirm(`Are you sure you want to delete submission ${submissionNumber}?`)) {
      try {
        await deleteSubmission(id);
      } catch (error) {
        console.error('Failed to delete submission:', error);
      }
    }
  };

  const handlePageChange = (page: number) => {
    fetchSubmissions({
      page,
      limit: pagination.limit,
      ...(filters.search && { search: filters.search }),
      ...(filters.status !== 'all' && { status: filters.status }),
      ...(filters.priority !== 'all' && { priority: filters.priority }),
      ...(filters.assignedTo !== 'all' && { assignedTo: filters.assignedTo }),
      ...(filters.formId !== 'all' && { formId: filters.formId }),
      sortBy: filters.sortBy,
      sortOrder: filters.sortOrder,
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'status-pending';
      case 'in-progress': return 'status-in-progress';
      case 'completed': return 'status-completed';
      case 'rejected': return 'status-rejected';
      case 'on-hold': return 'status-on-hold';
      default: return 'status-pending';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'priority-urgent';
      case 'high': return 'priority-high';
      case 'medium': return 'priority-medium';
      case 'low': return 'priority-low';
      default: return 'priority-medium';
    }
  };

  if (loading && submissions.length === 0) {
    return (
      <div className="submissions-list">
        <div className="loading">Loading submissions...</div>
      </div>
    );
  }

  return (
    <div className="submissions-list">
      <div className="submissions-header">
        <h1>Submissions Management</h1>
        <div className="header-actions">
          <button
            onClick={() => fetchSubmissions()}
            className="btn btn-outline"
          >
            Refresh
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {/* Stats Cards */}
      {stats && (
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-number">{stats.total}</div>
            <div className="stat-label">Total</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.pending}</div>
            <div className="stat-label">Pending</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.inProgress}</div>
            <div className="stat-label">In Progress</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.completed}</div>
            <div className="stat-label">Completed</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.rejected}</div>
            <div className="stat-label">Rejected</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{stats.onHold}</div>
            <div className="stat-label">On Hold</div>
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="submissions-filters">
        <div className="filter-row">
          <div className="search-box">
            <input
              type="text"
              placeholder="Search submissions..."
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
              className="search-input"
            />
          </div>
          <div className="filter-group">
            <select
              value={filters.status}
              onChange={(e) => setFilters({ ...filters, status: e.target.value })}
              className="filter-select"
              aria-label="Filter by status"
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="rejected">Rejected</option>
              <option value="on-hold">On Hold</option>
            </select>
          </div>
          <div className="filter-group">
            <select
              value={filters.priority}
              onChange={(e) => setFilters({ ...filters, priority: e.target.value })}
              className="filter-select"
              aria-label="Filter by priority"
            >
              <option value="all">All Priority</option>
              <option value="urgent">Urgent</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <div className="filter-group">
            <select
              value={filters.sortBy}
              onChange={(e) => setFilters({ ...filters, sortBy: e.target.value })}
              className="filter-select"
              aria-label="Sort by field"
            >
              <option value="createdAt">Sort by Date</option>
              <option value="status">Sort by Status</option>
              <option value="priority">Sort by Priority</option>
              <option value="submissionNumber">Sort by Number</option>
            </select>
          </div>
          <div className="filter-group">
            <select
              value={filters.sortOrder}
              onChange={(e) => setFilters({ ...filters, sortOrder: e.target.value })}
              className="filter-select"
              aria-label="Sort order"
            >
              <option value="desc">Newest First</option>
              <option value="asc">Oldest First</option>
            </select>
          </div>
        </div>
      </div>

      {/* Submissions Table */}
      <div className="submissions-table-container">
        <table className="submissions-table">
          <thead>
            <tr>
              <th>Submission #</th>
              <th>Form</th>
              <th>Status</th>
              <th>Priority</th>
              <th>Submitted By</th>
              <th>Assigned To</th>
              <th>Created</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {submissions.length === 0 ? (
              <tr>
                <td colSpan={8} className="no-submissions">
                  No submissions found.
                </td>
              </tr>
            ) : (
              submissions.map((submission) => (
                <tr key={submission._id}>
                  <td>
                    <Link to={`/submissions/${submission._id}`} className="submission-link">
                      {submission.submissionNumber}
                    </Link>
                  </td>
                  <td>
                    <div className="form-info">
                      <span className="form-title">
                        {typeof submission.formId === 'object' ? submission.formId.title : submission.formId}
                      </span>
                    </div>
                  </td>
                  <td>
                    <span className={`status-badge ${getStatusColor(submission.status)}`}>
                      {submission.status.replace('-', ' ')}
                    </span>
                  </td>
                  <td>
                    <span className={`priority-badge ${getPriorityColor(submission.priority)}`}>
                      {submission.priority}
                    </span>
                  </td>
                  <td>
                    {submission.submittedBy ? (
                      <div className="user-info">
                        <span className="user-name">{submission.submittedBy.name}</span>
                        <span className="user-email">{submission.submittedBy.email}</span>
                      </div>
                    ) : (
                      <span className="anonymous">Anonymous</span>
                    )}
                  </td>
                  <td>
                    {submission.assignedTo ? (
                      <div className="user-info">
                        <span className="user-name">{submission.assignedTo.name}</span>
                      </div>
                    ) : (
                      <span className="unassigned">Unassigned</span>
                    )}
                  </td>
                  <td>
                    <div className="date-info">
                      <span className="date">
                        {new Date(submission.createdAt).toLocaleDateString()}
                      </span>
                      <span className="time">
                        {new Date(submission.createdAt).toLocaleTimeString()}
                      </span>
                    </div>
                  </td>
                  <td>
                    <div className="action-buttons">
                      <Link
                        to={`/submissions/${submission._id}`}
                        className="btn btn-sm btn-secondary"
                      >
                        View
                      </Link>
                      {userProfile?.permissions.canEditSubmissions && (
                        <Link
                          to={`/submissions/${submission._id}/edit`}
                          className="btn btn-sm btn-outline"
                        >
                          Edit
                        </Link>
                      )}
                      {userProfile?.permissions.canEditSubmissions && (
                        <button
                          onClick={() => handleDelete(submission._id, submission.submissionNumber)}
                          className="btn btn-sm btn-danger"
                        >
                          Delete
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination.pages > 1 && (
        <div className="pagination">
          <button
            onClick={() => handlePageChange(pagination.page - 1)}
            disabled={pagination.page === 1}
            className="btn btn-outline"
          >
            Previous
          </button>
          
          <span className="page-info">
            Page {pagination.page} of {pagination.pages} ({pagination.total} total)
          </span>
          
          <button
            onClick={() => handlePageChange(pagination.page + 1)}
            disabled={pagination.page === pagination.pages}
            className="btn btn-outline"
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default SubmissionsList;


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionsList.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionViewer.css
================================================================================

.submission-viewer {
  padding: 20px;
  max-width: 1400px;
  margin: 0 auto;
}

.submission-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 2px solid #e1e5e9;
}

.header-content h1 {
  margin: 0 0 12px 0;
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.submission-meta {
  display: flex;
  gap: 12px;
  align-items: center;
}

.status-badge,
.priority-badge {
  display: inline-block;
  padding: 6px 16px;
  border-radius: 20px;
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-pending {
  background-color: #fff3cd;
  color: #856404;
}

.status-in-progress {
  background-color: #cce5ff;
  color: #004085;
}

.status-completed {
  background-color: #d4edda;
  color: #155724;
}

.status-rejected {
  background-color: #f8d7da;
  color: #721c24;
}

.status-on-hold {
  background-color: #e2e3e5;
  color: #383d41;
}

.priority-urgent {
  background-color: #f8d7da;
  color: #721c24;
}

.priority-high {
  background-color: #f5c6cb;
  color: #721c24;
}

.priority-medium {
  background-color: #fff3cd;
  color: #856404;
}

.priority-low {
  background-color: #d1ecf1;
  color: #0c5460;
}

.header-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.submission-content {
  display: grid;
  grid-template-columns: 1fr 400px;
  gap: 30px;
}

.submission-details {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.details-section,
.form-data-section,
.tags-section,
.attachments-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.details-section h2,
.form-data-section h2,
.tags-section h2,
.attachments-section h2 {
  margin: 0 0 20px 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.details-grid {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.detail-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 12px 0;
  border-bottom: 1px solid #f1f3f4;
}

.detail-item:last-child {
  border-bottom: none;
}

.detail-label {
  font-weight: 500;
  color: #6c757d;
  min-width: 120px;
}

.detail-value {
  font-weight: 600;
  color: #2c3e50;
  text-align: right;
  flex: 1;
  margin-left: 16px;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

.user-name {
  font-weight: 600;
  color: #2c3e50;
}

.user-email {
  font-size: 0.875rem;
  color: #6c757d;
}

.form-data-grid {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.form-data-item {
  display: flex;
  flex-direction: column;
  gap: 8px;
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e1e5e9;
}

.form-data-label {
  font-weight: 600;
  color: #2c3e50;
  text-transform: capitalize;
}

.form-data-value {
  color: #495057;
  word-break: break-word;
  white-space: pre-wrap;
}

.tags-list {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.tag {
  background-color: #e9ecef;
  color: #495057;
  padding: 4px 12px;
  border-radius: 16px;
  font-size: 0.875rem;
  font-weight: 500;
}

.attachments-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.attachment-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e1e5e9;
}

.attachment-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.attachment-name {
  font-weight: 500;
  color: #2c3e50;
}

.attachment-size {
  font-size: 0.875rem;
  color: #6c757d;
}

.submission-sidebar {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.notes-section,
.metadata-section {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e1e5e9;
}

.notes-section h2,
.metadata-section h2 {
  margin: 0 0 20px 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
}

.notes-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-bottom: 20px;
  max-height: 400px;
  overflow-y: auto;
}

.note-item {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e1e5e9;
}

.note-content {
  color: #2c3e50;
  line-height: 1.5;
  margin-bottom: 8px;
}

.note-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.875rem;
  color: #6c757d;
}

.note-author {
  font-weight: 500;
}

.note-date {
  font-style: italic;
}

.no-notes {
  text-align: center;
  color: #6c757d;
  font-style: italic;
  padding: 20px;
}

.add-note-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.note-input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  font-size: 16px;
  resize: vertical;
  min-height: 80px;
  font-family: inherit;
}

.note-input:focus {
  outline: none;
  border-color: #3498db;
}

.metadata-grid {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.metadata-item {
  display: flex;
  flex-direction: column;
  gap: 4px;
  padding: 8px 0;
  border-bottom: 1px solid #f1f3f4;
}

.metadata-item:last-child {
  border-bottom: none;
}

.metadata-label {
  font-weight: 500;
  color: #6c757d;
  font-size: 0.875rem;
}

.metadata-value {
  color: #2c3e50;
  word-break: break-all;
}

.metadata-truncate {
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.loading {
  text-align: center;
  padding: 60px 20px;
  font-size: 1.125rem;
  color: #6c757d;
}

.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 20px;
  border: 1px solid #f5c6cb;
}

.no-submission {
  text-align: center;
  padding: 60px 20px;
  color: #6c757d;
}

.no-submission h2 {
  margin-bottom: 16px;
  color: #2c3e50;
}

/* Button Styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #3498db;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #2980b9;
}

.btn-outline {
  background-color: transparent;
  color: #3498db;
  border: 2px solid #3498db;
}

.btn-outline:hover:not(:disabled) {
  background-color: #3498db;
  color: white;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 0.875rem;
  min-width: auto;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .submission-content {
    grid-template-columns: 1fr;
    gap: 24px;
  }
}

@media (max-width: 768px) {
  .submission-viewer {
    padding: 16px;
  }
  
  .submission-header {
    flex-direction: column;
    gap: 20px;
    align-items: stretch;
  }
  
  .header-actions {
    flex-direction: column;
    gap: 12px;
  }
  
  .header-actions .btn {
    width: 100%;
  }
  
  .submission-meta {
    flex-wrap: wrap;
  }
  
  .detail-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
  
  .detail-value {
    text-align: left;
    margin-left: 0;
  }
  
  .user-info {
    align-items: flex-start;
  }
  
  .attachment-item {
    flex-direction: column;
    gap: 12px;
    align-items: stretch;
  }
  
  .attachment-info {
    align-items: flex-start;
  }
  
  .note-meta {
    flex-direction: column;
    gap: 4px;
    align-items: flex-start;
  }
}


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionViewer.css
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\components\Submissions\SubmissionViewer.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useSubmissions } from '../../contexts/SubmissionsContext';
import { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';
import { useForms } from '../../contexts/FormsContext';
import { User } from '../../types';
import { authAPI } from '../../services/api';
import './SubmissionViewer.css';

const SubmissionViewer: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { currentSubmission, loading, error, fetchSubmission, clearError, addNote } = useSubmissions();
  const { user: supabaseUser, isAuthenticated } = useSupabaseAuth();
  const [userProfile, setUserProfile] = useState<User | null>(null);
  const { fetchForm } = useForms();
  
  const [newNote, setNewNote] = useState('');
  const [addingNote, setAddingNote] = useState(false);

  // Fetch user profile when authenticated
  useEffect(() => {
    const fetchUserProfile = async () => {
      if (isAuthenticated && supabaseUser) {
        try {
          const response = await authAPI.getMe();
          if (response.data.success && response.data.data) {
            setUserProfile(response.data.data);
          }
        } catch (error) {
          console.error('Failed to fetch user profile:', error);
        }
      } else {
        setUserProfile(null);
      }
    };

    fetchUserProfile();
  }, [isAuthenticated, supabaseUser]);

  useEffect(() => {
    if (id) {
      fetchSubmission(id);
    }
    return () => clearError();
  }, [id, fetchSubmission, clearError]);

  useEffect(() => {
    if (currentSubmission?.formId) {
      const formId = typeof currentSubmission.formId === 'object'
        ? currentSubmission.formId._id
        : currentSubmission.formId;
      fetchForm(formId);
    }
  }, [currentSubmission?.formId, fetchForm]);

  const handleAddNote = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newNote.trim() || !id) return;

    setAddingNote(true);
    try {
      await addNote(id, { text: newNote.trim() });
      setNewNote('');
    } catch (error) {
      console.error('Failed to add note:', error);
    } finally {
      setAddingNote(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'status-pending';
      case 'in-progress': return 'status-in-progress';
      case 'completed': return 'status-completed';
      case 'rejected': return 'status-rejected';
      case 'on-hold': return 'status-on-hold';
      default: return 'status-pending';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'priority-urgent';
      case 'high': return 'priority-high';
      case 'medium': return 'priority-medium';
      case 'low': return 'priority-low';
      default: return 'priority-medium';
    }
  };

  if (loading) {
    return (
      <div className="submission-viewer">
        <div className="loading">Loading submission...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="submission-viewer">
        <div className="error-message">
          {error}
        </div>
        <Link to="/submissions" className="btn btn-primary">
          Back to Submissions
        </Link>
      </div>
    );
  }

  if (!currentSubmission) {
    return (
      <div className="submission-viewer">
        <div className="no-submission">
          <h2>Submission not found</h2>
          <p>The requested submission could not be found.</p>
          <Link to="/submissions" className="btn btn-primary">
            Back to Submissions
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="submission-viewer">
      <div className="submission-header">
        <div className="header-content">
          <h1>Submission {currentSubmission.submissionNumber}</h1>
          <div className="submission-meta">
            <span className={`status-badge ${getStatusColor(currentSubmission.status)}`}>
              {currentSubmission.status.replace('-', ' ')}
            </span>
            <span className={`priority-badge ${getPriorityColor(currentSubmission.priority)}`}>
              {currentSubmission.priority}
            </span>
          </div>
        </div>
        <div className="header-actions">
          {userProfile?.permissions.canEditSubmissions && (
            <Link to={`/submissions/${currentSubmission._id}/edit`} className="btn btn-outline">
              Edit Submission
            </Link>
          )}
          <Link to="/submissions" className="btn btn-outline">
            Back to Submissions
          </Link>
        </div>
      </div>

      <div className="submission-content">
        <div className="submission-details">
          <div className="details-section">
            <h2>Submission Details</h2>
            <div className="details-grid">
              <div className="detail-item">
                <span className="detail-label">Submission Number:</span>
                <span className="detail-value">{currentSubmission.submissionNumber}</span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Form ID:</span>
                <span className="detail-value">
                  {typeof currentSubmission.formId === 'object' 
                    ? currentSubmission.formId._id 
                    : currentSubmission.formId}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Status:</span>
                <span className={`detail-value ${getStatusColor(currentSubmission.status)}`}>
                  {currentSubmission.status.replace('-', ' ')}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Priority:</span>
                <span className={`detail-value ${getPriorityColor(currentSubmission.priority)}`}>
                  {currentSubmission.priority}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Submitted By:</span>
                <span className="detail-value">
                  {currentSubmission.submittedBy ? (
                    <div className="user-info">
                      <div className="user-name">{currentSubmission.submittedBy.name}</div>
                      <div className="user-email">{currentSubmission.submittedBy.email}</div>
                    </div>
                  ) : (
                    'Anonymous'
                  )}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Assigned To:</span>
                <span className="detail-value">
                  {currentSubmission.assignedTo ? (
                    <div className="user-info">
                      <div className="user-name">{currentSubmission.assignedTo.name}</div>
                      <div className="user-email">{currentSubmission.assignedTo.email}</div>
                    </div>
                  ) : (
                    'Unassigned'
                  )}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Created:</span>
                <span className="detail-value">
                  {new Date(currentSubmission.createdAt).toLocaleString()}
                </span>
              </div>
              <div className="detail-item">
                <span className="detail-label">Last Updated:</span>
                <span className="detail-value">
                  {new Date(currentSubmission.updatedAt).toLocaleString()}
                </span>
              </div>
              {currentSubmission.dueDate && (
                <div className="detail-item">
                  <span className="detail-label">Due Date:</span>
                  <span className="detail-value">
                    {new Date(currentSubmission.dueDate).toLocaleDateString()}
                  </span>
                </div>
              )}
            </div>
          </div>

          <div className="form-data-section">
            <h2>Form Data</h2>
            <div className="form-data-grid">
              {Object.entries(currentSubmission.data).map(([key, value]) => (
                <div key={key} className="form-data-item">
                  <span className="form-data-label">{key}:</span>
                  <span className="form-data-value">
                    {typeof value === 'object' ? JSON.stringify(value) : String(value)}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {currentSubmission.tags && currentSubmission.tags.length > 0 && (
            <div className="tags-section">
              <h2>Tags</h2>
              <div className="tags-list">
                {currentSubmission.tags.map((tag, index) => (
                  <span key={index} className="tag">
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}

          {currentSubmission.attachments && currentSubmission.attachments.length > 0 && (
            <div className="attachments-section">
              <h2>Attachments</h2>
              <div className="attachments-list">
                {currentSubmission.attachments.map((attachment, index) => (
                  <div key={index} className="attachment-item">
                    <div className="attachment-info">
                      <span className="attachment-name">{attachment.originalName}</span>
                      <span className="attachment-size">
                        {(attachment.size / 1024).toFixed(1)} KB
                      </span>
                    </div>
                    <a
                      href={attachment.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="btn btn-sm btn-outline"
                    >
                      Download
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <div className="submission-sidebar">
          <div className="notes-section">
            <h2>Notes</h2>
            
            <div className="notes-list">
              {currentSubmission.notes && currentSubmission.notes.length > 0 ? (
                currentSubmission.notes.map((note, index) => (
                  <div key={index} className="note-item">
                    <div className="note-content">{note.text}</div>
                    <div className="note-meta">
                      <span className="note-author">{note.addedBy.name}</span>
                      <span className="note-date">
                        {new Date(note.addedAt).toLocaleString()}
                      </span>
                    </div>
                  </div>
                ))
              ) : (
                <p className="no-notes">No notes yet.</p>
              )}
            </div>

            {userProfile?.permissions.canEditSubmissions && (
              <form onSubmit={handleAddNote} className="add-note-form">
                <textarea
                  value={newNote}
                  onChange={(e) => setNewNote(e.target.value)}
                  placeholder="Add a note..."
                  className="note-input"
                  rows={3}
                  required
                />
                <button
                  type="submit"
                  disabled={addingNote || !newNote.trim()}
                  className="btn btn-primary"
                >
                  {addingNote ? 'Adding...' : 'Add Note'}
                </button>
              </form>
            )}
          </div>

          <div className="metadata-section">
            <h2>Metadata</h2>
            <div className="metadata-grid">
              {currentSubmission.metadata.ipAddress && (
                <div className="metadata-item">
                  <span className="metadata-label">IP Address:</span>
                  <span className="metadata-value">{currentSubmission.metadata.ipAddress}</span>
                </div>
              )}
              {currentSubmission.metadata.region && (
                <div className="metadata-item">
                  <span className="metadata-label">Region:</span>
                  <span className="metadata-value">{currentSubmission.metadata.region}</span>
                </div>
              )}
              {currentSubmission.metadata.userAgent && (
                <div className="metadata-item">
                  <span className="metadata-label">User Agent:</span>
                  <span className="metadata-value metadata-truncate">
                    {currentSubmission.metadata.userAgent}
                  </span>
                </div>
              )}
              {currentSubmission.metadata.referrer && (
                <div className="metadata-item">
                  <span className="metadata-label">Referrer:</span>
                  <span className="metadata-value">{currentSubmission.metadata.referrer}</span>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SubmissionViewer;


================================================================================
END: D:\clientportal\apps\web\src\components\Submissions\SubmissionViewer.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\contexts\FormsContext.tsx
================================================================================

import React, { createContext, useContext, useReducer, useCallback, ReactNode } from 'react';
import { Form } from '../types';
import { supabaseFormsAPI } from '../services/supabaseForms';

interface FormsState {
  forms: Form[];
  currentForm: Form | null;
  loading: boolean;
  error: string | null;
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

interface FormsContextType extends FormsState {
  fetchForms: (params?: {
    page?: number;
    limit?: number;
    search?: string;
    isActive?: boolean;
  }) => Promise<void>;
  fetchForm: (id: string) => Promise<void>;
  fetchFormForSubmission: (id: string) => Promise<void>;
  createForm: (formData: Partial<Form>) => Promise<Form>;
  updateForm: (id: string, formData: Partial<Form>) => Promise<Form>;
  deleteForm: (id: string) => Promise<void>;
  clearCurrentForm: () => void;
  clearError: () => void;
}

type FormsAction =
  | { type: 'FORMS_LOADING' }
  | { type: 'FORMS_SUCCESS'; payload: { forms: Form[]; pagination: any } }
  | { type: 'FORM_SUCCESS'; payload: Form }
  | { type: 'FORMS_ERROR'; payload: string }
  | { type: 'CLEAR_CURRENT_FORM' }
  | { type: 'CLEAR_ERROR' };

const initialState: FormsState = {
  forms: [],
  currentForm: null,
  loading: false,
  error: null,
  pagination: {
    page: 1,
    limit: 10,
    total: 0,
    pages: 0,
  },
};

const formsReducer = (state: FormsState, action: FormsAction): FormsState => {
  switch (action.type) {
    case 'FORMS_LOADING':
      return {
        ...state,
        loading: true,
        error: null,
      };
    case 'FORMS_SUCCESS':
      return {
        ...state,
        loading: false,
        forms: action.payload.forms,
        pagination: action.payload.pagination,
        error: null,
      };
    case 'FORM_SUCCESS':
      return {
        ...state,
        loading: false,
        currentForm: action.payload,
        error: null,
      };
    case 'FORMS_ERROR':
      return {
        ...state,
        loading: false,
        error: action.payload,
      };
    case 'CLEAR_CURRENT_FORM':
      return {
        ...state,
        currentForm: null,
      };
    case 'CLEAR_ERROR':
      return {
        ...state,
        error: null,
      };
    default:
      return state;
  }
};

const FormsContext = createContext<FormsContextType | undefined>(undefined);

export const useForms = () => {
  const context = useContext(FormsContext);
  if (context === undefined) {
    throw new Error('useForms must be used within a FormsProvider');
  }
  return context;
};

interface FormsProviderProps {
  children: ReactNode;
}

export const FormsProvider: React.FC<FormsProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(formsReducer, initialState);

  const fetchForms = useCallback(async (params?: {
    page?: number;
    limit?: number;
    search?: string;
    isActive?: boolean;
  }) => {
    try {
      console.log('🚀 FormsContext: fetchForms called with params:', params);
      dispatch({ type: 'FORMS_LOADING' });
      const response = await supabaseFormsAPI.getForms(params);
      console.log('🚀 FormsContext: got response:', response);
      const { data, total, pages, current } = response;
      
      // Fetch submission counts for each form
      const formsWithCounts = await Promise.all(
        data.map(async (form) => {
          const count = await supabaseFormsAPI.getFormSubmissionsCount(form._id);
          return { ...form, submissionCount: count };
        })
      );
      
      dispatch({
        type: 'FORMS_SUCCESS',
        payload: {
          forms: formsWithCounts,
          pagination: {
            page: current || 1,
            limit: params?.limit || 10,
            total,
            pages,
          },
        },
      });
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to fetch forms',
      });
    }
  }, []); // Empty dependency array to make it stable

  const fetchForm = useCallback(async (id: string) => {
    try {
      dispatch({ type: 'FORMS_LOADING' });
      const form = await supabaseFormsAPI.getForm(id);
      const count = await supabaseFormsAPI.getFormSubmissionsCount(id);
      const formWithCount = { ...form, submissionCount: count };
      
      dispatch({
        type: 'FORM_SUCCESS',
        payload: formWithCount,
      });
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to fetch form',
      });
    }
  }, []);

  const fetchFormForSubmission = useCallback(async (id: string) => {
    try {
      dispatch({ type: 'FORMS_LOADING' });
      const form = await supabaseFormsAPI.getFormForSubmission(id);
      const count = await supabaseFormsAPI.getFormSubmissionsCount(id);
      const formWithCount = { ...form, submissionCount: count };
      
      dispatch({
        type: 'FORM_SUCCESS',
        payload: formWithCount,
      });
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to fetch form',
      });
    }
  }, []);

  const createForm = useCallback(async (formData: Partial<Form>): Promise<Form> => {
    try {
      dispatch({ type: 'FORMS_LOADING' });
      const newForm = await supabaseFormsAPI.createForm(formData);
      
      // Refresh forms list with current pagination
      await fetchForms({
        page: state.pagination.page,
        limit: state.pagination.limit,
      });
      
      return newForm;
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to create form',
      });
      throw error;
    }
  }, [fetchForms, state.pagination.page, state.pagination.limit]);

  const updateForm = useCallback(async (id: string, formData: Partial<Form>): Promise<Form> => {
    try {
      dispatch({ type: 'FORMS_LOADING' });
      const updatedForm = await supabaseFormsAPI.updateForm(id, formData);
      const count = await supabaseFormsAPI.getFormSubmissionsCount(id);
      const formWithCount = { ...updatedForm, submissionCount: count };
      
      // Update current form if it's the one being updated
      if (state.currentForm?._id === id) {
        dispatch({
          type: 'FORM_SUCCESS',
          payload: formWithCount,
        });
      }
      
      // Refresh forms list with current pagination
      await fetchForms({
        page: state.pagination.page,
        limit: state.pagination.limit,
      });
      
      return formWithCount;
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to update form',
      });
      throw error;
    }
  }, [fetchForms, state.currentForm?._id, state.pagination.page, state.pagination.limit]);

  const deleteForm = useCallback(async (id: string) => {
    try {
      dispatch({ type: 'FORMS_LOADING' });
      await supabaseFormsAPI.deleteForm(id);
      
      // Clear current form if it's the one being deleted
      if (state.currentForm?._id === id) {
        dispatch({ type: 'CLEAR_CURRENT_FORM' });
      }
      
      // Refresh forms list with current pagination
      await fetchForms({
        page: state.pagination.page,
        limit: state.pagination.limit,
      });
    } catch (error: any) {
      dispatch({
        type: 'FORMS_ERROR',
        payload: error.message || 'Failed to delete form',
      });
    }
  }, [fetchForms, state.currentForm?._id, state.pagination.page, state.pagination.limit]);

  const clearCurrentForm = useCallback(() => {
    dispatch({ type: 'CLEAR_CURRENT_FORM' });
  }, []);

  const clearError = useCallback(() => {
    dispatch({ type: 'CLEAR_ERROR' });
  }, []);

  const value: FormsContextType = {
    ...state,
    fetchForms,
    fetchForm,
    fetchFormForSubmission,
    createForm,
    updateForm,
    deleteForm,
    clearCurrentForm,
    clearError,
  };

  return <FormsContext.Provider value={value}>{children}</FormsContext.Provider>;
};


================================================================================
END: D:\clientportal\apps\web\src\contexts\FormsContext.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\contexts\SocketContext.tsx
================================================================================

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { io, Socket } from 'socket.io-client';

interface SocketContextType {
  socket: Socket | null;
  isConnected: boolean;
  joinRoom: (room: string) => void;
  leaveRoom: (room: string) => void;
}

const SocketContext = createContext<SocketContextType | undefined>(undefined);

export const useSocket = () => {
  const context = useContext(SocketContext);
  if (context === undefined) {
    throw new Error('useSocket must be used within a SocketProvider');
  }
  return context;
};

interface SocketProviderProps {
  children: ReactNode;
}

export const SocketProvider: React.FC<SocketProviderProps> = ({ children }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'https://api.qially.com';
    const newSocket = io(socketUrl, {
      transports: ['websocket', 'polling'],
    });

    newSocket.on('connect', () => {
      console.log('Connected to server');
      setIsConnected(true);
    });

    newSocket.on('disconnect', () => {
      console.log('Disconnected from server');
      setIsConnected(false);
    });

    newSocket.on('connect_error', (error) => {
      console.error('Connection error:', error);
      setIsConnected(false);
    });

    setSocket(newSocket);

    return () => {
      newSocket.close();
    };
  }, []);

  const joinRoom = (room: string) => {
    if (socket) {
      socket.emit('join-room', room);
    }
  };

  const leaveRoom = (room: string) => {
    if (socket) {
      socket.emit('leave-room', room);
    }
  };

  const value: SocketContextType = {
    socket,
    isConnected,
    joinRoom,
    leaveRoom,
  };

  return <SocketContext.Provider value={value}>{children}</SocketContext.Provider>;
};


================================================================================
END: D:\clientportal\apps\web\src\contexts\SocketContext.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\contexts\SubmissionsContext.tsx
================================================================================

import React, { createContext, useContext, useReducer, useCallback, ReactNode } from 'react';
import { Submission } from '../types';
import { submissionsAPI } from '../services/api';

interface SubmissionsState {
  submissions: Submission[];
  currentSubmission: Submission | null;
  loading: boolean;
  error: string | null;
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
  stats: {
    total: number;
    pending: number;
    inProgress: number;
    completed: number;
    rejected: number;
    onHold: number;
  } | null;
}

interface SubmissionsContextType extends SubmissionsState {
  fetchSubmissions: (params?: {
    page?: number;
    limit?: number;
    status?: string;
    priority?: string;
    assignedTo?: string;
    formId?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }) => Promise<void>;
  fetchSubmission: (id: string) => Promise<void>;
  updateSubmission: (id: string, submissionData: Partial<Submission>) => Promise<Submission>;
  deleteSubmission: (id: string) => Promise<void>;
  addNote: (id: string, note: { text: string }) => Promise<Submission>;
  fetchStats: (period?: string) => Promise<void>;
  clearCurrentSubmission: () => void;
  clearError: () => void;
}

type SubmissionsAction =
  | { type: 'SUBMISSIONS_LOADING' }
  | { type: 'SUBMISSIONS_SUCCESS'; payload: { submissions: Submission[]; pagination: any } }
  | { type: 'SUBMISSION_SUCCESS'; payload: Submission }
  | { type: 'SUBMISSIONS_ERROR'; payload: string }
  | { type: 'STATS_SUCCESS'; payload: any }
  | { type: 'CLEAR_CURRENT_SUBMISSION' }
  | { type: 'CLEAR_ERROR' };

const initialState: SubmissionsState = {
  submissions: [],
  currentSubmission: null,
  loading: false,
  error: null,
  pagination: {
    page: 1,
    limit: 10,
    total: 0,
    pages: 0,
  },
  stats: null,
};

const submissionsReducer = (state: SubmissionsState, action: SubmissionsAction): SubmissionsState => {
  switch (action.type) {
    case 'SUBMISSIONS_LOADING':
      return {
        ...state,
        loading: true,
        error: null,
      };
    case 'SUBMISSIONS_SUCCESS':
      return {
        ...state,
        loading: false,
        submissions: action.payload.submissions,
        pagination: action.payload.pagination,
        error: null,
      };
    case 'SUBMISSION_SUCCESS':
      return {
        ...state,
        loading: false,
        currentSubmission: action.payload,
        error: null,
      };
    case 'SUBMISSIONS_ERROR':
      return {
        ...state,
        loading: false,
        error: action.payload,
      };
    case 'STATS_SUCCESS':
      return {
        ...state,
        stats: action.payload,
      };
    case 'CLEAR_CURRENT_SUBMISSION':
      return {
        ...state,
        currentSubmission: null,
      };
    case 'CLEAR_ERROR':
      return {
        ...state,
        error: null,
      };
    default:
      return state;
  }
};

const SubmissionsContext = createContext<SubmissionsContextType | undefined>(undefined);

export const useSubmissions = () => {
  const context = useContext(SubmissionsContext);
  if (context === undefined) {
    throw new Error('useSubmissions must be used within a SubmissionsProvider');
  }
  return context;
};

interface SubmissionsProviderProps {
  children: ReactNode;
}

export const SubmissionsProvider: React.FC<SubmissionsProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(submissionsReducer, initialState);

  const fetchSubmissions = useCallback(async (params?: {
    page?: number;
    limit?: number;
    status?: string;
    priority?: string;
    assignedTo?: string;
    formId?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }) => {
    try {
      dispatch({ type: 'SUBMISSIONS_LOADING' });
      const response = await submissionsAPI.getSubmissions(params);
      const { data, total, pages, current } = response.data;
      
      dispatch({
        type: 'SUBMISSIONS_SUCCESS',
        payload: {
          submissions: data,
          pagination: {
            page: current || 1,
            limit: params?.limit || 10,
            total,
            pages,
          },
        },
      });
    } catch (error: any) {
      dispatch({
        type: 'SUBMISSIONS_ERROR',
        payload: error.response?.data?.message || 'Failed to fetch submissions',
      });
    }
  }, []);

  const fetchSubmission = useCallback(async (id: string) => {
    try {
      dispatch({ type: 'SUBMISSIONS_LOADING' });
      const response = await submissionsAPI.getSubmission(id);
      dispatch({
        type: 'SUBMISSION_SUCCESS',
        payload: response.data.data!,
      });
    } catch (error: any) {
      dispatch({
        type: 'SUBMISSIONS_ERROR',
        payload: error.response?.data?.message || 'Failed to fetch submission',
      });
    }
  }, []);

  const updateSubmission = useCallback(async (id: string, submissionData: Partial<Submission>): Promise<Submission> => {
    try {
      dispatch({ type: 'SUBMISSIONS_LOADING' });
      const response = await submissionsAPI.updateSubmission(id, submissionData);
      const updatedSubmission = response.data.data!;
      
      // Update current submission if it's the one being updated
      if (state.currentSubmission?._id === id) {
        dispatch({
          type: 'SUBMISSION_SUCCESS',
          payload: updatedSubmission,
        });
      }
      
      // Refresh submissions list
      await fetchSubmissions();
      
      return updatedSubmission;
    } catch (error: any) {
      dispatch({
        type: 'SUBMISSIONS_ERROR',
        payload: error.response?.data?.message || 'Failed to update submission',
      });
      throw error;
    }
  }, [fetchSubmissions, state.currentSubmission?._id]);

  const deleteSubmission = useCallback(async (id: string) => {
    try {
      dispatch({ type: 'SUBMISSIONS_LOADING' });
      await submissionsAPI.deleteSubmission(id);
      
      // Clear current submission if it's the one being deleted
      if (state.currentSubmission?._id === id) {
        dispatch({ type: 'CLEAR_CURRENT_SUBMISSION' });
      }
      
      // Refresh submissions list
      await fetchSubmissions();
    } catch (error: any) {
      dispatch({
        type: 'SUBMISSIONS_ERROR',
        payload: error.response?.data?.message || 'Failed to delete submission',
      });
    }
  }, [fetchSubmissions, state.currentSubmission?._id]);

  const addNote = useCallback(async (id: string, note: { text: string }): Promise<Submission> => {
    try {
      dispatch({ type: 'SUBMISSIONS_LOADING' });
      const response = await submissionsAPI.addNote(id, note);
      const updatedSubmission = response.data.data!;
      
      // Update current submission if it's the one being updated
      if (state.currentSubmission?._id === id) {
        dispatch({
          type: 'SUBMISSION_SUCCESS',
          payload: updatedSubmission,
        });
      }
      
      return updatedSubmission;
    } catch (error: any) {
      dispatch({
        type: 'SUBMISSIONS_ERROR',
        payload: error.response?.data?.message || 'Failed to add note',
      });
      throw error;
    }
  }, [state.currentSubmission?._id]);

  const fetchStats = useCallback(async (period?: string) => {
    try {
      const response = await submissionsAPI.getStats(period);
      dispatch({
        type: 'STATS_SUCCESS',
        payload: response.data.data,
      });
    } catch (error: any) {
      console.error('Failed to fetch stats:', error);
    }
  }, []);

  const clearCurrentSubmission = useCallback(() => {
    dispatch({ type: 'CLEAR_CURRENT_SUBMISSION' });
  }, []);

  const clearError = useCallback(() => {
    dispatch({ type: 'CLEAR_ERROR' });
  }, []);

  const value: SubmissionsContextType = {
    ...state,
    fetchSubmissions,
    fetchSubmission,
    updateSubmission,
    deleteSubmission,
    addNote,
    fetchStats,
    clearCurrentSubmission,
    clearError,
  };

  return <SubmissionsContext.Provider value={value}>{children}</SubmissionsContext.Provider>;
};


================================================================================
END: D:\clientportal\apps\web\src\contexts\SubmissionsContext.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\contexts\SupabaseAuthContext.tsx
================================================================================

import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { auth } from '../lib/supabase';

interface AuthState {
  user: User | null;
  session: Session | null;
  isAuthenticated: boolean;
  loading: boolean;
}

interface AuthContextType extends AuthState {
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, userData?: { name?: string; role?: string; region?: string }) => Promise<void>;
  signInWithMagicLink: (email: string) => Promise<void>;
  signOut: () => Promise<void>;
  refreshSession: () => Promise<void>;
}

type AuthAction =
  | { type: 'AUTH_START' }
  | { type: 'AUTH_SUCCESS'; payload: { user: User; session: Session } }
  | { type: 'AUTH_FAIL' }
  | { type: 'LOGOUT' }
  | { type: 'SET_LOADING'; payload: boolean };

const initialState: AuthState = {
  user: null,
  session: null,
  isAuthenticated: false,
  loading: true,
};

const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case 'AUTH_START':
      return {
        ...state,
        loading: true,
      };
    case 'AUTH_SUCCESS':
      return {
        ...state,
        user: action.payload.user,
        session: action.payload.session,
        isAuthenticated: true,
        loading: false,
      };
    case 'AUTH_FAIL':
      return {
        ...state,
        user: null,
        session: null,
        isAuthenticated: false,
        loading: false,
      };
    case 'LOGOUT':
      return {
        ...state,
        user: null,
        session: null,
        isAuthenticated: false,
        loading: false,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
      };
    default:
      return state;
  }
};

const SupabaseAuthContext = createContext<AuthContextType | undefined>(undefined);

export const useSupabaseAuth = () => {
  const context = useContext(SupabaseAuthContext);
  if (context === undefined) {
    throw new Error('useSupabaseAuth must be used within a SupabaseAuthProvider');
  }
  return context;
};

interface SupabaseAuthProviderProps {
  children: ReactNode;
}

export const SupabaseAuthProvider: React.FC<SupabaseAuthProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Initialize auth state and listen for changes
  useEffect(() => {
    // Get initial session
    const getInitialSession = async () => {
      try {
        const { session, error } = await auth.getCurrentSession();
        if (error) {
          console.error('Error getting initial session:', error);
          dispatch({ type: 'AUTH_FAIL' });
          return;
        }

        if (session?.user) {
          dispatch({
            type: 'AUTH_SUCCESS',
            payload: { user: session.user, session },
          });
        } else {
          dispatch({ type: 'AUTH_FAIL' });
        }
      } catch (error) {
        console.error('Error initializing auth:', error);
        dispatch({ type: 'AUTH_FAIL' });
      }
    };

    getInitialSession();

    // Listen for auth state changes
    const { data: { subscription } } = auth.onAuthStateChange((event, session) => {
      console.log('Auth state changed:', event, session?.user?.email);
      
      if (event === 'SIGNED_IN' && session?.user) {
        dispatch({
          type: 'AUTH_SUCCESS',
          payload: { user: session.user, session },
        });
      } else if (event === 'SIGNED_OUT') {
        dispatch({ type: 'LOGOUT' });
      } else if (event === 'TOKEN_REFRESHED' && session?.user) {
        dispatch({
          type: 'AUTH_SUCCESS',
          payload: { user: session.user, session },
        });
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      dispatch({ type: 'AUTH_START' });
      const { data, error } = await auth.signIn(email, password);
      
      if (error) {
        throw error;
      }

      if (data.user && data.session) {
        dispatch({
          type: 'AUTH_SUCCESS',
          payload: { user: data.user, session: data.session },
        });
      } else {
        throw new Error('No user or session returned');
      }
    } catch (error: any) {
      dispatch({ type: 'AUTH_FAIL' });
      throw error.message || 'Sign in failed';
    }
  };

  const signUp = async (email: string, password: string, userData?: { name?: string; role?: string; region?: string }) => {
    try {
      dispatch({ type: 'AUTH_START' });
      const { data, error } = await auth.signUp(email, password, userData);
      
      if (error) {
        throw error;
      }

      if (data.user && data.session) {
        dispatch({
          type: 'AUTH_SUCCESS',
          payload: { user: data.user, session: data.session },
        });
      } else {
        // User might need to confirm email
        dispatch({ type: 'AUTH_FAIL' });
        throw new Error('Please check your email to confirm your account');
      }
    } catch (error: any) {
      dispatch({ type: 'AUTH_FAIL' });
      throw error.message || 'Sign up failed';
    }
  };

  const signInWithMagicLink = async (email: string) => {
    try {
      dispatch({ type: 'AUTH_START' });
      const { error } = await auth.signInWithMagicLink(email);
      
      if (error) {
        throw error;
      }

      // Magic link doesn't immediately sign in, it sends an email
      dispatch({ type: 'AUTH_FAIL' });
      throw new Error('Check your email for the magic link');
    } catch (error: any) {
      dispatch({ type: 'AUTH_FAIL' });
      throw error.message || 'Magic link failed';
    }
  };

  const signOut = async () => {
    try {
      const { error } = await auth.signOut();
      if (error) {
        throw error;
      }
      dispatch({ type: 'LOGOUT' });
    } catch (error: any) {
      throw error.message || 'Sign out failed';
    }
  };

  const refreshSession = async () => {
    try {
      const { session, error } = await auth.getCurrentSession();
      if (error) {
        throw error;
      }

      if (session?.user) {
        dispatch({
          type: 'AUTH_SUCCESS',
          payload: { user: session.user, session },
        });
      } else {
        dispatch({ type: 'AUTH_FAIL' });
      }
    } catch (error: any) {
      dispatch({ type: 'AUTH_FAIL' });
      throw error.message || 'Session refresh failed';
    }
  };

  const value: AuthContextType = {
    ...state,
    signIn,
    signUp,
    signInWithMagicLink,
    signOut,
    refreshSession,
  };

  return (
    <SupabaseAuthContext.Provider value={value}>
      {children}
    </SupabaseAuthContext.Provider>
  );
};


================================================================================
END: D:\clientportal\apps\web\src\contexts\SupabaseAuthContext.tsx
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\lib\api.ts
================================================================================

export async function apiGet<T>(url: string, token: string): Promise<T> {
  const r = await fetch(url, { headers: { authorization: `Bearer ${token}` } });
  if (!r.ok) throw new Error(`${r.status}`);
  return r.json();
}
export async function apiPost<T>(url: string, body: unknown, token: string): Promise<T> {
  const r = await fetch(url, {
    method: "POST",
    headers: { authorization: `Bearer ${token}`, "content-type": "application/json" },
    body: JSON.stringify(body),
  });
  if (!r.ok && r.status !== 201) throw new Error(`${r.status}`);
  return r.status === 204 ? (undefined as T) : (await r.json());
}


================================================================================
END: D:\clientportal\apps\web\src\lib\api.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\lib\supabase.ts
================================================================================

// 🚫 LOCKED — Do not edit without RFC approval (QiEOS God Doc §12.2)
// This file contains working Supabase authentication configuration
// Last verified working: 2025-09-22 - Authentication is functional
import { createClient } from '@supabase/supabase-js';

// Supabase configuration with validation
const envSupabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const envSupabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

// Use environment variables if they're valid, otherwise use fallbacks
const supabaseUrl = (envSupabaseUrl && envSupabaseUrl.startsWith('http')) 
  ? envSupabaseUrl 
  : 'https://vwqkhjnkummwtvfxgqml.supabase.co';

const supabaseAnonKey = (envSupabaseAnonKey && envSupabaseAnonKey.length > 50) 
  ? envSupabaseAnonKey 
  : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ3cWtoam5rdW1td3R2ZnhncW1sIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYwMDMwNDksImV4cCI6MjA3MTU3OTA0OX0.Q1_W-sq8iKVPfJ2HfTS2hGNmK5jjzsy50cHszhB_6VQ';

// Debug logging (remove in production)
console.log('Supabase Config:', {
  envUrl: envSupabaseUrl,
  envKey: envSupabaseAnonKey ? `${envSupabaseAnonKey.substring(0, 20)}...` : 'undefined',
  finalUrl: supabaseUrl,
  finalKey: `${supabaseAnonKey.substring(0, 20)}...`
});

// 🔒 LOCK-START: Supabase client configuration — Working authentication setup
// Create Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});
// 🔓 LOCK-END

// Auth helper functions
export const auth = {
  // Sign in with email and password
  signIn: async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    return { data, error };
  },

  // Sign up with email and password
  signUp: async (email: string, password: string, userData?: { name?: string; role?: string; region?: string }) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: userData
      }
    });
    return { data, error };
  },

  // Sign in with magic link
  signInWithMagicLink: async (email: string) => {
    const { data, error } = await supabase.auth.signInWithOtp({
      email,
      options: {
        emailRedirectTo: `${window.location.origin}/auth/callback`
      }
    });
    return { data, error };
  },

  // Sign out
  signOut: async () => {
    const { error } = await supabase.auth.signOut();
    return { error };
  },

  // Get current user
  getCurrentUser: async () => {
    const { data: { user }, error } = await supabase.auth.getUser();
    return { user, error };
  },

  // Get current session
  getCurrentSession: async () => {
    const { data: { session }, error } = await supabase.auth.getSession();
    return { session, error };
  },

  // Listen to auth state changes
  onAuthStateChange: (callback: (event: string, session: any) => void) => {
    return supabase.auth.onAuthStateChange(callback);
  }
};

export default supabase;


================================================================================
END: D:\clientportal\apps\web\src\lib\supabase.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\services\api.ts
================================================================================

// 🚫 LOCKED — Do not edit without RFC approval (QiEOS God Doc §12.2)
// This file contains working API service configuration
// Last verified working: 2025-09-22 - API calls are functional
import axios, { AxiosResponse } from 'axios';
import { AuthResponse, ApiResponse, PaginatedResponse, User, Form, Submission } from '../types';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.qially.com';

// Create axios instance
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor to handle auth errors and token refresh
api.interceptors.response.use(
  (response) => {
    // If response includes a new token, update it
    if (response.data?.token) {
      localStorage.setItem('token', response.data.token);
    }
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        // Try to refresh the token
        const refreshResponse = await api.post('/auth/refresh');
        const { token } = refreshResponse.data;
        
        // Update the token and retry the original request
        localStorage.setItem('token', token);
        originalRequest.headers.Authorization = `Bearer ${token}`;
        
        return api(originalRequest);
      } catch (refreshError) {
        // Refresh failed, logout user
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }
    
    return Promise.reject(error);
  }
);

// Auth API
export const authAPI = {
  login: (email: string, password: string): Promise<AxiosResponse<AuthResponse>> =>
    api.post('/auth/login', { email, password }),
  
  // Temporary dev login for testing
  devLogin: (email: string = 'crice4485@gmail.com'): Promise<AxiosResponse<AuthResponse>> =>
    api.post('/auth/dev-login', { email }),
  
  // Magic link authentication
  requestMagicLink: (email: string): Promise<AxiosResponse<{ success: boolean; message: string; magicToken?: string; expiresIn: number }>> =>
    api.post('/auth/magic-link', { email }),
  
  verifyMagicLink: (magicToken: string): Promise<AxiosResponse<AuthResponse>> =>
    api.post('/auth/verify-magic-link', { magicToken }),
  
  register: (userData: {
    name: string;
    email: string;
    password: string;
    role?: string;
    region?: string;
  }): Promise<AxiosResponse<AuthResponse>> =>
    api.post('/auth/register', userData),
  
  getMe: (): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.get('/auth/me'),
  
  refreshToken: (): Promise<AxiosResponse<AuthResponse>> =>
    api.post('/auth/refresh'),
  
  updateProfile: (userData: { name?: string; email?: string }): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.put('/auth/profile', userData),
  
  changePassword: (passwords: { currentPassword: string; newPassword: string }): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.put('/auth/change-password', passwords),
};

// Forms API
export const formsAPI = {
  getForms: (params?: {
    page?: number;
    limit?: number;
    search?: string;
    isActive?: boolean;
  }): Promise<AxiosResponse<PaginatedResponse<Form>>> =>
    api.get('/forms', { params }),
  
  getForm: (id: string): Promise<AxiosResponse<ApiResponse<Form>>> =>
    api.get(`/forms/${id}`),
  
  getFormForSubmission: (id: string): Promise<AxiosResponse<ApiResponse<Form>>> =>
    api.get(`/forms/${id}/submit`),
  
  createForm: (formData: Partial<Form>): Promise<AxiosResponse<ApiResponse<Form>>> =>
    api.post('/forms', formData),
  
  updateForm: (id: string, formData: Partial<Form>): Promise<AxiosResponse<ApiResponse<Form>>> =>
    api.put(`/forms/${id}`, formData),
  
  deleteForm: (id: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.delete(`/forms/${id}`),
  
  getFormSubmissions: (id: string, params?: {
    page?: number;
    limit?: number;
    status?: string;
    assignedTo?: string;
  }): Promise<AxiosResponse<PaginatedResponse<Submission>>> =>
    api.get(`/forms/${id}/submissions`, { params }),
  
  getFormStats: (id: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.get(`/forms/${id}/stats`),
};

// Submissions API
export const submissionsAPI = {
  getSubmissions: (params?: {
    page?: number;
    limit?: number;
    status?: string;
    priority?: string;
    assignedTo?: string;
    formId?: string;
    search?: string;
    sortBy?: string;
    sortOrder?: string;
  }): Promise<AxiosResponse<PaginatedResponse<Submission>>> =>
    api.get('/submissions', { params }),
  
  getSubmission: (id: string): Promise<AxiosResponse<ApiResponse<Submission>>> =>
    api.get(`/submissions/${id}`),
  
  createSubmission: (submissionData: {
    formId: string;
    data: Record<string, any>;
    tags?: string[];
  }): Promise<AxiosResponse<ApiResponse<Submission>>> =>
    api.post('/submissions', submissionData),
  
  updateSubmission: (id: string, submissionData: Partial<Submission>): Promise<AxiosResponse<ApiResponse<Submission>>> =>
    api.put(`/submissions/${id}`, submissionData),
  
  deleteSubmission: (id: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.delete(`/submissions/${id}`),
  
  addNote: (id: string, note: { text: string }): Promise<AxiosResponse<ApiResponse<Submission>>> =>
    api.post(`/submissions/${id}/notes`, note),
  
  getStats: (period?: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.get('/submissions/stats/overview', { params: { period } }),
};

// Users API
export const usersAPI = {
  getUsers: (params?: {
    page?: number;
    limit?: number;
    search?: string;
    role?: string;
    region?: string;
    isActive?: boolean;
  }): Promise<AxiosResponse<PaginatedResponse<User>>> =>
    api.get('/users', { params }),
  
  getUser: (id: string): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.get(`/users/${id}`),
  
  createUser: (userData: {
    name: string;
    email: string;
    password: string;
    role: string;
    region?: string;
    permissions?: any;
  }): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.post('/users', userData),
  
  updateUser: (id: string, userData: Partial<User>): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.put(`/users/${id}`, userData),
  
  deleteUser: (id: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.delete(`/users/${id}`),
  
  updatePermissions: (id: string, permissions: any): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.put(`/users/${id}/permissions`, { permissions }),
  
  toggleActive: (id: string): Promise<AxiosResponse<ApiResponse<User>>> =>
    api.put(`/users/${id}/toggle-active`),
  
  getStats: (): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.get('/users/stats/overview'),
};

// Health check
export const healthAPI = {
  check: (): Promise<AxiosResponse<{ status: string; timestamp: string; region: string }>> =>
    api.get('/health'),
};

export default api;


================================================================================
END: D:\clientportal\apps\web\src\services\api.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\services\supabaseForms.ts
================================================================================

import { supabase } from '../lib/supabase';
import { Form, FormSettings } from '../types';

export interface SupabaseForm {
  id: string;
  org_id: string;
  owner_id: string;
  title: string;
  description?: string;
  schema_json: any;
  is_active: boolean;
  is_public: boolean;
  created_at: string;
  updated_at: string;
}

export interface FormsQueryParams {
  page?: number;
  limit?: number;
  search?: string;
  isActive?: boolean;
}

export interface PaginatedFormsResponse {
  data: Form[];
  total: number;
  pages: number;
  current: number;
}

const defaultFormSettings: FormSettings = {
  allowMultipleSubmissions: false,
  requireAuthentication: true,
  notificationEmail: '',
  autoResponse: {
    enabled: false,
    subject: '',
    message: '',
  },
};

// Convert Supabase form to our Form type
const convertSupabaseForm = (supabaseForm: SupabaseForm): Form => {
  return {
    _id: supabaseForm.id,
    title: supabaseForm.title,
    description: supabaseForm.description || '',
    fields: supabaseForm.schema_json?.fields || [],
    isActive: supabaseForm.is_active,
    isPublic: supabaseForm.is_public,
    createdBy: supabaseForm.owner_id || null,
    settings: {
      ...defaultFormSettings,
      ...(supabaseForm.schema_json?.settings || {}),
    },
    submissionCount: 0, // We'll need to fetch this separately
    createdAt: supabaseForm.created_at,
    updatedAt: supabaseForm.updated_at,
  };
};

export const supabaseFormsAPI = {
  // Get forms with pagination and filtering
  getForms: async (params?: FormsQueryParams): Promise<PaginatedFormsResponse> => {
    const { page = 1, limit = 10, search, isActive } = params || {};
    
    console.log('🔍 Fetching forms with params:', params);
    
    let query = supabase
      .from('forms')
      .select('*', { count: 'exact' });

    // Apply filters
    if (search) {
      query = query.or(`title.ilike.%${search}%,description.ilike.%${search}%`);
    }
    
    if (isActive !== undefined) {
      query = query.eq('is_active', isActive);
    }

    // Apply pagination
    const from = (page - 1) * limit;
    const to = from + limit - 1;
    query = query.range(from, to);

    // Order by created_at desc
    query = query.order('created_at', { ascending: false });

    console.log('🔍 Executing query...');
    const { data, error, count } = await query;

    console.log('🔍 Query result:', { data, error, count });

    if (error) {
      console.error('❌ Error fetching forms:', error);
      throw new Error(error.message);
    }

    const forms = (data || []).map(convertSupabaseForm);
    const total = count || 0;
    const pages = Math.ceil(total / limit);

    console.log('✅ Converted forms:', forms);

    return {
      data: forms,
      total,
      pages,
      current: page,
    };
  },

  // Get a single form by ID
  getForm: async (id: string): Promise<Form> => {
    const { data, error } = await supabase
      .from('forms')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('Error fetching form:', error);
      throw new Error(error.message);
    }

    return convertSupabaseForm(data);
  },

  // Get form for submission (public forms only)
  getFormForSubmission: async (id: string): Promise<Form> => {
    const { data, error } = await supabase
      .from('forms')
      .select('*')
      .eq('id', id)
      .eq('is_active', true)
      .eq('is_public', true)
      .single();

    if (error) {
      console.error('Error fetching form for submission:', error);
      throw new Error(error.message);
    }

    return convertSupabaseForm(data);
  },

  // Create a new form
  createForm: async (formData: Partial<Form>): Promise<Form> => {
    // Get current user
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    // Get user's org_id
    const { data: userProfile } = await supabase
      .from('users')
      .select('org_id')
      .eq('id', user.id)
      .single();

    if (!userProfile) {
      throw new Error('User profile not found');
    }

    const supabaseFormData = {
      org_id: userProfile.org_id,
      owner_id: user.id,
      title: formData.title || '',
      description: formData.description || '',
      schema_json: {
        fields: formData.fields || [],
        settings: formData.settings || defaultFormSettings
      },
      is_active: formData.isActive ?? true,
      is_public: formData.isPublic ?? false,
    };

    const { data, error } = await supabase
      .from('forms')
      .insert(supabaseFormData)
      .select()
      .single();

    if (error) {
      console.error('Error creating form:', error);
      throw new Error(error.message);
    }

    return convertSupabaseForm(data);
  },

  // Update a form
  updateForm: async (id: string, formData: Partial<Form>): Promise<Form> => {
    const updateData: any = {};

    if (formData.title !== undefined) updateData.title = formData.title;
    if (formData.description !== undefined) updateData.description = formData.description;
    if (formData.fields !== undefined || formData.settings !== undefined) {
      updateData.schema_json = {
        fields: formData.fields || [],
        settings: formData.settings || defaultFormSettings
      };
    }
    if (formData.isActive !== undefined) updateData.is_active = formData.isActive;
    if (formData.isPublic !== undefined) updateData.is_public = formData.isPublic;
    
    updateData.updated_at = new Date().toISOString();

    const { data, error } = await supabase
      .from('forms')
      .update(updateData)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('Error updating form:', error);
      throw new Error(error.message);
    }

    return convertSupabaseForm(data);
  },

  // Delete a form
  deleteForm: async (id: string): Promise<void> => {
    const { error } = await supabase
      .from('forms')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('Error deleting form:', error);
      throw new Error(error.message);
    }
  },

  // Get form submissions count
  getFormSubmissionsCount: async (formId: string): Promise<number> => {
    const { count, error } = await supabase
      .from('submissions')
      .select('*', { count: 'exact', head: true })
      .eq('form_id', formId);

    if (error) {
      console.error('Error fetching form submissions count:', error);
      return 0;
    }

    return count || 0;
  },
};


================================================================================
END: D:\clientportal\apps\web\src\services\supabaseForms.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\types\index.ts
================================================================================

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user' | 'viewer';
  region: 'us' | 'china' | 'global';
  permissions: {
    canCreateForms: boolean;
    canManageUsers: boolean;
    canViewAllSubmissions: boolean;
    canEditSubmissions: boolean;
  };
  isActive: boolean;
  lastLogin?: string;
  createdAt: string;
}

export interface FormSettings {
  allowMultipleSubmissions?: boolean;
  requireAuthentication?: boolean;
  notificationEmail?: string;
  autoResponse?: {
    enabled?: boolean;
    subject?: string;
    message?: string;
  };
  [key: string]: unknown; // Allow additional settings
}

export interface Form {
  _id: string;
  title: string;
  description?: string;
  fields: FormField[];
  isActive: boolean;
  isPublic: boolean;
  createdBy: string | null;
  settings: FormSettings;
  submissionCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'email' | 'number' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'date' | 'file';
  required: boolean;
  options?: string[];
  placeholder?: string;
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
  };
}

export interface Submission {
  _id: string;
  formId: string | { _id: string; title: string; fields?: any[] };
  submittedBy?: User;
  data: Record<string, any>;
  status: 'pending' | 'in-progress' | 'completed' | 'rejected' | 'on-hold';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  assignedTo?: User;
  notes: Note[];
  attachments: Attachment[];
  metadata: {
    ipAddress?: string;
    userAgent?: string;
    region?: string;
    referrer?: string;
  };
  lastUpdatedBy?: User;
  dueDate?: string;
  tags: string[];
  createdAt: string;
  updatedAt: string;
  submissionNumber: string;
}

export interface Note {
  text: string;
  addedBy: User;
  addedAt: string;
}

export interface Attachment {
  filename: string;
  originalName: string;
  mimetype: string;
  size: number;
  url: string;
  uploadedAt: string;
}

export interface AuthResponse {
  success: boolean;
  token: string;
  user: User;
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  token?: string; // For auth responses that include refreshed tokens
  message?: string;
  errors?: any[];
  count?: number;
  total?: number;
  pages?: number;
  current?: number;
}

export interface PaginatedResponse<T> {
  success: boolean;
  count: number;
  total: number;
  pages: number;
  current: number;
  data: T[];
}


================================================================================
END: D:\clientportal\apps\web\src\types\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\apps\web\src\utils\requestCache.ts
================================================================================

// Simple request cache utility to prevent duplicate API calls
interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number; // Time to live in milliseconds
}

class RequestCache {
  private cache = new Map<string, CacheEntry<any>>();
  private readonly defaultTTL = 5 * 60 * 1000; // 5 minutes

  set<T>(key: string, data: T, ttl: number = this.defaultTTL): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl,
    });
  }

  get<T>(key: string): T | null {
    const entry = this.cache.get(key);
    
    if (!entry) {
      return null;
    }

    // Check if entry has expired
    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return null;
    }

    return entry.data as T;
  }

  has(key: string): boolean {
    const entry = this.cache.get(key);
    
    if (!entry) {
      return false;
    }

    // Check if entry has expired
    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return false;
    }

    return true;
  }

  delete(key: string): void {
    this.cache.delete(key);
  }

  clear(): void {
    this.cache.clear();
  }

  // Generate cache key from parameters
  generateKey(prefix: string, params: Record<string, any> = {}): string {
    const sortedParams = Object.keys(params)
      .sort()
      .map(key => `${key}=${params[key]}`)
      .join('&');
    
    return sortedParams ? `${prefix}?${sortedParams}` : prefix;
  }
}

// Export singleton instance
export const requestCache = new RequestCache();

// Helper function to wrap API calls with caching
export async function withCache<T>(
  key: string,
  apiCall: () => Promise<T>,
  ttl?: number
): Promise<T> {
  // Check cache first
  const cached = requestCache.get<T>(key);
  if (cached !== null) {
    return cached;
  }

  // Make API call
  const result = await apiCall();
  
  // Cache the result
  requestCache.set(key, result, ttl);
  
  return result;
}


================================================================================
END: D:\clientportal\apps\web\src\utils\requestCache.ts
================================================================================


================================================================================
FILE: D:\clientportal\docs\env.md
================================================================================

# Environment Configuration

## JWT claims required by Worker

```json
{
  "iss": "clientportal",
  "sub": "<user uuid>",
  "org_id": "<org uuid>",
  "role": "admin|internal|external",
  "company_ids": ["<uuid>", "..."]
}
```


================================================================================
END: D:\clientportal\docs\env.md
================================================================================


================================================================================
FILE: D:\clientportal\docs\LOCKED_FILES.md
================================================================================

# Locked Files Documentation

This document lists all files and sections that are locked to prevent accidental edits to working code.

## 🚫 File-Level Locks

### Frontend (React App)
- **`apps/web/src/lib/supabase.ts`** - Supabase client configuration
  - **Reason**: Contains working authentication setup with proper environment variable validation
  - **Last Verified**: 2025-09-22 - Authentication is functional
  - **Lock Type**: File-level lock (first line)

- **`apps/web/src/services/api.ts`** - API service configuration
  - **Reason**: Contains working API service with correct base URL configuration
  - **Last Verified**: 2025-09-22 - API calls are functional
  - **Lock Type**: File-level lock (first line)

### Backend (Cloudflare Workers)
- **`workers/api/src/index.ts`** - Main API server configuration
  - **Reason**: Contains working CORS configuration and server setup
  - **Last Verified**: 2025-09-22 - API server is functional
  - **Lock Type**: File-level lock (first line)

- **`workers/api/src/routes/auth.ts`** - Authentication routes
  - **Reason**: Contains working Supabase Auth integration
  - **Last Verified**: 2025-09-22 - Authentication is functional
  - **Lock Type**: File-level lock (first line)

- **`workers/api/wrangler.toml`** - Cloudflare Workers configuration
  - **Reason**: Contains working deployment configuration
  - **Last Verified**: 2025-09-22 - Deployment is functional
  - **Lock Type**: File-level lock (first line)

## 🔒 Section-Level Locks

### Supabase Client Configuration
- **File**: `apps/web/src/lib/supabase.ts`
- **Section**: Supabase client creation (lines 27-37)
- **Reason**: Working authentication client setup
- **Lock Type**: Section lock with LOCK-START/LOCK-END markers

### CORS Configuration
- **File**: `workers/api/src/index.ts`
- **Section**: CORS allowed origins (lines 26-34)
- **Reason**: Working cross-origin configuration for production domains
- **Lock Type**: Section lock with LOCK-START/LOCK-END markers

## 🔓 How to Unlock

To edit any locked file or section, you must:

1. **Create an RFC** (Request for Comments) explaining:
   - What changes are needed
   - Why the current implementation is insufficient
   - How the changes will be tested
   - Rollback plan if changes break functionality

2. **Get explicit approval** from the project maintainer

3. **Remove the lock** by deleting the lock comment

4. **Make the changes** with thorough testing

5. **Re-lock** the file/section after verification

## 🚨 Emergency Override

In case of critical security issues or production emergencies:

1. Document the emergency in `docs/devlog.md`
2. Make the minimal necessary changes
3. Test thoroughly
4. Re-lock immediately after verification
5. Create a post-incident RFC for permanent changes

## 📝 Lock Maintenance

- **Review locks monthly** to ensure they're still necessary
- **Update "Last Verified" dates** when testing locked functionality
- **Document any temporary unlocks** in `docs/devlog.md`
- **Remove locks** for files that are no longer critical

## 🎯 Lock Philosophy

Locks are used to protect:
- ✅ **Working authentication flows**
- ✅ **Production deployment configurations**
- ✅ **Critical API endpoints**
- ✅ **Environment variable handling**

Locks are NOT used for:
- ❌ **UI/UX improvements**
- ❌ **Feature additions**
- ❌ **Documentation updates**
- ❌ **Test files**

---

**Remember**: The goal is to prevent accidental breaking of working functionality, not to prevent all changes. When in doubt, create an RFC and get approval.


================================================================================
END: D:\clientportal\docs\LOCKED_FILES.md
================================================================================


================================================================================
FILE: D:\clientportal\infra\supabase\migrations\001_initial_schema.sql
================================================================================

-- Initial schema setup for clientportal
-- This migration creates the complete database schema with organizations, users, forms, and submissions
-- Includes RLS policies and proper indexing

-- Enable required extensions
create extension if not exists pgcrypto;

-- Create organizations table
create table if not exists public.organizations (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  slug text unique not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Update users table to include org_id and additional fields
alter table public.users 
add column if not exists org_id uuid references public.organizations(id),
add column if not exists name text,
add column if not exists role text default 'user',
add column if not exists region text default 'global',
add column if not exists is_active boolean default true,
add column if not exists last_login timestamptz,
add column if not exists updated_at timestamptz default now();

-- Create forms table
drop table if exists public.forms cascade;
create table public.forms (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  owner_id uuid not null references public.users(id) on delete cascade,
  title text not null,
  description text,
  schema_json jsonb not null default '{}'::jsonb,
  is_active boolean default true,
  is_public boolean default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create submissions table
drop table if exists public.submissions cascade;
create table public.submissions (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  form_id uuid not null references public.forms(id) on delete cascade,
  submitter_id uuid references public.users(id) on delete set null,
  data_json jsonb not null default '{}'::jsonb,
  status text default 'pending',
  priority text default 'medium',
  notes text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create indexes for performance
create index if not exists idx_users_org_id on public.users(org_id);
create index if not exists idx_users_email on public.users(email);
create index if not exists idx_forms_org_id on public.forms(org_id);
create index if not exists idx_forms_owner_id on public.forms(owner_id);
create index if not exists idx_forms_is_active on public.forms(is_active);
create index if not exists idx_submissions_org_id on public.submissions(org_id);
create index if not exists idx_submissions_form_id on public.submissions(form_id);
create index if not exists idx_submissions_submitter_id on public.submissions(submitter_id);
create index if not exists idx_submissions_status on public.submissions(status);

-- Enable Row Level Security
alter table public.organizations enable row level security;
alter table public.forms enable row level security;
alter table public.submissions enable row level security;

-- Helper functions for JWT claims
create or replace function public.jwt_org_id() returns uuid
language sql stable as $$ 
  select nullif(current_setting('request.jwt.claims', true)::json->>'org_id', '')::uuid 
$$;

create or replace function public.jwt_uid() returns uuid
language sql stable as $$ 
  select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::uuid 
$$;

-- RLS Policies for organizations
drop policy if exists "Users can read their own organization" on public.organizations;
create policy "Users can read their own organization" on public.organizations
  for select using (id = (select org_id from public.users where id = auth.uid()));

-- RLS Policies for forms
drop policy if exists "forms_tenant_read" on public.forms;
create policy "forms_tenant_read" on public.forms
  for select using (org_id = (select org_id from public.users where id = auth.uid()));

drop policy if exists "forms_owner_write" on public.forms;
create policy "forms_owner_write" on public.forms
  for insert with check (
    org_id = (select org_id from public.users where id = auth.uid()) 
    and owner_id = auth.uid()
  );

drop policy if exists "forms_owner_update" on public.forms;
create policy "forms_owner_update" on public.forms
  for update using (
    org_id = (select org_id from public.users where id = auth.uid()) 
    and owner_id = auth.uid()
  );

drop policy if exists "forms_owner_delete" on public.forms;
create policy "forms_owner_delete" on public.forms
  for delete using (
    org_id = (select org_id from public.users where id = auth.uid()) 
    and owner_id = auth.uid()
  );

-- RLS Policies for submissions
drop policy if exists "subs_tenant_read" on public.submissions;
create policy "subs_tenant_read" on public.submissions
  for select using (org_id = (select org_id from public.users where id = auth.uid()));

drop policy if exists "subs_tenant_write" on public.submissions;
create policy "subs_tenant_write" on public.submissions
  for insert with check (org_id = (select org_id from public.users where id = auth.uid()));

drop policy if exists "subs_tenant_update" on public.submissions;
create policy "subs_tenant_update" on public.submissions
  for update using (org_id = (select org_id from public.users where id = auth.uid()));

-- Create default organization
insert into public.organizations (id, name, slug) 
values ('00000000-0000-0000-0000-000000000001', 'Default Organization', 'default-org')
on conflict (id) do nothing;


================================================================================
END: D:\clientportal\infra\supabase\migrations\001_initial_schema.sql
================================================================================


================================================================================
FILE: D:\clientportal\infra\supabase\migrations\050_forms_submissions.sql
================================================================================

-- forms + submissions with org RLS
create table if not exists public.forms (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null,
  owner_id uuid not null,
  title text not null,
  schema_json jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now()
);

create table if not exists public.submissions (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null,
  form_id uuid not null references public.forms(id) on delete cascade,
  submitter_id uuid,
  data_json jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now()
);

alter table public.forms enable row level security;
alter table public.submissions enable row level security;

-- helpers
create or replace function public.jwt_org_id() returns uuid
language sql stable as $$ select nullif(current_setting('request.jwt.claims', true)::json->>'org_id','')::uuid $$;

create or replace function public.jwt_uid() returns uuid
language sql stable as $$ select nullif(current_setting('request.jwt.claims', true)::json->>'sub','')::uuid $$;

-- RLS policies
drop policy if exists forms_tenant_read on public.forms;
create policy forms_tenant_read on public.forms
for select using (org_id = jwt_org_id());

drop policy if exists forms_owner_write on public.forms;
create policy forms_owner_write on public.forms
for insert with check (org_id = jwt_org_id() and owner_id = jwt_uid())
;

drop policy if exists forms_owner_update on public.forms;
create policy forms_owner_update on public.forms
for update using (owner_id = jwt_uid() and org_id = jwt_org_id())
;

drop policy if exists subs_tenant_read on public.submissions;
create policy subs_tenant_read on public.submissions
for select using (org_id = jwt_org_id());

drop policy if exists subs_tenant_write on public.submissions;
create policy subs_tenant_write on public.submissions
for insert with check (org_id = jwt_org_id());


================================================================================
END: D:\clientportal\infra\supabase\migrations\050_forms_submissions.sql
================================================================================


================================================================================
FILE: D:\clientportal\infra\supabase\seeds\001_initial_data.sql
================================================================================

-- Initial seed data for clientportal
-- This file contains the default organization and admin user setup

-- Create default organization (idempotent)
insert into public.organizations (id, name, slug) 
values ('00000000-0000-0000-0000-000000000001', 'Default Organization', 'default-org')
on conflict (id) do nothing;

-- Create admin user (idempotent)
-- Note: This user will be created through Supabase Auth, but we need the profile record
insert into public.users (
  id,
  name, 
  email, 
  role, 
  region, 
  is_active, 
  org_id
)
values (
  '00000000-0000-0000-0000-000000000001', -- This should match the Supabase Auth user ID
  'Admin User',
  'admin@example.com',
  'admin',
  'global',
  true,
  '00000000-0000-0000-0000-000000000001'
)
on conflict (email) do update set
  name = excluded.name,
  role = excluded.role,
  region = excluded.region,
  is_active = excluded.is_active,
  org_id = excluded.org_id,
  updated_at = now();

-- Create a sample form for testing
insert into public.forms (
  id,
  org_id,
  owner_id,
  title,
  description,
  schema_json,
  is_active,
  is_public
)
values (
  '00000000-0000-0000-0000-000000000002',
  '00000000-0000-0000-0000-000000000001',
  '00000000-0000-0000-0000-000000000001',
  'Sample Contact Form',
  'A simple contact form for testing purposes',
  '{
    "fields": [
      {
        "name": "name",
        "label": "Full Name",
        "type": "text",
        "required": true
      },
      {
        "name": "email",
        "label": "Email Address",
        "type": "email",
        "required": true
      },
      {
        "name": "message",
        "label": "Message",
        "type": "textarea",
        "required": true
      }
    ]
  }'::jsonb,
  true,
  true
)
on conflict (id) do nothing;


================================================================================
END: D:\clientportal\infra\supabase\seeds\001_initial_data.sql
================================================================================


================================================================================
FILE: D:\clientportal\infra\supabase\seeds\010_seed_org_admin.sql
================================================================================

-- demo org + admin (replace emails later)
insert into public.organizations(id, name)
values (gen_random_uuid(), 'QiAlly Demo')
on conflict do nothing;

-- pick the org id we just created
with o as (
  select id from public.organizations order by created_at desc limit 1
)
insert into public.users(id, email, name, role, is_active)
select gen_random_uuid(), 'crice4485@gmail.com', 'Chris Rice', 'admin', true
where not exists (select 1 from public.users where email='crice4485@gmail.com');

-- attach membership + role
with o as (select id from public.organizations order by created_at desc limit 1),
     u as (select id from public.users where email='crice4485@gmail.com' limit 1)
insert into public.memberships(user_id, org_id, role)
select u.id, o.id, 'admin' from u,o
on conflict do nothing;


================================================================================
END: D:\clientportal\infra\supabase\seeds\010_seed_org_admin.sql
================================================================================


================================================================================
FILE: D:\clientportal\migrations\001_update_schema_with_org_rls.sql
================================================================================

-- Migration: Update schema with org_id and RLS policies
-- Apply this in Supabase SQL Editor

-- Update users table to include org_id
ALTER TABLE public.users 
ADD COLUMN IF NOT EXISTS org_id UUID DEFAULT gen_random_uuid();

-- Create organizations table
CREATE TABLE IF NOT EXISTS public.organizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Update forms table with new schema
DROP TABLE IF EXISTS public.forms CASCADE;
CREATE TABLE public.forms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  owner_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  schema_json JSONB NOT NULL DEFAULT '{}'::jsonb,
  is_active BOOLEAN DEFAULT true,
  is_public BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Update submissions table with new schema
DROP TABLE IF EXISTS public.submissions CASCADE;
CREATE TABLE public.submissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  form_id UUID NOT NULL REFERENCES public.forms(id) ON DELETE CASCADE,
  submitter_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
  data_json JSONB NOT NULL DEFAULT '{}'::jsonb,
  status TEXT DEFAULT 'pending',
  priority TEXT DEFAULT 'medium',
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_org_id ON public.users(org_id);
CREATE INDEX IF NOT EXISTS idx_forms_org_id ON public.forms(org_id);
CREATE INDEX IF NOT EXISTS idx_forms_owner_id ON public.forms(owner_id);
CREATE INDEX IF NOT EXISTS idx_submissions_org_id ON public.submissions(org_id);
CREATE INDEX IF NOT EXISTS idx_submissions_form_id ON public.submissions(form_id);
CREATE INDEX IF NOT EXISTS idx_submissions_submitter_id ON public.submissions(submitter_id);

-- Enable RLS
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.submissions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for organizations
CREATE POLICY "Users can read their own organization" ON public.organizations
  FOR SELECT USING (id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

-- RLS Policies for forms
CREATE POLICY "forms_tenant_read" ON public.forms
  FOR SELECT USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "forms_owner_write" ON public.forms
  FOR INSERT WITH CHECK (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

CREATE POLICY "forms_owner_update" ON public.forms
  FOR UPDATE USING (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

CREATE POLICY "forms_owner_delete" ON public.forms
  FOR DELETE USING (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

-- RLS Policies for submissions
CREATE POLICY "subs_tenant_read" ON public.submissions
  FOR SELECT USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "subs_tenant_write" ON public.submissions
  FOR INSERT WITH CHECK (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "subs_tenant_update" ON public.submissions
  FOR UPDATE USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

-- Create default organization and update admin user
INSERT INTO public.organizations (id, name, slug) 
VALUES ('00000000-0000-0000-0000-000000000001', 'Default Organization', 'default-org')
ON CONFLICT (id) DO NOTHING;

-- Update admin user to belong to default org
UPDATE public.users 
SET org_id = '00000000-0000-0000-0000-000000000001'
WHERE email = 'admin@example.com' AND org_id IS NULL;


================================================================================
END: D:\clientportal\migrations\001_update_schema_with_org_rls.sql
================================================================================


================================================================================
FILE: D:\clientportal\migrations\002_complete_seed.sql
================================================================================

-- Complete migration + seed script
-- Apply this in Supabase SQL Editor

-- ==============================================
-- 1. MIGRATION: Update schema with org_id and RLS
-- ==============================================

-- Update users table to include org_id
ALTER TABLE public.users 
ADD COLUMN IF NOT EXISTS org_id UUID DEFAULT gen_random_uuid();

-- Create organizations table
CREATE TABLE IF NOT EXISTS public.organizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Update forms table with new schema
DROP TABLE IF EXISTS public.forms CASCADE;
CREATE TABLE public.forms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  owner_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  schema_json JSONB NOT NULL DEFAULT '{}'::jsonb,
  is_active BOOLEAN DEFAULT true,
  is_public BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Update submissions table with new schema
DROP TABLE IF EXISTS public.submissions CASCADE;
CREATE TABLE public.submissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  org_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  form_id UUID NOT NULL REFERENCES public.forms(id) ON DELETE CASCADE,
  submitter_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
  data_json JSONB NOT NULL DEFAULT '{}'::jsonb,
  status TEXT DEFAULT 'pending',
  priority TEXT DEFAULT 'medium',
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_org_id ON public.users(org_id);
CREATE INDEX IF NOT EXISTS idx_forms_org_id ON public.forms(org_id);
CREATE INDEX IF NOT EXISTS idx_forms_owner_id ON public.forms(owner_id);
CREATE INDEX IF NOT EXISTS idx_submissions_org_id ON public.submissions(org_id);
CREATE INDEX IF NOT EXISTS idx_submissions_form_id ON public.submissions(form_id);
CREATE INDEX IF NOT EXISTS idx_submissions_submitter_id ON public.submissions(submitter_id);

-- Enable RLS
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.submissions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for organizations
CREATE POLICY "Users can read their own organization" ON public.organizations
  FOR SELECT USING (id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

-- RLS Policies for forms
CREATE POLICY "forms_tenant_read" ON public.forms
  FOR SELECT USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "forms_owner_write" ON public.forms
  FOR INSERT WITH CHECK (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

CREATE POLICY "forms_owner_update" ON public.forms
  FOR UPDATE USING (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

CREATE POLICY "forms_owner_delete" ON public.forms
  FOR DELETE USING (
    org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()) 
    AND owner_id = auth.uid()
  );

-- RLS Policies for submissions
CREATE POLICY "subs_tenant_read" ON public.submissions
  FOR SELECT USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "subs_tenant_write" ON public.submissions
  FOR INSERT WITH CHECK (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

CREATE POLICY "subs_tenant_update" ON public.submissions
  FOR UPDATE USING (org_id = (SELECT org_id FROM public.users WHERE id = auth.uid()));

-- ==============================================
-- 2. SEED: Create default organization and admin user
-- ==============================================

-- Create default organization
INSERT INTO public.organizations (id, name, slug) 
VALUES ('00000000-0000-0000-0000-000000000001', 'Default Organization', 'default-org')
ON CONFLICT (id) DO NOTHING;

-- Update existing admin user to belong to default org
UPDATE public.users 
SET org_id = '00000000-0000-0000-0000-000000000001'
WHERE email = 'crice4485@gmail.com' AND org_id IS NULL;

-- If no admin user exists, create one
INSERT INTO public.users (name, email, password, role, region, is_active, permissions, org_id)
VALUES (
  'Chris Rice',
  'crice4485@gmail.com',
  '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', -- password: 'password'
  'admin',
  'global',
  true,
  '{"canCreateForms": true, "canManageUsers": true, "canViewAllSubmissions": true, "canEditSubmissions": true}',
  '00000000-0000-0000-0000-000000000001'
)
ON CONFLICT (email) DO NOTHING;

-- ==============================================
-- 3. VERIFICATION: Test RLS policies
-- ==============================================

-- Test that anon key cannot read cross-org data
-- (This will be verified after deployment)

-- Show current setup
SELECT 
  'Organizations' as table_name,
  COUNT(*) as count
FROM public.organizations
UNION ALL
SELECT 
  'Users' as table_name,
  COUNT(*) as count
FROM public.users
UNION ALL
SELECT 
  'Forms' as table_name,
  COUNT(*) as count
FROM public.forms
UNION ALL
SELECT 
  'Submissions' as table_name,
  COUNT(*) as count
FROM public.submissions;

-- Show admin user details
SELECT 
  u.id,
  u.name,
  u.email,
  u.role,
  u.org_id,
  o.name as org_name
FROM public.users u
JOIN public.organizations o ON u.org_id = o.id
WHERE u.email = 'crice4485@gmail.com';


================================================================================
END: D:\clientportal\migrations\002_complete_seed.sql
================================================================================


================================================================================
FILE: D:\clientportal\migrations\003_final_migration.sql
================================================================================

-- orgs + forms + submissions + RLS (safe to re-run)
create extension if not exists pgcrypto;

create table if not exists public.organizations(
  id uuid primary key default gen_random_uuid(),
  name text not null,
  slug text unique not null,
  created_at timestamptz default now()
);
alter table public.organizations enable row level security;

create table if not exists public.users(
  id uuid primary key default gen_random_uuid(),
  email text unique,
  org_id uuid references public.organizations(id),
  created_at timestamptz default now()
);

drop table if exists public.forms cascade;
create table public.forms(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  owner_id uuid not null references public.users(id) on delete cascade,
  title text not null,
  schema_json jsonb not null default '{}'::jsonb,
  created_at timestamptz default now()
);
alter table public.forms enable row level security;

drop table if exists public.submissions cascade;
create table public.submissions(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  form_id uuid not null references public.forms(id) on delete cascade,
  submitter_id uuid references public.users(id) on delete set null,
  data_json jsonb not null default '{}'::jsonb,
  created_at timestamptz default now()
);
alter table public.submissions enable row level security;

-- helpers for claims
create or replace function public.jwt_org_id() returns uuid
language sql stable as $$ select nullif(current_setting('request.jwt.claims',true)::json->>'org_id','')::uuid $$;
create or replace function public.jwt_uid() returns uuid
language sql stable as $$ select nullif(current_setting('request.jwt.claims',true)::json->>'sub','')::uuid $$;

-- RLS
drop policy if exists forms_select on public.forms;
create policy forms_select on public.forms for select using (org_id = jwt_org_id());

drop policy if exists forms_insert on public.forms;
create policy forms_insert on public.forms for insert with check (org_id = jwt_org_id() and owner_id = jwt_uid());

drop policy if exists forms_update on public.forms;
create policy forms_update on public.forms for update using (owner_id = jwt_uid() and org_id = jwt_org_id());

drop policy if exists subs_select on public.submissions;
create policy subs_select on public.submissions for select using (org_id = jwt_org_id());

drop policy if exists subs_insert on public.submissions;
create policy subs_insert on public.submissions for insert with check (org_id = jwt_org_id());

-- seed default org + admin (idempotent)
insert into public.organizations(name, slug)
values ('QiAlly Default','qially-default')
on conflict (slug) do nothing;

with o as (select id from public.organizations where slug='qially-default')
insert into public.users(email, org_id)
select 'admin@example.com', o.id from o
on conflict (email) do nothing;


================================================================================
END: D:\clientportal\migrations\003_final_migration.sql
================================================================================


================================================================================
FILE: D:\clientportal\migrations\004_clients_table_and_policy.sql
================================================================================

-- Migration: Create clients table and update INSERT policy
-- Apply this in Supabase SQL Editor

-- Create clients table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.clients (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  email TEXT,
  org_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Enable RLS on clients table
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;

-- Create profiles table if it doesn't exist (needed for the policy)
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  role TEXT DEFAULT 'user',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Enable RLS on profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Drop existing policy if it exists
DROP POLICY IF EXISTS "Admins and staff can create clients" ON public.clients;

-- Create the new INSERT policy with wrapped auth.uid()
CREATE POLICY "Admins and staff can create clients" ON public.clients 
FOR INSERT TO authenticated 
WITH CHECK ( 
  (SELECT profiles.role FROM profiles WHERE (profiles.id = (SELECT auth.uid())) ) = ANY (ARRAY['admin'::text, 'staff'::text]) 
);

-- Create index for performance
CREATE INDEX IF NOT EXISTS idx_clients_org_id ON public.clients(org_id);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON public.profiles(role);


================================================================================
END: D:\clientportal\migrations\004_clients_table_and_policy.sql
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\package.json
================================================================================

{
  "name": "client-portal-api",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "wrangler dev",
    "build:worker": "tsc",
    "build": "npm run build:worker",
    "deploy": "wrangler deploy",
    "deploy:fast": "wrangler deploy --compatibility-date=2025-09-10",
    "check": "tsc --noEmit",
    "test:auth": "node test-auth-flow.js",
    "deploy:safe": "npm run check && npm run test:auth && npm run deploy",
    "deploy:safe:fast": "npm run check && npm run test:auth && npm run deploy:fast"
  },
  "devDependencies": {
    "@cloudflare/workers-types": "^4.20250922.0",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "@hono/zod-validator": "^0.7.3",
    "@supabase/supabase-js": "^2.57.4",
    "hono": "^4.9.8",
    "jose": "^6.1.0",
    "zod": "^4.1.11"
  }
}


================================================================================
END: D:\clientportal\workers\api\package.json
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\ROUTE_LOCK.md
================================================================================

# 🔒 Route Lock System

## Purpose

This system prevents authentication regressions by automatically testing the complete auth flow before deployment.

## Usage

### Safe Deployment (Recommended)
```bash
npm run deploy:safe
```

This runs:
1. `npm run check` - TypeScript compilation
2. `npm run test:auth` - Authentication flow test  
3. `npm run deploy` - Actual deployment

### Manual Testing
```bash
npm run test:auth
```

## What Gets Tested

1. **Dev-login endpoint** - `/api/auth/dev-login`
2. **User profile endpoint** - `/api/auth/me` 
3. **Forms access** - `/api/forms`
4. **Token refresh** - `/api/auth/refresh`

## Test Failure

If any test fails, deployment is **blocked** with:
```
❌ Authentication test failed
🚨 ROUTE LOCK FAILED - DO NOT DEPLOY
```

## Adding New Tests

To add new authentication tests, edit `test-auth-flow.js` and add your test steps.

## Emergency Override

If you need to deploy despite test failures (emergency only):
```bash
npm run deploy  # Skip tests
```

⚠️ **Only use this in emergencies - fix the tests ASAP**

## Lock Status

✅ **LOCKED** - Authentication routes are protected and tested


================================================================================
END: D:\clientportal\workers\api\ROUTE_LOCK.md
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\tsconfig.json
================================================================================

{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["@cloudflare/workers-types"],
    "skipLibCheck": true
  },
  "include": ["src"]
}


================================================================================
END: D:\clientportal\workers\api\tsconfig.json
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\wrangler.toml
================================================================================

# 🚫 LOCKED — Do not edit without RFC approval (QiEOS God Doc §12.2)
# This file contains working Cloudflare Workers configuration
# Last verified working: 2025-09-22 - Deployment is functional
name = "clientportal-api"
main = "src/index.ts"
compatibility_date = "2025-09-10"
compatibility_flags = ["nodejs_compat"]

[vars]
JWT_ISSUER = "clientportal"

[observability]
enabled = true
head_sampling_rate = 1

# Build configuration
[build]
command = "npm run build:worker"
cwd = "."

# set with: wrangler secret put SUPABASE_URL / SUPABASE_SERVICE_ROLE_KEY


================================================================================
END: D:\clientportal\workers\api\wrangler.toml
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\index.js
================================================================================

import { Hono } from "hono";
import { cors, rateLimit, requestId, timing } from "./middleware/common";
import { health } from "./routes/health";
import { auth } from "./routes/auth";
import { forms } from "./routes/forms";
import { submissions } from "./routes/submissions";
const app = new Hono();
const allow = [
    "http://localhost:3000",
    "http://localhost:5173",
    "https://dd30c420.clientportal-3pk.pages.dev",
    "https://portal.qially.com",
    "https://api.qially.com"
];
app.use("*", requestId);
app.use("*", timing);
app.use("*", cors(allow));
app.use("*", rateLimit(120, 60));
app.route("/", health);
app.route("/", auth);
app.route("/", forms);
app.route("/", submissions);
export default app;


================================================================================
END: D:\clientportal\workers\api\src\index.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\index.ts
================================================================================

// 🚫 LOCKED — Do not edit without RFC approval (QiEOS God Doc §12.2)
// This file contains working API server configuration with CORS
// Last verified working: 2025-09-22 - API server is functional
import { Hono } from "hono";
import { cors, rateLimit, requestId, timing } from "./middleware/common";
import { health } from "./routes/health";
import { auth } from "./routes/auth";
import { forms } from "./routes/forms";
import { submissions } from "./routes/submissions";
import type { Claims } from "./types";

export type Bindings = {
  SUPABASE_URL: string;
  SUPABASE_SERVICE_ROLE_KEY: string;
  JWT_ISSUER: string;
  JWT_HS256_SECRET: string;
};

export type Variables = {
  claims: Claims;
  reqId: string;
};

const app = new Hono<{ Bindings: Bindings; Variables: Variables }>();

// 🔒 LOCK-START: CORS configuration — Working cross-origin setup
const allow = [
  "http://localhost:3000",
  "http://localhost:5173", 
  "https://dd30c420.clientportal-3pk.pages.dev",
  "https://portal.qially.com",
  "https://api.qially.com"
];
// 🔓 LOCK-END

app.use("*", requestId);
app.use("*", timing);
app.use("*", cors(allow));
app.use("*", rateLimit(120, 60));

app.route("/", health);
app.route("/", auth);
app.route("/", forms);
app.route("/", submissions);

export default app;


================================================================================
END: D:\clientportal\workers\api\src\index.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\types.js
================================================================================

import { z } from "zod";
export const FormCreate = z.object({
    title: z.string().min(1),
    schema: z.object({ fields: z.array(z.record(z.string(), z.any())) }).default({ fields: [] }),
});
export const SubmissionCreate = z.object({
    form_id: z.string().uuid(),
    data: z.record(z.string(), z.any()),
});


================================================================================
END: D:\clientportal\workers\api\src\types.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\types.ts
================================================================================

import { z } from "zod";

export const FormCreate = z.object({
  title: z.string().min(1),
  schema: z.object({ fields: z.array(z.record(z.string(), z.any())) }).default({ fields: [] }),
});

export type FormCreateT = z.infer<typeof FormCreate>;

export const SubmissionCreate = z.object({
  form_id: z.string().uuid(),
  data: z.record(z.string(), z.any()),
});
export type SubmissionCreateT = z.infer<typeof SubmissionCreate>;

export type Claims = {
  iss?: string;
  sub: string;
  email?: string;
  org_id: string;
  role?: string;
  company_ids?: string[];
};


================================================================================
END: D:\clientportal\workers\api\src\types.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\lib\supabaseAdmin.js
================================================================================

import { createClient } from "@supabase/supabase-js";
export function supabaseAdmin(env) {
    const url = env.SUPABASE_URL;
    const key = env.SUPABASE_SERVICE_ROLE_KEY;
    return createClient(url, key, { auth: { persistSession: true } });
}


================================================================================
END: D:\clientportal\workers\api\src\lib\supabaseAdmin.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\lib\supabaseAdmin.ts
================================================================================

import { createClient } from "@supabase/supabase-js";

export function supabaseAdmin(env: Env) {
  const url = env.SUPABASE_URL;
  const key = env.SUPABASE_SERVICE_ROLE_KEY;
  return createClient(url, key, { auth: { persistSession: true } });
}

export type Env = {
  SUPABASE_URL: string;
  SUPABASE_SERVICE_ROLE_KEY: string;
  JWT_ISSUER: string;
};


================================================================================
END: D:\clientportal\workers\api\src\lib\supabaseAdmin.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\middleware\auth.js
================================================================================

import { supabaseAdmin } from "../lib/supabaseAdmin";
export const requireAuth = async (c, next) => {
    const auth = c.req.header("authorization") || "";
    const token = auth.startsWith("Bearer ") ? auth.slice(7) : "";
    if (!token)
        return c.json({ error: "missing token" }, 401);
    try {
        const sb = supabaseAdmin(c.env);
        // Verify the Supabase JWT token
        const { data: { user }, error } = await sb.auth.getUser(token);
        if (error || !user) {
            return c.json({ error: "invalid token" }, 401);
        }
        // Get user profile to extract org_id and role
        const { data: userProfile, error: profileError } = await sb
            .from("users")
            .select("org_id, role")
            .eq("id", user.id)
            .single();
        if (profileError || !userProfile) {
            return c.json({ error: "user profile not found" }, 401);
        }
        // Create claims object with Supabase user data
        const claims = {
            sub: user.id,
            email: user.email || "",
            org_id: userProfile.org_id,
            role: userProfile.role || "user"
        };
        c.set("claims", claims);
        await next();
    }
    catch (error) {
        console.error("Auth middleware error:", error);
        return c.json({ error: "invalid token" }, 401);
    }
};


================================================================================
END: D:\clientportal\workers\api\src\middleware\auth.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\middleware\auth.ts
================================================================================

import { MiddlewareHandler } from "hono";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import type { Claims } from "../types";
import type { Env } from "../lib/supabaseAdmin";

export const requireAuth: MiddlewareHandler<{ 
  Variables: { claims: Claims };
  Bindings: Env;
}> = async (c, next) => {
  const auth = c.req.header("authorization") || "";
  const token = auth.startsWith("Bearer ") ? auth.slice(7) : "";
  if (!token) return c.json({ error: "missing token" }, 401);
  
  try {
    const sb = supabaseAdmin(c.env);
    
    // Verify the Supabase JWT token
    const { data: { user }, error } = await sb.auth.getUser(token);
    
    if (error || !user) {
      return c.json({ error: "invalid token" }, 401);
    }
    
    // Get user profile to extract org_id and role
    const { data: userProfile, error: profileError } = await sb
      .from("users")
      .select("org_id, role")
      .eq("id", user.id)
      .single();
    
    if (profileError || !userProfile) {
      return c.json({ error: "user profile not found" }, 401);
    }
    
    // Create claims object with Supabase user data
    const claims: Claims = {
      sub: user.id,
      email: user.email || "",
      org_id: userProfile.org_id,
      role: userProfile.role || "user"
    };
    
    c.set("claims", claims);
    await next();
  } catch (error) {
    console.error("Auth middleware error:", error);
    return c.json({ error: "invalid token" }, 401);
  }
};


================================================================================
END: D:\clientportal\workers\api\src\middleware\auth.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\middleware\common.js
================================================================================

export const requestId = async (c, next) => {
    const id = crypto.randomUUID();
    c.set("reqId", id);
    await next();
    c.res.headers.set("x-request-id", id);
};
export const timing = async (c, next) => {
    const t0 = Date.now();
    await next();
    c.res.headers.set("x-runtime-ms", String(Date.now() - t0));
};
export const cors = (origins) => {
    return async (c, next) => {
        const origin = c.req.header("origin") ?? "";
        if (origins.includes(origin)) {
            c.header("access-control-allow-origin", origin);
            c.header("vary", "origin");
            c.header("access-control-allow-headers", "authorization,content-type");
            c.header("access-control-allow-methods", "GET,POST,PATCH,OPTIONS");
        }
        if (c.req.method === "OPTIONS")
            return new Response(null, { status: 204 });
        await next();
    };
};
// naive in-memory limiter per request scope (Durable recommended for prod)
const hits = new Map();
export const rateLimit = (limit = 60, windowSec = 60) => {
    return async (c, next) => {
        const ip = c.req.header("cf-connecting-ip") ?? "0";
        const now = Math.floor(Date.now() / 1000);
        const key = `${ip}:${now}`;
        const rec = hits.get(key) ?? { n: 0, ts: now };
        rec.n++;
        hits.set(key, rec);
        if (rec.n > limit)
            return c.text("Too Many Requests", 429);
        await next();
    };
};


================================================================================
END: D:\clientportal\workers\api\src\middleware\common.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\middleware\common.ts
================================================================================

import { MiddlewareHandler } from "hono";

export const requestId: MiddlewareHandler = async (c, next) => {
  const id = crypto.randomUUID();
  c.set("reqId", id);
  await next();
  c.res.headers.set("x-request-id", id);
};

export const timing: MiddlewareHandler = async (c, next) => {
  const t0 = Date.now();
  await next();
  c.res.headers.set("x-runtime-ms", String(Date.now() - t0));
};

export const cors = (origins: string[]): MiddlewareHandler => {
  return async (c, next) => {
    const origin = c.req.header("origin") ?? "";
    if (origins.includes(origin)) {
      c.header("access-control-allow-origin", origin);
      c.header("vary", "origin");
      c.header("access-control-allow-headers", "authorization,content-type");
      c.header("access-control-allow-methods", "GET,POST,PATCH,OPTIONS");
    }
    if (c.req.method === "OPTIONS") return new Response(null, { status: 204 });
    await next();
  };
};

// naive in-memory limiter per request scope (Durable recommended for prod)
const hits = new Map<string, { n: number; ts: number }>();
export const rateLimit = (limit = 60, windowSec = 60): MiddlewareHandler => {
  return async (c, next) => {
    const ip = c.req.header("cf-connecting-ip") ?? "0";
    const now = Math.floor(Date.now() / 1000);
    const key = `${ip}:${now}`;
    const rec = hits.get(key) ?? { n: 0, ts: now };
    rec.n++;
    hits.set(key, rec);
    if (rec.n > limit) return c.text("Too Many Requests", 429);
    await next();
  };
};


================================================================================
END: D:\clientportal\workers\api\src\middleware\common.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\auth.js
================================================================================

import { Hono } from "hono";
import { requireAuth } from "../middleware/auth";
import { SignJWT, decodeJwt } from "jose";
import { supabaseAdmin } from "../lib/supabaseAdmin";
export const auth = new Hono();
auth.get("/api/auth/me", requireAuth, async (c) => {
    const claims = c.get("claims");
    const sb = supabaseAdmin(c.env);
    // Get full user data from database
    const { data: user, error } = await sb.from("users").select("*").eq("id", claims.sub).single();
    if (error) {
        return c.json({ error: error.message }, 500);
    }
    // Return user data in the expected format
    return c.json({
        success: true,
        data: {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role || claims.role,
            region: user.region,
            permissions: {
                canCreateForms: user.role === 'admin',
                canManageUsers: user.role === 'admin',
                canViewAllSubmissions: user.role === 'admin',
                canEditSubmissions: user.role === 'admin'
            },
            isActive: user.is_active,
            lastLogin: user.last_login,
            createdAt: user.created_at
        }
    }, 200);
});
// Refresh endpoint - Uses Supabase session refresh
auth.post("/api/auth/refresh", async (c) => {
    try {
        const { refresh_token } = await c.req.json();
        if (!refresh_token) {
            return c.json({ error: "Refresh token is required" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Use Supabase to refresh the session
        const { data, error } = await sb.auth.refreshSession({
            refresh_token
        });
        if (error) {
            console.error("Session refresh error:", error);
            return c.json({ error: "Failed to refresh session" }, 401);
        }
        if (!data.session) {
            return c.json({ error: "No session returned" }, 401);
        }
        return c.json({
            success: true,
            session: data.session
        }, 200);
    }
    catch (error) {
        console.error("Refresh error:", error);
        return c.json({ error: "Internal server error" }, 500);
    }
});
// DEV ONLY - Test Supabase connection
auth.get("/api/auth/test-supabase", async (c) => {
    try {
        const sb = supabaseAdmin(c.env);
        const { data, error } = await sb.from("organizations").select("id, name").limit(1);
        if (error)
            return c.json({ error: error.message, code: error.code }, 500);
        return c.json({ success: true, data }, 200);
    }
    catch (error) {
        return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
    }
});
// DEV ONLY - Check user org_id
auth.get("/api/auth/check-user", async (c) => {
    try {
        const sb = supabaseAdmin(c.env);
        const { data, error } = await sb.from("users").select("id, email, org_id").eq("email", "admin@example.com").single();
        if (error)
            return c.json({ error: error.message, code: error.code }, 500);
        return c.json({ success: true, data }, 200);
    }
    catch (error) {
        return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
    }
});
// Register endpoint - Uses Supabase Auth
auth.post("/api/auth/register", async (c) => {
    try {
        const { name, email, password, role = "user", region = "global" } = await c.req.json();
        if (!name || !email || !password) {
            return c.json({ error: "Name, email, and password are required" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Use Supabase Auth to create user
        const { data: authData, error: authError } = await sb.auth.signUp({
            email,
            password,
            options: {
                data: {
                    name,
                    role,
                    region
                }
            }
        });
        if (authError) {
            console.error("Supabase Auth registration error:", authError);
            return c.json({ error: authError.message }, 400);
        }
        if (!authData.user) {
            return c.json({ error: "Failed to create user" }, 500);
        }
        // Get or create default organization
        const { data: defaultOrg } = await sb
            .from("organizations")
            .select("id")
            .eq("slug", "default-org")
            .single();
        let orgId = defaultOrg?.id;
        if (!orgId) {
            // Create default organization if it doesn't exist
            const { data: newOrg, error: orgError } = await sb
                .from("organizations")
                .insert({
                id: "00000000-0000-0000-0000-000000000001",
                name: "Default Organization",
                slug: "default-org"
            })
                .select("id")
                .single();
            if (orgError) {
                console.error("Failed to create default org:", orgError);
                return c.json({ error: "Failed to create organization" }, 500);
            }
            orgId = newOrg.id;
        }
        // Create user profile in our users table
        const { data: user, error: userError } = await sb
            .from("users")
            .insert({
            id: authData.user.id, // Use Supabase Auth user ID
            name,
            email,
            role,
            region,
            is_active: true,
            org_id: orgId,
            created_at: new Date().toISOString()
        })
            .select("id, email, name, role, region, org_id, is_active")
            .single();
        if (userError) {
            console.error("User profile creation error:", userError);
            return c.json({ error: "Failed to create user profile" }, 500);
        }
        return c.json({
            success: true,
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role,
                region: user.region,
                permissions: {
                    canCreateForms: user.role === 'admin',
                    canManageUsers: user.role === 'admin',
                    canViewAllSubmissions: user.role === 'admin',
                    canEditSubmissions: user.role === 'admin'
                },
                isActive: user.is_active
            },
            session: authData.session // Return Supabase session
        }, 201);
    }
    catch (error) {
        console.error("Registration error:", error);
        return c.json({ error: "Internal server error" }, 500);
    }
});
// Login endpoint - Uses Supabase Auth
auth.post("/api/auth/login", async (c) => {
    try {
        const { email, password } = await c.req.json();
        if (!email || !password) {
            return c.json({ error: "Email and password are required" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Use Supabase Auth to authenticate user
        const { data: authData, error: authError } = await sb.auth.signInWithPassword({
            email,
            password
        });
        if (authError) {
            console.error("Supabase Auth login error:", authError);
            return c.json({ error: "Invalid credentials" }, 401);
        }
        if (!authData.user || !authData.session) {
            return c.json({ error: "Authentication failed" }, 401);
        }
        // Get user profile from our users table
        const { data: user, error: userError } = await sb
            .from("users")
            .select("id, email, name, role, region, org_id, is_active")
            .eq("id", authData.user.id)
            .eq("is_active", true)
            .single();
        if (userError || !user) {
            console.error("User profile fetch error:", userError);
            return c.json({ error: "User profile not found" }, 404);
        }
        return c.json({
            success: true,
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role,
                region: user.region,
                permissions: {
                    canCreateForms: user.role === 'admin',
                    canManageUsers: user.role === 'admin',
                    canViewAllSubmissions: user.role === 'admin',
                    canEditSubmissions: user.role === 'admin'
                },
                isActive: user.is_active
            },
            session: authData.session // Return Supabase session
        }, 200);
    }
    catch (error) {
        console.error("Login error:", error);
        return c.json({ error: "Internal server error" }, 500);
    }
});
// Logout endpoint - Uses Supabase Auth
auth.post("/api/auth/logout", async (c) => {
    try {
        const { refresh_token } = await c.req.json();
        if (!refresh_token) {
            return c.json({ error: "Refresh token is required" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Use Supabase to sign out
        const { error } = await sb.auth.signOut();
        if (error) {
            console.error("Logout error:", error);
            return c.json({ error: "Failed to logout" }, 500);
        }
        return c.json({
            success: true,
            message: "Logged out successfully"
        }, 200);
    }
    catch (error) {
        console.error("Logout error:", error);
        return c.json({ error: "Internal server error" }, 500);
    }
});
// Magic link authentication endpoint
auth.post("/api/auth/magic-link", async (c) => {
    try {
        const { email } = await c.req.json();
        if (!email) {
            return c.json({ error: "Email is required" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Check if user exists
        const { data: user, error } = await sb
            .from("users")
            .select("id, email, name, role, region, org_id, is_active")
            .eq("email", email)
            .eq("is_active", true)
            .single();
        if (error || !user) {
            return c.json({ error: "User not found or inactive" }, 404);
        }
        // Generate magic link token (simplified - in production you'd send an email)
        const iat = Math.floor(Date.now() / 1000);
        const exp = iat + 15 * 60; // 15 minutes for magic link
        const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
        const magicToken = await new SignJWT({
            iss: c.env.JWT_ISSUER,
            sub: user.id,
            org_id: user.org_id,
            role: user.role || "user",
            type: "magic_link"
        })
            .setProtectedHeader({ alg: "HS256", typ: "JWT" })
            .setIssuedAt(iat)
            .setExpirationTime(exp)
            .setIssuer(c.env.JWT_ISSUER)
            .setSubject(user.id)
            .sign(secret);
        // In production, you would send this token via email
        // For now, we'll return it directly for testing
        return c.json({
            success: true,
            message: "Magic link sent to your email",
            magicToken, // Remove this in production
            expiresIn: 15 * 60 // 15 minutes
        }, 200);
    }
    catch (error) {
        console.error("Magic link error:", error);
        return c.json({ error: "Internal server error" }, 500);
    }
});
// Verify magic link and exchange for session token
auth.post("/api/auth/verify-magic-link", async (c) => {
    try {
        const { magicToken } = await c.req.json();
        if (!magicToken) {
            return c.json({ error: "Magic token is required" }, 400);
        }
        // Verify the magic link token
        const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
        const claims = await decodeJwt(magicToken);
        if (claims.type !== "magic_link") {
            return c.json({ error: "Invalid token type" }, 400);
        }
        const sb = supabaseAdmin(c.env);
        // Get user data
        const { data: user, error } = await sb
            .from("users")
            .select("id, email, name, role, region, org_id, is_active")
            .eq("id", claims.sub)
            .eq("is_active", true)
            .single();
        if (error || !user) {
            return c.json({ error: "User not found or inactive" }, 404);
        }
        // Generate session token
        const iat = Math.floor(Date.now() / 1000);
        const exp = iat + 30 * 24 * 3600; // 30 days
        const sessionToken = await new SignJWT({
            iss: c.env.JWT_ISSUER,
            sub: user.id,
            org_id: user.org_id,
            role: user.role || "user"
        })
            .setProtectedHeader({ alg: "HS256", typ: "JWT" })
            .setIssuedAt(iat)
            .setExpirationTime(exp)
            .setIssuer(c.env.JWT_ISSUER)
            .setSubject(user.id)
            .sign(secret);
        return c.json({
            success: true,
            token: sessionToken,
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role,
                region: user.region,
                permissions: {
                    canCreateForms: user.role === 'admin',
                    canManageUsers: user.role === 'admin',
                    canViewAllSubmissions: user.role === 'admin',
                    canEditSubmissions: user.role === 'admin'
                },
                isActive: user.is_active
            }
        }, 200);
    }
    catch (error) {
        console.error("Magic link verification error:", error);
        return c.json({ error: "Invalid or expired magic link" }, 400);
    }
});
// DEV ONLY
auth.post("/api/auth/dev-login", async (c) => {
    try {
        console.log("Dev-login called with headers:", Object.fromEntries(c.req.raw.headers.entries()));
        console.log("Origin:", c.req.header("origin"));
        console.log("Referer:", c.req.header("referer"));
        if (c.env.JWT_ISSUER !== "clientportal")
            return c.json({ error: "disabled" }, 403); // simple guard
        const { email = "crice4485@gmail.com" } = await c.req.json().catch(() => ({}));
        console.log("Email:", email);
        const iss = c.env.JWT_ISSUER;
        // fetch user/org
        const sb = supabaseAdmin(c.env);
        const { data: u, error } = await sb.from("users").select("id,org_id").eq("email", email).single();
        if (error) {
            console.log("Supabase error:", error);
            return c.json({ error: error.message }, 500);
        }
        if (!u) {
            console.log("No user found for email:", email);
            return c.json({ error: "no user" }, 404);
        }
        const iat = Math.floor(Date.now() / 1000);
        const exp = iat + 30 * 24 * 3600;
        const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
        const token = await new SignJWT({ iss, sub: u.id, org_id: u.org_id, role: "admin" })
            .setProtectedHeader({ alg: "HS256", typ: "JWT" })
            .setIssuedAt(iat).setExpirationTime(exp).setIssuer(iss).setSubject(u.id).sign(secret);
        console.log("Token generated successfully for user:", u.id);
        // Get user data for response
        const { data: userData, error: userError } = await sb
            .from("users")
            .select("id, email, name, role, region, is_active")
            .eq("id", u.id)
            .single();
        if (userError || !userData) {
            return c.json({ error: "Failed to get user data" }, 500);
        }
        return c.json({
            success: true,
            token,
            user: {
                id: userData.id,
                name: userData.name || "Admin User",
                email: userData.email,
                role: userData.role || "admin",
                region: userData.region || "global",
                permissions: {
                    canCreateForms: true,
                    canManageUsers: true,
                    canViewAllSubmissions: true,
                    canEditSubmissions: true
                },
                isActive: userData.is_active
            }
        }, 200);
    }
    catch (error) {
        console.log("Dev-login error:", error);
        return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
    }
});


================================================================================
END: D:\clientportal\workers\api\src\routes\auth.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\auth.ts
================================================================================

// 🚫 LOCKED — Do not edit without RFC approval (QiEOS God Doc §12.2)
// This file contains working Supabase Auth integration
// Last verified working: 2025-09-22 - Authentication is functional
import { Hono } from "hono";
import { requireAuth } from "../middleware/auth";
import { SignJWT, decodeJwt } from "jose";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import type { Bindings, Variables } from "../index";

export const auth = new Hono<{ Bindings: Bindings; Variables: Variables }>();

auth.get("/api/auth/me", requireAuth, async (c) => {
  const claims = c.get("claims");
  const sb = supabaseAdmin(c.env);
  
  // Get full user data from database
  const { data: user, error } = await sb.from("users").select("*").eq("id", claims.sub).single();
  if (error) {
    return c.json({ error: error.message }, 500);
  }
  
  // Return user data in the expected format
  return c.json({
    success: true,
    data: {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role || claims.role,
      region: user.region,
      permissions: {
        canCreateForms: user.role === 'admin',
        canManageUsers: user.role === 'admin',
        canViewAllSubmissions: user.role === 'admin',
        canEditSubmissions: user.role === 'admin'
      },
      isActive: user.is_active,
      lastLogin: user.last_login,
      createdAt: user.created_at
    }
  }, 200);
});

// Refresh endpoint - Uses Supabase session refresh
auth.post("/api/auth/refresh", async (c) => {
  try {
    const { refresh_token } = await c.req.json();
    
    if (!refresh_token) {
      return c.json({ error: "Refresh token is required" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Use Supabase to refresh the session
    const { data, error } = await sb.auth.refreshSession({
      refresh_token
    });
    
    if (error) {
      console.error("Session refresh error:", error);
      return c.json({ error: "Failed to refresh session" }, 401);
    }
    
    if (!data.session) {
      return c.json({ error: "No session returned" }, 401);
    }
    
    return c.json({
      success: true,
      session: data.session
    }, 200);
  } catch (error) {
    console.error("Refresh error:", error);
    return c.json({ error: "Internal server error" }, 500);
  }
});

// DEV ONLY - Test Supabase connection
auth.get("/api/auth/test-supabase", async (c) => {
  try {
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb.from("organizations").select("id, name").limit(1);
    if (error) return c.json({ error: error.message, code: error.code }, 500);
    return c.json({ success: true, data }, 200);
  } catch (error) {
    return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
  }
});

// DEV ONLY - Check user org_id
auth.get("/api/auth/check-user", async (c) => {
  try {
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb.from("users").select("id, email, org_id").eq("email", "admin@example.com").single();
    if (error) return c.json({ error: error.message, code: error.code }, 500);
    return c.json({ success: true, data }, 200);
  } catch (error) {
    return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
  }
});

// Register endpoint - Uses Supabase Auth
auth.post("/api/auth/register", async (c) => {
  try {
    const { name, email, password, role = "user", region = "global" } = await c.req.json();
    
    if (!name || !email || !password) {
      return c.json({ error: "Name, email, and password are required" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Use Supabase Auth to create user
    const { data: authData, error: authError } = await sb.auth.signUp({
      email,
      password,
      options: {
        data: {
          name,
          role,
          region
        }
      }
    });
    
    if (authError) {
      console.error("Supabase Auth registration error:", authError);
      return c.json({ error: authError.message }, 400);
    }
    
    if (!authData.user) {
      return c.json({ error: "Failed to create user" }, 500);
    }
    
    // Get or create default organization
    const { data: defaultOrg } = await sb
      .from("organizations")
      .select("id")
      .eq("slug", "default-org")
      .single();
    
    let orgId = defaultOrg?.id;
    if (!orgId) {
      // Create default organization if it doesn't exist
      const { data: newOrg, error: orgError } = await sb
        .from("organizations")
        .insert({
          id: "00000000-0000-0000-0000-000000000001",
          name: "Default Organization",
          slug: "default-org"
        })
        .select("id")
        .single();
      
      if (orgError) {
        console.error("Failed to create default org:", orgError);
        return c.json({ error: "Failed to create organization" }, 500);
      }
      orgId = newOrg.id;
    }

    // Create user profile in our users table
    const { data: user, error: userError } = await sb
      .from("users")
      .insert({
        id: authData.user.id, // Use Supabase Auth user ID
        name,
        email,
        role,
        region,
        is_active: true,
        org_id: orgId,
        created_at: new Date().toISOString()
      })
      .select("id, email, name, role, region, org_id, is_active")
      .single();
    
    if (userError) {
      console.error("User profile creation error:", userError);
      return c.json({ error: "Failed to create user profile" }, 500);
    }
    
    return c.json({
      success: true,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        region: user.region,
        permissions: {
          canCreateForms: user.role === 'admin',
          canManageUsers: user.role === 'admin',
          canViewAllSubmissions: user.role === 'admin',
          canEditSubmissions: user.role === 'admin'
        },
        isActive: user.is_active
      },
      session: authData.session // Return Supabase session
    }, 201);
  } catch (error) {
    console.error("Registration error:", error);
    return c.json({ error: "Internal server error" }, 500);
  }
});

// Login endpoint - Uses Supabase Auth
auth.post("/api/auth/login", async (c) => {
  try {
    const { email, password } = await c.req.json();
    
    if (!email || !password) {
      return c.json({ error: "Email and password are required" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Use Supabase Auth to authenticate user
    const { data: authData, error: authError } = await sb.auth.signInWithPassword({
      email,
      password
    });
    
    if (authError) {
      console.error("Supabase Auth login error:", authError);
      return c.json({ error: "Invalid credentials" }, 401);
    }
    
    if (!authData.user || !authData.session) {
      return c.json({ error: "Authentication failed" }, 401);
    }
    
    // Get user profile from our users table
    const { data: user, error: userError } = await sb
      .from("users")
      .select("id, email, name, role, region, org_id, is_active")
      .eq("id", authData.user.id)
      .eq("is_active", true)
      .single();
    
    if (userError || !user) {
      console.error("User profile fetch error:", userError);
      return c.json({ error: "User profile not found" }, 404);
    }
    
    return c.json({
      success: true,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        region: user.region,
        permissions: {
          canCreateForms: user.role === 'admin',
          canManageUsers: user.role === 'admin',
          canViewAllSubmissions: user.role === 'admin',
          canEditSubmissions: user.role === 'admin'
        },
        isActive: user.is_active
      },
      session: authData.session // Return Supabase session
    }, 200);
  } catch (error) {
    console.error("Login error:", error);
    return c.json({ error: "Internal server error" }, 500);
  }
});

// Logout endpoint - Uses Supabase Auth
auth.post("/api/auth/logout", async (c) => {
  try {
    const { refresh_token } = await c.req.json();
    
    if (!refresh_token) {
      return c.json({ error: "Refresh token is required" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Use Supabase to sign out
    const { error } = await sb.auth.signOut();
    
    if (error) {
      console.error("Logout error:", error);
      return c.json({ error: "Failed to logout" }, 500);
    }
    
    return c.json({
      success: true,
      message: "Logged out successfully"
    }, 200);
  } catch (error) {
    console.error("Logout error:", error);
    return c.json({ error: "Internal server error" }, 500);
  }
});

// Magic link authentication endpoint
auth.post("/api/auth/magic-link", async (c) => {
  try {
    const { email } = await c.req.json();
    
    if (!email) {
      return c.json({ error: "Email is required" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Check if user exists
    const { data: user, error } = await sb
      .from("users")
      .select("id, email, name, role, region, org_id, is_active")
      .eq("email", email)
      .eq("is_active", true)
      .single();
    
    if (error || !user) {
      return c.json({ error: "User not found or inactive" }, 404);
    }
    
    // Generate magic link token (simplified - in production you'd send an email)
    const iat = Math.floor(Date.now() / 1000);
    const exp = iat + 15 * 60; // 15 minutes for magic link
    const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
    const magicToken = await new SignJWT({
      iss: c.env.JWT_ISSUER,
      sub: user.id,
      org_id: user.org_id,
      role: user.role || "user",
      type: "magic_link"
    })
      .setProtectedHeader({ alg: "HS256", typ: "JWT" })
      .setIssuedAt(iat)
      .setExpirationTime(exp)
      .setIssuer(c.env.JWT_ISSUER)
      .setSubject(user.id)
      .sign(secret);
    
    // In production, you would send this token via email
    // For now, we'll return it directly for testing
    return c.json({
      success: true,
      message: "Magic link sent to your email",
      magicToken, // Remove this in production
      expiresIn: 15 * 60 // 15 minutes
    }, 200);
  } catch (error) {
    console.error("Magic link error:", error);
    return c.json({ error: "Internal server error" }, 500);
  }
});

// Verify magic link and exchange for session token
auth.post("/api/auth/verify-magic-link", async (c) => {
  try {
    const { magicToken } = await c.req.json();
    
    if (!magicToken) {
      return c.json({ error: "Magic token is required" }, 400);
    }
    
    // Verify the magic link token
    const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
    const claims = await decodeJwt(magicToken) as any;
    
    if (claims.type !== "magic_link") {
      return c.json({ error: "Invalid token type" }, 400);
    }
    
    const sb = supabaseAdmin(c.env);
    
    // Get user data
    const { data: user, error } = await sb
      .from("users")
      .select("id, email, name, role, region, org_id, is_active")
      .eq("id", claims.sub)
      .eq("is_active", true)
      .single();
    
    if (error || !user) {
      return c.json({ error: "User not found or inactive" }, 404);
    }
    
    // Generate session token
    const iat = Math.floor(Date.now() / 1000);
    const exp = iat + 30 * 24 * 3600; // 30 days
    const sessionToken = await new SignJWT({
      iss: c.env.JWT_ISSUER,
      sub: user.id,
      org_id: user.org_id,
      role: user.role || "user"
    })
      .setProtectedHeader({ alg: "HS256", typ: "JWT" })
      .setIssuedAt(iat)
      .setExpirationTime(exp)
      .setIssuer(c.env.JWT_ISSUER)
      .setSubject(user.id)
      .sign(secret);
    
    return c.json({
      success: true,
      token: sessionToken,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        region: user.region,
        permissions: {
          canCreateForms: user.role === 'admin',
          canManageUsers: user.role === 'admin',
          canViewAllSubmissions: user.role === 'admin',
          canEditSubmissions: user.role === 'admin'
        },
        isActive: user.is_active
      }
    }, 200);
  } catch (error) {
    console.error("Magic link verification error:", error);
    return c.json({ error: "Invalid or expired magic link" }, 400);
  }
});

// DEV ONLY
auth.post("/api/auth/dev-login", async (c) => {
  try {
    console.log("Dev-login called with headers:", Object.fromEntries(c.req.raw.headers.entries()));
    console.log("Origin:", c.req.header("origin"));
    console.log("Referer:", c.req.header("referer"));
    
    if (c.env.JWT_ISSUER !== "clientportal") return c.json({error:"disabled"}, 403); // simple guard
    const { email = "crice4485@gmail.com" } = await c.req.json().catch(()=>({}));
    console.log("Email:", email);
    
    const iss = c.env.JWT_ISSUER;
    
    // fetch user/org
    const sb = supabaseAdmin(c.env);
    const { data: u, error } = await sb.from("users").select("id,org_id").eq("email", email).single();
    if (error) {
      console.log("Supabase error:", error);
      return c.json({ error: error.message }, 500);
    }
    if (!u) {
      console.log("No user found for email:", email);
      return c.json({ error: "no user" }, 404);
    }

    const iat = Math.floor(Date.now()/1000);
    const exp = iat + 30*24*3600;
    const secret = new TextEncoder().encode(c.env.JWT_HS256_SECRET);
    const token = await new SignJWT({ iss, sub: u.id, org_id: u.org_id, role:"admin" })
      .setProtectedHeader({ alg:"HS256", typ:"JWT" })
      .setIssuedAt(iat).setExpirationTime(exp).setIssuer(iss).setSubject(u.id).sign(secret);
    
    console.log("Token generated successfully for user:", u.id);
    
    // Get user data for response
    const { data: userData, error: userError } = await sb
      .from("users")
      .select("id, email, name, role, region, is_active")
      .eq("id", u.id)
      .single();
    
    if (userError || !userData) {
      return c.json({ error: "Failed to get user data" }, 500);
    }
    
    return c.json({
      success: true,
      token,
      user: {
        id: userData.id,
        name: userData.name || "Admin User",
        email: userData.email,
        role: userData.role || "admin",
        region: userData.region || "global",
        permissions: {
          canCreateForms: true,
          canManageUsers: true,
          canViewAllSubmissions: true,
          canEditSubmissions: true
        },
        isActive: userData.is_active
      }
    }, 200);
  } catch (error) {
    console.log("Dev-login error:", error);
    return c.json({ error: error instanceof Error ? error.message : String(error) }, 500);
  }
});

================================================================================
END: D:\clientportal\workers\api\src\routes\auth.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\forms.js
================================================================================

import { Hono } from "hono";
import { zValidator } from "@hono/zod-validator";
import { requireAuth } from "../middleware/auth";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import { FormCreate } from "../types";
export const forms = new Hono();
forms.get("/api/forms", requireAuth, async (c) => {
    const { org_id } = c.get("claims");
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb.from("forms").select("*").eq("org_id", org_id).order("created_at", { ascending: false });
    if (error)
        return c.json({ error: error.message }, 500);
    return c.json(data ?? [], 200);
});
forms.post("/api/forms", requireAuth, zValidator("json", FormCreate, (result, c) => {
    if (!result.success) {
        return c.json({ error: result.error.issues }, 400);
    }
}), async (c) => {
    const { org_id, sub } = c.get("claims");
    const body = c.req.valid("json");
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb
        .from("forms")
        .insert([{ org_id, owner_id: sub, title: body.title, schema_json: body.schema }])
        .select("id")
        .single();
    if (error)
        return c.json({ error: error.message }, 500);
    return c.json({ id: data.id }, 201);
});


================================================================================
END: D:\clientportal\workers\api\src\routes\forms.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\forms.ts
================================================================================

import { Hono } from "hono";
import { zValidator } from "@hono/zod-validator";
import { requireAuth } from "../middleware/auth";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import { FormCreate } from "../types";
import type { Bindings, Variables } from "../index";

export const forms = new Hono<{ Bindings: Bindings; Variables: Variables }>();

forms.get("/api/forms", requireAuth, async (c) => {
  const { org_id } = c.get("claims");
  const sb = supabaseAdmin(c.env);
  const { data, error } = await sb.from("forms").select("*").eq("org_id", org_id).order("created_at", { ascending: false });
  if (error) return c.json({ error: error.message }, 500);
  return c.json(data ?? [], 200);
});

forms.post(
  "/api/forms",
  requireAuth,
  zValidator("json", FormCreate, (result, c) => {
    if (!result.success) {
      return c.json({ error: result.error.issues }, 400);
    }
  }),
  async (c) => {
    const { org_id, sub } = c.get("claims");
    const body = c.req.valid("json");
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb
      .from("forms")
      .insert([{ org_id, owner_id: sub, title: body.title, schema_json: body.schema }])
      .select("id")
      .single();
    if (error) return c.json({ error: error.message }, 500);
    return c.json({ id: data.id }, 201);
  }
);


================================================================================
END: D:\clientportal\workers\api\src\routes\forms.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\health.js
================================================================================

import { Hono } from "hono";
export const health = new Hono();
health.get("/health", (c) => c.json({ ok: true }));


================================================================================
END: D:\clientportal\workers\api\src\routes\health.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\health.ts
================================================================================

import { Hono } from "hono";
export const health = new Hono();
health.get("/health", (c) => c.json({ ok: true }));


================================================================================
END: D:\clientportal\workers\api\src\routes\health.ts
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\submissions.js
================================================================================

import { Hono } from "hono";
import { zValidator } from "@hono/zod-validator";
import { requireAuth } from "../middleware/auth";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import { SubmissionCreate } from "../types";
export const submissions = new Hono();
submissions.get("/api/submissions", requireAuth, async (c) => {
    const { org_id } = c.get("claims");
    const sb = supabaseAdmin(c.env);
    const { data, error } = await sb.from("submissions").select("*").eq("org_id", org_id).order("created_at", { ascending: false });
    if (error)
        return c.json({ error: error.message }, 500);
    return c.json(data ?? [], 200);
});
submissions.post("/api/submissions", requireAuth, zValidator("json", SubmissionCreate, (result, c) => {
    if (!result.success) {
        return c.json({ error: result.error.issues }, 400);
    }
}), async (c) => {
    const { org_id, sub } = c.get("claims");
    const body = c.req.valid("json");
    const sb = supabaseAdmin(c.env);
    const { error } = await sb
        .from("submissions")
        .insert([{ org_id, form_id: body.form_id, submitter_id: sub, data_json: body.data }]);
    if (error)
        return c.json({ error: error.message }, 500);
    return c.body(null, 201);
});


================================================================================
END: D:\clientportal\workers\api\src\routes\submissions.js
================================================================================


================================================================================
FILE: D:\clientportal\workers\api\src\routes\submissions.ts
================================================================================

import { Hono } from "hono";
import { zValidator } from "@hono/zod-validator";
import { requireAuth } from "../middleware/auth";
import { supabaseAdmin } from "../lib/supabaseAdmin";
import { SubmissionCreate } from "../types";
import type { Bindings, Variables } from "../index";

export const submissions = new Hono<{ Bindings: Bindings; Variables: Variables }>();

submissions.get("/api/submissions", requireAuth, async (c) => {
  const { org_id } = c.get("claims");
  const sb = supabaseAdmin(c.env);
  const { data, error } = await sb.from("submissions").select("*").eq("org_id", org_id).order("created_at", { ascending: false });
  if (error) return c.json({ error: error.message }, 500);
  return c.json(data ?? [], 200);
});

submissions.post(
  "/api/submissions",
  requireAuth,
  zValidator("json", SubmissionCreate, (result, c) => {
    if (!result.success) {
      return c.json({ error: result.error.issues }, 400);
    }
  }),
  async (c) => {
    const { org_id, sub } = c.get("claims");
    const body = c.req.valid("json");
    const sb = supabaseAdmin(c.env);
    const { error } = await sb
      .from("submissions")
      .insert([{ org_id, form_id: body.form_id, submitter_id: sub, data_json: body.data }]);
    if (error) return c.json({ error: error.message }, 500);
    return c.body(null, 201);
  }
);


================================================================================
END: D:\clientportal\workers\api\src\routes\submissions.ts
================================================================================


================================================================================
COMPLETE - 96 files extracted
================================================================================
